
Timer_Input_Capture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  08005890  08005890  00015890  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b50  08005b50  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08005b50  08005b50  00015b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b58  08005b58  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b58  08005b58  00015b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b5c  08005b5c  00015b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08005b60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  200001dc  08005d3c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d8  08005d3c  000202d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a2b9  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015f2  00000000  00000000  0002a4c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ad0  00000000  00000000  0002bab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a18  00000000  00000000  0002c588  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020955  00000000  00000000  0002cfa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000869f  00000000  00000000  0004d8f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c911a  00000000  00000000  00055f94  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011f0ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037a8  00000000  00000000  0011f12c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005874 	.word	0x08005874

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08005874 	.word	0x08005874

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eac:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <HAL_Init+0x40>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ee8 <HAL_Init+0x40>)
 8000eb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <HAL_Init+0x40>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <HAL_Init+0x40>)
 8000ebe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ec2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec4:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <HAL_Init+0x40>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a07      	ldr	r2, [pc, #28]	; (8000ee8 <HAL_Init+0x40>)
 8000eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ece:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed0:	2003      	movs	r0, #3
 8000ed2:	f000 f92b 	bl	800112c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f000 f808 	bl	8000eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000edc:	f002 fb60 	bl	80035a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40023c00 	.word	0x40023c00

08000eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef4:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <HAL_InitTick+0x54>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <HAL_InitTick+0x58>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 f943 	bl	8001196 <HAL_SYSTICK_Config>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e00e      	b.n	8000f38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b0f      	cmp	r3, #15
 8000f1e:	d80a      	bhi.n	8000f36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f20:	2200      	movs	r2, #0
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	f04f 30ff 	mov.w	r0, #4294967295
 8000f28:	f000 f90b 	bl	8001142 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f2c:	4a06      	ldr	r2, [pc, #24]	; (8000f48 <HAL_InitTick+0x5c>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f32:	2300      	movs	r3, #0
 8000f34:	e000      	b.n	8000f38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000008 	.word	0x20000008
 8000f44:	20000004 	.word	0x20000004
 8000f48:	20000000 	.word	0x20000000

08000f4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_IncTick+0x20>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_IncTick+0x24>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <HAL_IncTick+0x24>)
 8000f5e:	6013      	str	r3, [r2, #0]
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000004 	.word	0x20000004
 8000f70:	20000210 	.word	0x20000210

08000f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return uwTick;
 8000f78:	4b03      	ldr	r3, [pc, #12]	; (8000f88 <HAL_GetTick+0x14>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	20000210 	.word	0x20000210

08000f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa2:	68ba      	ldr	r2, [r7, #8]
 8000fa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fa8:	4013      	ands	r3, r2
 8000faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fbe:	4a04      	ldr	r2, [pc, #16]	; (8000fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	60d3      	str	r3, [r2, #12]
}
 8000fc4:	bf00      	nop
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd8:	4b04      	ldr	r3, [pc, #16]	; (8000fec <__NVIC_GetPriorityGrouping+0x18>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	0a1b      	lsrs	r3, r3, #8
 8000fde:	f003 0307 	and.w	r3, r3, #7
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	db0b      	blt.n	800101a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	f003 021f 	and.w	r2, r3, #31
 8001008:	4907      	ldr	r1, [pc, #28]	; (8001028 <__NVIC_EnableIRQ+0x38>)
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	095b      	lsrs	r3, r3, #5
 8001010:	2001      	movs	r0, #1
 8001012:	fa00 f202 	lsl.w	r2, r0, r2
 8001016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	e000e100 	.word	0xe000e100

0800102c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	6039      	str	r1, [r7, #0]
 8001036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103c:	2b00      	cmp	r3, #0
 800103e:	db0a      	blt.n	8001056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	b2da      	uxtb	r2, r3
 8001044:	490c      	ldr	r1, [pc, #48]	; (8001078 <__NVIC_SetPriority+0x4c>)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	0112      	lsls	r2, r2, #4
 800104c:	b2d2      	uxtb	r2, r2
 800104e:	440b      	add	r3, r1
 8001050:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001054:	e00a      	b.n	800106c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	b2da      	uxtb	r2, r3
 800105a:	4908      	ldr	r1, [pc, #32]	; (800107c <__NVIC_SetPriority+0x50>)
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	f003 030f 	and.w	r3, r3, #15
 8001062:	3b04      	subs	r3, #4
 8001064:	0112      	lsls	r2, r2, #4
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	440b      	add	r3, r1
 800106a:	761a      	strb	r2, [r3, #24]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000e100 	.word	0xe000e100
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001080:	b480      	push	{r7}
 8001082:	b089      	sub	sp, #36	; 0x24
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f1c3 0307 	rsb	r3, r3, #7
 800109a:	2b04      	cmp	r3, #4
 800109c:	bf28      	it	cs
 800109e:	2304      	movcs	r3, #4
 80010a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3304      	adds	r3, #4
 80010a6:	2b06      	cmp	r3, #6
 80010a8:	d902      	bls.n	80010b0 <NVIC_EncodePriority+0x30>
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3b03      	subs	r3, #3
 80010ae:	e000      	b.n	80010b2 <NVIC_EncodePriority+0x32>
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	f04f 32ff 	mov.w	r2, #4294967295
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43da      	mvns	r2, r3
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	401a      	ands	r2, r3
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c8:	f04f 31ff 	mov.w	r1, #4294967295
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	fa01 f303 	lsl.w	r3, r1, r3
 80010d2:	43d9      	mvns	r1, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	4313      	orrs	r3, r2
         );
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3724      	adds	r7, #36	; 0x24
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010f8:	d301      	bcc.n	80010fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010fa:	2301      	movs	r3, #1
 80010fc:	e00f      	b.n	800111e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010fe:	4a0a      	ldr	r2, [pc, #40]	; (8001128 <SysTick_Config+0x40>)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3b01      	subs	r3, #1
 8001104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001106:	210f      	movs	r1, #15
 8001108:	f04f 30ff 	mov.w	r0, #4294967295
 800110c:	f7ff ff8e 	bl	800102c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <SysTick_Config+0x40>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001116:	4b04      	ldr	r3, [pc, #16]	; (8001128 <SysTick_Config+0x40>)
 8001118:	2207      	movs	r2, #7
 800111a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	e000e010 	.word	0xe000e010

0800112c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ff29 	bl	8000f8c <__NVIC_SetPriorityGrouping>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001142:	b580      	push	{r7, lr}
 8001144:	b086      	sub	sp, #24
 8001146:	af00      	add	r7, sp, #0
 8001148:	4603      	mov	r3, r0
 800114a:	60b9      	str	r1, [r7, #8]
 800114c:	607a      	str	r2, [r7, #4]
 800114e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001154:	f7ff ff3e 	bl	8000fd4 <__NVIC_GetPriorityGrouping>
 8001158:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	68b9      	ldr	r1, [r7, #8]
 800115e:	6978      	ldr	r0, [r7, #20]
 8001160:	f7ff ff8e 	bl	8001080 <NVIC_EncodePriority>
 8001164:	4602      	mov	r2, r0
 8001166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116a:	4611      	mov	r1, r2
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff5d 	bl	800102c <__NVIC_SetPriority>
}
 8001172:	bf00      	nop
 8001174:	3718      	adds	r7, #24
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	4603      	mov	r3, r0
 8001182:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff31 	bl	8000ff0 <__NVIC_EnableIRQ>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff ffa2 	bl	80010e8 <SysTick_Config>
 80011a4:	4603      	mov	r3, r0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b04      	cmp	r3, #4
 80011bc:	d106      	bne.n	80011cc <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80011be:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a08      	ldr	r2, [pc, #32]	; (80011e4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80011c4:	f043 0304 	orr.w	r3, r3, #4
 80011c8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80011ca:	e005      	b.n	80011d8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80011d2:	f023 0304 	bic.w	r3, r3, #4
 80011d6:	6013      	str	r3, [r2, #0]
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000e010 	.word	0xe000e010

080011e8 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80011ec:	f000 f802 	bl	80011f4 <HAL_SYSTICK_Callback>
}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001204:	b480      	push	{r7}
 8001206:	b089      	sub	sp, #36	; 0x24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001216:	2300      	movs	r3, #0
 8001218:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
 800121e:	e16b      	b.n	80014f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001220:	2201      	movs	r2, #1
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	4013      	ands	r3, r2
 8001232:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	429a      	cmp	r2, r3
 800123a:	f040 815a 	bne.w	80014f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d00b      	beq.n	800125e <HAL_GPIO_Init+0x5a>
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	2b02      	cmp	r3, #2
 800124c:	d007      	beq.n	800125e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001252:	2b11      	cmp	r3, #17
 8001254:	d003      	beq.n	800125e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	2b12      	cmp	r3, #18
 800125c:	d130      	bne.n	80012c0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	2203      	movs	r2, #3
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	68da      	ldr	r2, [r3, #12]
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4313      	orrs	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001294:	2201      	movs	r2, #1
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	091b      	lsrs	r3, r3, #4
 80012aa:	f003 0201 	and.w	r2, r3, #1
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	2203      	movs	r2, #3
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d003      	beq.n	8001300 <HAL_GPIO_Init+0xfc>
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	2b12      	cmp	r3, #18
 80012fe:	d123      	bne.n	8001348 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	08da      	lsrs	r2, r3, #3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3208      	adds	r2, #8
 8001308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800130c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	f003 0307 	and.w	r3, r3, #7
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	220f      	movs	r2, #15
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	691a      	ldr	r2, [r3, #16]
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	08da      	lsrs	r2, r3, #3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	3208      	adds	r2, #8
 8001342:	69b9      	ldr	r1, [r7, #24]
 8001344:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	2203      	movs	r2, #3
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 0203 	and.w	r2, r3, #3
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001384:	2b00      	cmp	r3, #0
 8001386:	f000 80b4 	beq.w	80014f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	4b5f      	ldr	r3, [pc, #380]	; (800150c <HAL_GPIO_Init+0x308>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	4a5e      	ldr	r2, [pc, #376]	; (800150c <HAL_GPIO_Init+0x308>)
 8001394:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001398:	6453      	str	r3, [r2, #68]	; 0x44
 800139a:	4b5c      	ldr	r3, [pc, #368]	; (800150c <HAL_GPIO_Init+0x308>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013a6:	4a5a      	ldr	r2, [pc, #360]	; (8001510 <HAL_GPIO_Init+0x30c>)
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	089b      	lsrs	r3, r3, #2
 80013ac:	3302      	adds	r3, #2
 80013ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	f003 0303 	and.w	r3, r3, #3
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	220f      	movs	r2, #15
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4013      	ands	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a51      	ldr	r2, [pc, #324]	; (8001514 <HAL_GPIO_Init+0x310>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d02b      	beq.n	800142a <HAL_GPIO_Init+0x226>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a50      	ldr	r2, [pc, #320]	; (8001518 <HAL_GPIO_Init+0x314>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d025      	beq.n	8001426 <HAL_GPIO_Init+0x222>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a4f      	ldr	r2, [pc, #316]	; (800151c <HAL_GPIO_Init+0x318>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d01f      	beq.n	8001422 <HAL_GPIO_Init+0x21e>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a4e      	ldr	r2, [pc, #312]	; (8001520 <HAL_GPIO_Init+0x31c>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d019      	beq.n	800141e <HAL_GPIO_Init+0x21a>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a4d      	ldr	r2, [pc, #308]	; (8001524 <HAL_GPIO_Init+0x320>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d013      	beq.n	800141a <HAL_GPIO_Init+0x216>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a4c      	ldr	r2, [pc, #304]	; (8001528 <HAL_GPIO_Init+0x324>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d00d      	beq.n	8001416 <HAL_GPIO_Init+0x212>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a4b      	ldr	r2, [pc, #300]	; (800152c <HAL_GPIO_Init+0x328>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d007      	beq.n	8001412 <HAL_GPIO_Init+0x20e>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a4a      	ldr	r2, [pc, #296]	; (8001530 <HAL_GPIO_Init+0x32c>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d101      	bne.n	800140e <HAL_GPIO_Init+0x20a>
 800140a:	2307      	movs	r3, #7
 800140c:	e00e      	b.n	800142c <HAL_GPIO_Init+0x228>
 800140e:	2308      	movs	r3, #8
 8001410:	e00c      	b.n	800142c <HAL_GPIO_Init+0x228>
 8001412:	2306      	movs	r3, #6
 8001414:	e00a      	b.n	800142c <HAL_GPIO_Init+0x228>
 8001416:	2305      	movs	r3, #5
 8001418:	e008      	b.n	800142c <HAL_GPIO_Init+0x228>
 800141a:	2304      	movs	r3, #4
 800141c:	e006      	b.n	800142c <HAL_GPIO_Init+0x228>
 800141e:	2303      	movs	r3, #3
 8001420:	e004      	b.n	800142c <HAL_GPIO_Init+0x228>
 8001422:	2302      	movs	r3, #2
 8001424:	e002      	b.n	800142c <HAL_GPIO_Init+0x228>
 8001426:	2301      	movs	r3, #1
 8001428:	e000      	b.n	800142c <HAL_GPIO_Init+0x228>
 800142a:	2300      	movs	r3, #0
 800142c:	69fa      	ldr	r2, [r7, #28]
 800142e:	f002 0203 	and.w	r2, r2, #3
 8001432:	0092      	lsls	r2, r2, #2
 8001434:	4093      	lsls	r3, r2
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800143c:	4934      	ldr	r1, [pc, #208]	; (8001510 <HAL_GPIO_Init+0x30c>)
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	089b      	lsrs	r3, r3, #2
 8001442:	3302      	adds	r3, #2
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800144a:	4b3a      	ldr	r3, [pc, #232]	; (8001534 <HAL_GPIO_Init+0x330>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	43db      	mvns	r3, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4013      	ands	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800146e:	4a31      	ldr	r2, [pc, #196]	; (8001534 <HAL_GPIO_Init+0x330>)
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001474:	4b2f      	ldr	r3, [pc, #188]	; (8001534 <HAL_GPIO_Init+0x330>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	43db      	mvns	r3, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d003      	beq.n	8001498 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	4313      	orrs	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001498:	4a26      	ldr	r2, [pc, #152]	; (8001534 <HAL_GPIO_Init+0x330>)
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800149e:	4b25      	ldr	r3, [pc, #148]	; (8001534 <HAL_GPIO_Init+0x330>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	43db      	mvns	r3, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4013      	ands	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014c2:	4a1c      	ldr	r2, [pc, #112]	; (8001534 <HAL_GPIO_Init+0x330>)
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014c8:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <HAL_GPIO_Init+0x330>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	43db      	mvns	r3, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014ec:	4a11      	ldr	r2, [pc, #68]	; (8001534 <HAL_GPIO_Init+0x330>)
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	3301      	adds	r3, #1
 80014f6:	61fb      	str	r3, [r7, #28]
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	2b0f      	cmp	r3, #15
 80014fc:	f67f ae90 	bls.w	8001220 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001500:	bf00      	nop
 8001502:	3724      	adds	r7, #36	; 0x24
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	40023800 	.word	0x40023800
 8001510:	40013800 	.word	0x40013800
 8001514:	40020000 	.word	0x40020000
 8001518:	40020400 	.word	0x40020400
 800151c:	40020800 	.word	0x40020800
 8001520:	40020c00 	.word	0x40020c00
 8001524:	40021000 	.word	0x40021000
 8001528:	40021400 	.word	0x40021400
 800152c:	40021800 	.word	0x40021800
 8001530:	40021c00 	.word	0x40021c00
 8001534:	40013c00 	.word	0x40013c00

08001538 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	460b      	mov	r3, r1
 8001542:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	695a      	ldr	r2, [r3, #20]
 8001548:	887b      	ldrh	r3, [r7, #2]
 800154a:	401a      	ands	r2, r3
 800154c:	887b      	ldrh	r3, [r7, #2]
 800154e:	429a      	cmp	r2, r3
 8001550:	d104      	bne.n	800155c <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001552:	887b      	ldrh	r3, [r7, #2]
 8001554:	041a      	lsls	r2, r3, #16
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800155a:	e002      	b.n	8001562 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800155c:	887a      	ldrh	r2, [r7, #2]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	619a      	str	r2, [r3, #24]
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
	...

08001570 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e25b      	b.n	8001a3a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	2b00      	cmp	r3, #0
 800158c:	d075      	beq.n	800167a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800158e:	4ba3      	ldr	r3, [pc, #652]	; (800181c <HAL_RCC_OscConfig+0x2ac>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f003 030c 	and.w	r3, r3, #12
 8001596:	2b04      	cmp	r3, #4
 8001598:	d00c      	beq.n	80015b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800159a:	4ba0      	ldr	r3, [pc, #640]	; (800181c <HAL_RCC_OscConfig+0x2ac>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015a2:	2b08      	cmp	r3, #8
 80015a4:	d112      	bne.n	80015cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015a6:	4b9d      	ldr	r3, [pc, #628]	; (800181c <HAL_RCC_OscConfig+0x2ac>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015b2:	d10b      	bne.n	80015cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b4:	4b99      	ldr	r3, [pc, #612]	; (800181c <HAL_RCC_OscConfig+0x2ac>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d05b      	beq.n	8001678 <HAL_RCC_OscConfig+0x108>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d157      	bne.n	8001678 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e236      	b.n	8001a3a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015d4:	d106      	bne.n	80015e4 <HAL_RCC_OscConfig+0x74>
 80015d6:	4b91      	ldr	r3, [pc, #580]	; (800181c <HAL_RCC_OscConfig+0x2ac>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a90      	ldr	r2, [pc, #576]	; (800181c <HAL_RCC_OscConfig+0x2ac>)
 80015dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	e01d      	b.n	8001620 <HAL_RCC_OscConfig+0xb0>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015ec:	d10c      	bne.n	8001608 <HAL_RCC_OscConfig+0x98>
 80015ee:	4b8b      	ldr	r3, [pc, #556]	; (800181c <HAL_RCC_OscConfig+0x2ac>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a8a      	ldr	r2, [pc, #552]	; (800181c <HAL_RCC_OscConfig+0x2ac>)
 80015f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015f8:	6013      	str	r3, [r2, #0]
 80015fa:	4b88      	ldr	r3, [pc, #544]	; (800181c <HAL_RCC_OscConfig+0x2ac>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a87      	ldr	r2, [pc, #540]	; (800181c <HAL_RCC_OscConfig+0x2ac>)
 8001600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	e00b      	b.n	8001620 <HAL_RCC_OscConfig+0xb0>
 8001608:	4b84      	ldr	r3, [pc, #528]	; (800181c <HAL_RCC_OscConfig+0x2ac>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a83      	ldr	r2, [pc, #524]	; (800181c <HAL_RCC_OscConfig+0x2ac>)
 800160e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001612:	6013      	str	r3, [r2, #0]
 8001614:	4b81      	ldr	r3, [pc, #516]	; (800181c <HAL_RCC_OscConfig+0x2ac>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a80      	ldr	r2, [pc, #512]	; (800181c <HAL_RCC_OscConfig+0x2ac>)
 800161a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800161e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d013      	beq.n	8001650 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001628:	f7ff fca4 	bl	8000f74 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001630:	f7ff fca0 	bl	8000f74 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b64      	cmp	r3, #100	; 0x64
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e1fb      	b.n	8001a3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001642:	4b76      	ldr	r3, [pc, #472]	; (800181c <HAL_RCC_OscConfig+0x2ac>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0f0      	beq.n	8001630 <HAL_RCC_OscConfig+0xc0>
 800164e:	e014      	b.n	800167a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001650:	f7ff fc90 	bl	8000f74 <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001658:	f7ff fc8c 	bl	8000f74 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b64      	cmp	r3, #100	; 0x64
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e1e7      	b.n	8001a3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800166a:	4b6c      	ldr	r3, [pc, #432]	; (800181c <HAL_RCC_OscConfig+0x2ac>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1f0      	bne.n	8001658 <HAL_RCC_OscConfig+0xe8>
 8001676:	e000      	b.n	800167a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d063      	beq.n	800174e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001686:	4b65      	ldr	r3, [pc, #404]	; (800181c <HAL_RCC_OscConfig+0x2ac>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f003 030c 	and.w	r3, r3, #12
 800168e:	2b00      	cmp	r3, #0
 8001690:	d00b      	beq.n	80016aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001692:	4b62      	ldr	r3, [pc, #392]	; (800181c <HAL_RCC_OscConfig+0x2ac>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800169a:	2b08      	cmp	r3, #8
 800169c:	d11c      	bne.n	80016d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800169e:	4b5f      	ldr	r3, [pc, #380]	; (800181c <HAL_RCC_OscConfig+0x2ac>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d116      	bne.n	80016d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016aa:	4b5c      	ldr	r3, [pc, #368]	; (800181c <HAL_RCC_OscConfig+0x2ac>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d005      	beq.n	80016c2 <HAL_RCC_OscConfig+0x152>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d001      	beq.n	80016c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e1bb      	b.n	8001a3a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c2:	4b56      	ldr	r3, [pc, #344]	; (800181c <HAL_RCC_OscConfig+0x2ac>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	4952      	ldr	r1, [pc, #328]	; (800181c <HAL_RCC_OscConfig+0x2ac>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016d6:	e03a      	b.n	800174e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d020      	beq.n	8001722 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016e0:	4b4f      	ldr	r3, [pc, #316]	; (8001820 <HAL_RCC_OscConfig+0x2b0>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e6:	f7ff fc45 	bl	8000f74 <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016ee:	f7ff fc41 	bl	8000f74 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e19c      	b.n	8001a3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001700:	4b46      	ldr	r3, [pc, #280]	; (800181c <HAL_RCC_OscConfig+0x2ac>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0f0      	beq.n	80016ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800170c:	4b43      	ldr	r3, [pc, #268]	; (800181c <HAL_RCC_OscConfig+0x2ac>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	4940      	ldr	r1, [pc, #256]	; (800181c <HAL_RCC_OscConfig+0x2ac>)
 800171c:	4313      	orrs	r3, r2
 800171e:	600b      	str	r3, [r1, #0]
 8001720:	e015      	b.n	800174e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001722:	4b3f      	ldr	r3, [pc, #252]	; (8001820 <HAL_RCC_OscConfig+0x2b0>)
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001728:	f7ff fc24 	bl	8000f74 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001730:	f7ff fc20 	bl	8000f74 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e17b      	b.n	8001a3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001742:	4b36      	ldr	r3, [pc, #216]	; (800181c <HAL_RCC_OscConfig+0x2ac>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f0      	bne.n	8001730 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0308 	and.w	r3, r3, #8
 8001756:	2b00      	cmp	r3, #0
 8001758:	d030      	beq.n	80017bc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d016      	beq.n	8001790 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001762:	4b30      	ldr	r3, [pc, #192]	; (8001824 <HAL_RCC_OscConfig+0x2b4>)
 8001764:	2201      	movs	r2, #1
 8001766:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001768:	f7ff fc04 	bl	8000f74 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001770:	f7ff fc00 	bl	8000f74 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e15b      	b.n	8001a3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001782:	4b26      	ldr	r3, [pc, #152]	; (800181c <HAL_RCC_OscConfig+0x2ac>)
 8001784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d0f0      	beq.n	8001770 <HAL_RCC_OscConfig+0x200>
 800178e:	e015      	b.n	80017bc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001790:	4b24      	ldr	r3, [pc, #144]	; (8001824 <HAL_RCC_OscConfig+0x2b4>)
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001796:	f7ff fbed 	bl	8000f74 <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800179e:	f7ff fbe9 	bl	8000f74 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e144      	b.n	8001a3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b0:	4b1a      	ldr	r3, [pc, #104]	; (800181c <HAL_RCC_OscConfig+0x2ac>)
 80017b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d1f0      	bne.n	800179e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	f000 80a0 	beq.w	800190a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ca:	2300      	movs	r3, #0
 80017cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ce:	4b13      	ldr	r3, [pc, #76]	; (800181c <HAL_RCC_OscConfig+0x2ac>)
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d10f      	bne.n	80017fa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	4b0f      	ldr	r3, [pc, #60]	; (800181c <HAL_RCC_OscConfig+0x2ac>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	4a0e      	ldr	r2, [pc, #56]	; (800181c <HAL_RCC_OscConfig+0x2ac>)
 80017e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ea:	4b0c      	ldr	r3, [pc, #48]	; (800181c <HAL_RCC_OscConfig+0x2ac>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f2:	60bb      	str	r3, [r7, #8]
 80017f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017f6:	2301      	movs	r3, #1
 80017f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017fa:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <HAL_RCC_OscConfig+0x2b8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001802:	2b00      	cmp	r3, #0
 8001804:	d121      	bne.n	800184a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001806:	4b08      	ldr	r3, [pc, #32]	; (8001828 <HAL_RCC_OscConfig+0x2b8>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a07      	ldr	r2, [pc, #28]	; (8001828 <HAL_RCC_OscConfig+0x2b8>)
 800180c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001810:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001812:	f7ff fbaf 	bl	8000f74 <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001818:	e011      	b.n	800183e <HAL_RCC_OscConfig+0x2ce>
 800181a:	bf00      	nop
 800181c:	40023800 	.word	0x40023800
 8001820:	42470000 	.word	0x42470000
 8001824:	42470e80 	.word	0x42470e80
 8001828:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800182c:	f7ff fba2 	bl	8000f74 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e0fd      	b.n	8001a3a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800183e:	4b81      	ldr	r3, [pc, #516]	; (8001a44 <HAL_RCC_OscConfig+0x4d4>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001846:	2b00      	cmp	r3, #0
 8001848:	d0f0      	beq.n	800182c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d106      	bne.n	8001860 <HAL_RCC_OscConfig+0x2f0>
 8001852:	4b7d      	ldr	r3, [pc, #500]	; (8001a48 <HAL_RCC_OscConfig+0x4d8>)
 8001854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001856:	4a7c      	ldr	r2, [pc, #496]	; (8001a48 <HAL_RCC_OscConfig+0x4d8>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6713      	str	r3, [r2, #112]	; 0x70
 800185e:	e01c      	b.n	800189a <HAL_RCC_OscConfig+0x32a>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	2b05      	cmp	r3, #5
 8001866:	d10c      	bne.n	8001882 <HAL_RCC_OscConfig+0x312>
 8001868:	4b77      	ldr	r3, [pc, #476]	; (8001a48 <HAL_RCC_OscConfig+0x4d8>)
 800186a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800186c:	4a76      	ldr	r2, [pc, #472]	; (8001a48 <HAL_RCC_OscConfig+0x4d8>)
 800186e:	f043 0304 	orr.w	r3, r3, #4
 8001872:	6713      	str	r3, [r2, #112]	; 0x70
 8001874:	4b74      	ldr	r3, [pc, #464]	; (8001a48 <HAL_RCC_OscConfig+0x4d8>)
 8001876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001878:	4a73      	ldr	r2, [pc, #460]	; (8001a48 <HAL_RCC_OscConfig+0x4d8>)
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	6713      	str	r3, [r2, #112]	; 0x70
 8001880:	e00b      	b.n	800189a <HAL_RCC_OscConfig+0x32a>
 8001882:	4b71      	ldr	r3, [pc, #452]	; (8001a48 <HAL_RCC_OscConfig+0x4d8>)
 8001884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001886:	4a70      	ldr	r2, [pc, #448]	; (8001a48 <HAL_RCC_OscConfig+0x4d8>)
 8001888:	f023 0301 	bic.w	r3, r3, #1
 800188c:	6713      	str	r3, [r2, #112]	; 0x70
 800188e:	4b6e      	ldr	r3, [pc, #440]	; (8001a48 <HAL_RCC_OscConfig+0x4d8>)
 8001890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001892:	4a6d      	ldr	r2, [pc, #436]	; (8001a48 <HAL_RCC_OscConfig+0x4d8>)
 8001894:	f023 0304 	bic.w	r3, r3, #4
 8001898:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d015      	beq.n	80018ce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a2:	f7ff fb67 	bl	8000f74 <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018a8:	e00a      	b.n	80018c0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018aa:	f7ff fb63 	bl	8000f74 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e0bc      	b.n	8001a3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c0:	4b61      	ldr	r3, [pc, #388]	; (8001a48 <HAL_RCC_OscConfig+0x4d8>)
 80018c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0ee      	beq.n	80018aa <HAL_RCC_OscConfig+0x33a>
 80018cc:	e014      	b.n	80018f8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ce:	f7ff fb51 	bl	8000f74 <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018d4:	e00a      	b.n	80018ec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018d6:	f7ff fb4d 	bl	8000f74 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e0a6      	b.n	8001a3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ec:	4b56      	ldr	r3, [pc, #344]	; (8001a48 <HAL_RCC_OscConfig+0x4d8>)
 80018ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1ee      	bne.n	80018d6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018f8:	7dfb      	ldrb	r3, [r7, #23]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d105      	bne.n	800190a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018fe:	4b52      	ldr	r3, [pc, #328]	; (8001a48 <HAL_RCC_OscConfig+0x4d8>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	4a51      	ldr	r2, [pc, #324]	; (8001a48 <HAL_RCC_OscConfig+0x4d8>)
 8001904:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001908:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	2b00      	cmp	r3, #0
 8001910:	f000 8092 	beq.w	8001a38 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001914:	4b4c      	ldr	r3, [pc, #304]	; (8001a48 <HAL_RCC_OscConfig+0x4d8>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f003 030c 	and.w	r3, r3, #12
 800191c:	2b08      	cmp	r3, #8
 800191e:	d05c      	beq.n	80019da <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	2b02      	cmp	r3, #2
 8001926:	d141      	bne.n	80019ac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001928:	4b48      	ldr	r3, [pc, #288]	; (8001a4c <HAL_RCC_OscConfig+0x4dc>)
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192e:	f7ff fb21 	bl	8000f74 <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001936:	f7ff fb1d 	bl	8000f74 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e078      	b.n	8001a3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001948:	4b3f      	ldr	r3, [pc, #252]	; (8001a48 <HAL_RCC_OscConfig+0x4d8>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1f0      	bne.n	8001936 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	69da      	ldr	r2, [r3, #28]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	431a      	orrs	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001962:	019b      	lsls	r3, r3, #6
 8001964:	431a      	orrs	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196a:	085b      	lsrs	r3, r3, #1
 800196c:	3b01      	subs	r3, #1
 800196e:	041b      	lsls	r3, r3, #16
 8001970:	431a      	orrs	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001976:	061b      	lsls	r3, r3, #24
 8001978:	4933      	ldr	r1, [pc, #204]	; (8001a48 <HAL_RCC_OscConfig+0x4d8>)
 800197a:	4313      	orrs	r3, r2
 800197c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800197e:	4b33      	ldr	r3, [pc, #204]	; (8001a4c <HAL_RCC_OscConfig+0x4dc>)
 8001980:	2201      	movs	r2, #1
 8001982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001984:	f7ff faf6 	bl	8000f74 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800198c:	f7ff faf2 	bl	8000f74 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e04d      	b.n	8001a3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800199e:	4b2a      	ldr	r3, [pc, #168]	; (8001a48 <HAL_RCC_OscConfig+0x4d8>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0f0      	beq.n	800198c <HAL_RCC_OscConfig+0x41c>
 80019aa:	e045      	b.n	8001a38 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ac:	4b27      	ldr	r3, [pc, #156]	; (8001a4c <HAL_RCC_OscConfig+0x4dc>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b2:	f7ff fadf 	bl	8000f74 <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ba:	f7ff fadb 	bl	8000f74 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e036      	b.n	8001a3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019cc:	4b1e      	ldr	r3, [pc, #120]	; (8001a48 <HAL_RCC_OscConfig+0x4d8>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1f0      	bne.n	80019ba <HAL_RCC_OscConfig+0x44a>
 80019d8:	e02e      	b.n	8001a38 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d101      	bne.n	80019e6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e029      	b.n	8001a3a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019e6:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <HAL_RCC_OscConfig+0x4d8>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d11c      	bne.n	8001a34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d115      	bne.n	8001a34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a0e:	4013      	ands	r3, r2
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d10d      	bne.n	8001a34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d106      	bne.n	8001a34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d001      	beq.n	8001a38 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e000      	b.n	8001a3a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40007000 	.word	0x40007000
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	42470060 	.word	0x42470060

08001a50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d101      	bne.n	8001a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e0cc      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a64:	4b68      	ldr	r3, [pc, #416]	; (8001c08 <HAL_RCC_ClockConfig+0x1b8>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 030f 	and.w	r3, r3, #15
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d90c      	bls.n	8001a8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a72:	4b65      	ldr	r3, [pc, #404]	; (8001c08 <HAL_RCC_ClockConfig+0x1b8>)
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	b2d2      	uxtb	r2, r2
 8001a78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a7a:	4b63      	ldr	r3, [pc, #396]	; (8001c08 <HAL_RCC_ClockConfig+0x1b8>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d001      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e0b8      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d020      	beq.n	8001ada <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d005      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001aa4:	4b59      	ldr	r3, [pc, #356]	; (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	4a58      	ldr	r2, [pc, #352]	; (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001aaa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001aae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0308 	and.w	r3, r3, #8
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d005      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001abc:	4b53      	ldr	r3, [pc, #332]	; (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	4a52      	ldr	r2, [pc, #328]	; (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ac2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ac6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ac8:	4b50      	ldr	r3, [pc, #320]	; (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	494d      	ldr	r1, [pc, #308]	; (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d044      	beq.n	8001b70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d107      	bne.n	8001afe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aee:	4b47      	ldr	r3, [pc, #284]	; (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d119      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e07f      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d003      	beq.n	8001b0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b0a:	2b03      	cmp	r3, #3
 8001b0c:	d107      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b0e:	4b3f      	ldr	r3, [pc, #252]	; (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d109      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e06f      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1e:	4b3b      	ldr	r3, [pc, #236]	; (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e067      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b2e:	4b37      	ldr	r3, [pc, #220]	; (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f023 0203 	bic.w	r2, r3, #3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	4934      	ldr	r1, [pc, #208]	; (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b40:	f7ff fa18 	bl	8000f74 <HAL_GetTick>
 8001b44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b46:	e00a      	b.n	8001b5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b48:	f7ff fa14 	bl	8000f74 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e04f      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5e:	4b2b      	ldr	r3, [pc, #172]	; (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f003 020c 	and.w	r2, r3, #12
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d1eb      	bne.n	8001b48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b70:	4b25      	ldr	r3, [pc, #148]	; (8001c08 <HAL_RCC_ClockConfig+0x1b8>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 030f 	and.w	r3, r3, #15
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d20c      	bcs.n	8001b98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7e:	4b22      	ldr	r3, [pc, #136]	; (8001c08 <HAL_RCC_ClockConfig+0x1b8>)
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b86:	4b20      	ldr	r3, [pc, #128]	; (8001c08 <HAL_RCC_ClockConfig+0x1b8>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	683a      	ldr	r2, [r7, #0]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d001      	beq.n	8001b98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e032      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d008      	beq.n	8001bb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ba4:	4b19      	ldr	r3, [pc, #100]	; (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	4916      	ldr	r1, [pc, #88]	; (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0308 	and.w	r3, r3, #8
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d009      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bc2:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	490e      	ldr	r1, [pc, #56]	; (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bd6:	f000 f821 	bl	8001c1c <HAL_RCC_GetSysClockFreq>
 8001bda:	4601      	mov	r1, r0
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	091b      	lsrs	r3, r3, #4
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	4a0a      	ldr	r2, [pc, #40]	; (8001c10 <HAL_RCC_ClockConfig+0x1c0>)
 8001be8:	5cd3      	ldrb	r3, [r2, r3]
 8001bea:	fa21 f303 	lsr.w	r3, r1, r3
 8001bee:	4a09      	ldr	r2, [pc, #36]	; (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001bf2:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <HAL_RCC_ClockConfig+0x1c8>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff f978 	bl	8000eec <HAL_InitTick>

  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40023c00 	.word	0x40023c00
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	080058dc 	.word	0x080058dc
 8001c14:	20000008 	.word	0x20000008
 8001c18:	20000000 	.word	0x20000000

08001c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	607b      	str	r3, [r7, #4]
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c32:	4b63      	ldr	r3, [pc, #396]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 030c 	and.w	r3, r3, #12
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	d007      	beq.n	8001c4e <HAL_RCC_GetSysClockFreq+0x32>
 8001c3e:	2b08      	cmp	r3, #8
 8001c40:	d008      	beq.n	8001c54 <HAL_RCC_GetSysClockFreq+0x38>
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f040 80b4 	bne.w	8001db0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c48:	4b5e      	ldr	r3, [pc, #376]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001c4a:	60bb      	str	r3, [r7, #8]
       break;
 8001c4c:	e0b3      	b.n	8001db6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c4e:	4b5e      	ldr	r3, [pc, #376]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001c50:	60bb      	str	r3, [r7, #8]
      break;
 8001c52:	e0b0      	b.n	8001db6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c54:	4b5a      	ldr	r3, [pc, #360]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c5c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c5e:	4b58      	ldr	r3, [pc, #352]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d04a      	beq.n	8001d00 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c6a:	4b55      	ldr	r3, [pc, #340]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	099b      	lsrs	r3, r3, #6
 8001c70:	f04f 0400 	mov.w	r4, #0
 8001c74:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c78:	f04f 0200 	mov.w	r2, #0
 8001c7c:	ea03 0501 	and.w	r5, r3, r1
 8001c80:	ea04 0602 	and.w	r6, r4, r2
 8001c84:	4629      	mov	r1, r5
 8001c86:	4632      	mov	r2, r6
 8001c88:	f04f 0300 	mov.w	r3, #0
 8001c8c:	f04f 0400 	mov.w	r4, #0
 8001c90:	0154      	lsls	r4, r2, #5
 8001c92:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c96:	014b      	lsls	r3, r1, #5
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4622      	mov	r2, r4
 8001c9c:	1b49      	subs	r1, r1, r5
 8001c9e:	eb62 0206 	sbc.w	r2, r2, r6
 8001ca2:	f04f 0300 	mov.w	r3, #0
 8001ca6:	f04f 0400 	mov.w	r4, #0
 8001caa:	0194      	lsls	r4, r2, #6
 8001cac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001cb0:	018b      	lsls	r3, r1, #6
 8001cb2:	1a5b      	subs	r3, r3, r1
 8001cb4:	eb64 0402 	sbc.w	r4, r4, r2
 8001cb8:	f04f 0100 	mov.w	r1, #0
 8001cbc:	f04f 0200 	mov.w	r2, #0
 8001cc0:	00e2      	lsls	r2, r4, #3
 8001cc2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001cc6:	00d9      	lsls	r1, r3, #3
 8001cc8:	460b      	mov	r3, r1
 8001cca:	4614      	mov	r4, r2
 8001ccc:	195b      	adds	r3, r3, r5
 8001cce:	eb44 0406 	adc.w	r4, r4, r6
 8001cd2:	f04f 0100 	mov.w	r1, #0
 8001cd6:	f04f 0200 	mov.w	r2, #0
 8001cda:	0262      	lsls	r2, r4, #9
 8001cdc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001ce0:	0259      	lsls	r1, r3, #9
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	4614      	mov	r4, r2
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	4621      	mov	r1, r4
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f04f 0400 	mov.w	r4, #0
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4623      	mov	r3, r4
 8001cf4:	f7fe ff58 	bl	8000ba8 <__aeabi_uldivmod>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	460c      	mov	r4, r1
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	e049      	b.n	8001d94 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d00:	4b2f      	ldr	r3, [pc, #188]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	099b      	lsrs	r3, r3, #6
 8001d06:	f04f 0400 	mov.w	r4, #0
 8001d0a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	ea03 0501 	and.w	r5, r3, r1
 8001d16:	ea04 0602 	and.w	r6, r4, r2
 8001d1a:	4629      	mov	r1, r5
 8001d1c:	4632      	mov	r2, r6
 8001d1e:	f04f 0300 	mov.w	r3, #0
 8001d22:	f04f 0400 	mov.w	r4, #0
 8001d26:	0154      	lsls	r4, r2, #5
 8001d28:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d2c:	014b      	lsls	r3, r1, #5
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4622      	mov	r2, r4
 8001d32:	1b49      	subs	r1, r1, r5
 8001d34:	eb62 0206 	sbc.w	r2, r2, r6
 8001d38:	f04f 0300 	mov.w	r3, #0
 8001d3c:	f04f 0400 	mov.w	r4, #0
 8001d40:	0194      	lsls	r4, r2, #6
 8001d42:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001d46:	018b      	lsls	r3, r1, #6
 8001d48:	1a5b      	subs	r3, r3, r1
 8001d4a:	eb64 0402 	sbc.w	r4, r4, r2
 8001d4e:	f04f 0100 	mov.w	r1, #0
 8001d52:	f04f 0200 	mov.w	r2, #0
 8001d56:	00e2      	lsls	r2, r4, #3
 8001d58:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001d5c:	00d9      	lsls	r1, r3, #3
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4614      	mov	r4, r2
 8001d62:	195b      	adds	r3, r3, r5
 8001d64:	eb44 0406 	adc.w	r4, r4, r6
 8001d68:	f04f 0100 	mov.w	r1, #0
 8001d6c:	f04f 0200 	mov.w	r2, #0
 8001d70:	02a2      	lsls	r2, r4, #10
 8001d72:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001d76:	0299      	lsls	r1, r3, #10
 8001d78:	460b      	mov	r3, r1
 8001d7a:	4614      	mov	r4, r2
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	4621      	mov	r1, r4
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f04f 0400 	mov.w	r4, #0
 8001d86:	461a      	mov	r2, r3
 8001d88:	4623      	mov	r3, r4
 8001d8a:	f7fe ff0d 	bl	8000ba8 <__aeabi_uldivmod>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	460c      	mov	r4, r1
 8001d92:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d94:	4b0a      	ldr	r3, [pc, #40]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	0c1b      	lsrs	r3, r3, #16
 8001d9a:	f003 0303 	and.w	r3, r3, #3
 8001d9e:	3301      	adds	r3, #1
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dac:	60bb      	str	r3, [r7, #8]
      break;
 8001dae:	e002      	b.n	8001db6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001db0:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001db2:	60bb      	str	r3, [r7, #8]
      break;
 8001db4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001db6:	68bb      	ldr	r3, [r7, #8]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	00f42400 	.word	0x00f42400
 8001dc8:	007a1200 	.word	0x007a1200

08001dcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dd0:	4b03      	ldr	r3, [pc, #12]	; (8001de0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	20000008 	.word	0x20000008

08001de4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001de8:	f7ff fff0 	bl	8001dcc <HAL_RCC_GetHCLKFreq>
 8001dec:	4601      	mov	r1, r0
 8001dee:	4b05      	ldr	r3, [pc, #20]	; (8001e04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	0a9b      	lsrs	r3, r3, #10
 8001df4:	f003 0307 	and.w	r3, r3, #7
 8001df8:	4a03      	ldr	r2, [pc, #12]	; (8001e08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dfa:	5cd3      	ldrb	r3, [r2, r3]
 8001dfc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40023800 	.word	0x40023800
 8001e08:	080058ec 	.word	0x080058ec

08001e0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e10:	f7ff ffdc 	bl	8001dcc <HAL_RCC_GetHCLKFreq>
 8001e14:	4601      	mov	r1, r0
 8001e16:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	0b5b      	lsrs	r3, r3, #13
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	4a03      	ldr	r2, [pc, #12]	; (8001e30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e22:	5cd3      	ldrb	r3, [r2, r3]
 8001e24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	080058ec 	.word	0x080058ec

08001e34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e01d      	b.n	8001e82 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d106      	bne.n	8001e60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f001 fc06 	bl	800366c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2202      	movs	r2, #2
 8001e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3304      	adds	r3, #4
 8001e70:	4619      	mov	r1, r3
 8001e72:	4610      	mov	r0, r2
 8001e74:	f000 fa82 	bl	800237c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b085      	sub	sp, #20
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68da      	ldr	r2, [r3, #12]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f042 0201 	orr.w	r2, r2, #1
 8001ea0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 0307 	and.w	r3, r3, #7
 8001eac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2b06      	cmp	r3, #6
 8001eb2:	d007      	beq.n	8001ec4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f042 0201 	orr.w	r2, r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d101      	bne.n	8001ee4 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e01d      	b.n	8001f20 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d106      	bne.n	8001efe <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f001 fbd7 	bl	80036ac <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2202      	movs	r2, #2
 8001f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4610      	mov	r0, r2
 8001f12:	f000 fa33 	bl	800237c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	2b0c      	cmp	r3, #12
 8001f36:	d841      	bhi.n	8001fbc <HAL_TIM_IC_Start_IT+0x94>
 8001f38:	a201      	add	r2, pc, #4	; (adr r2, 8001f40 <HAL_TIM_IC_Start_IT+0x18>)
 8001f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f3e:	bf00      	nop
 8001f40:	08001f75 	.word	0x08001f75
 8001f44:	08001fbd 	.word	0x08001fbd
 8001f48:	08001fbd 	.word	0x08001fbd
 8001f4c:	08001fbd 	.word	0x08001fbd
 8001f50:	08001f87 	.word	0x08001f87
 8001f54:	08001fbd 	.word	0x08001fbd
 8001f58:	08001fbd 	.word	0x08001fbd
 8001f5c:	08001fbd 	.word	0x08001fbd
 8001f60:	08001f99 	.word	0x08001f99
 8001f64:	08001fbd 	.word	0x08001fbd
 8001f68:	08001fbd 	.word	0x08001fbd
 8001f6c:	08001fbd 	.word	0x08001fbd
 8001f70:	08001fab 	.word	0x08001fab
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0202 	orr.w	r2, r2, #2
 8001f82:	60da      	str	r2, [r3, #12]
      break;
 8001f84:	e01b      	b.n	8001fbe <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68da      	ldr	r2, [r3, #12]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f042 0204 	orr.w	r2, r2, #4
 8001f94:	60da      	str	r2, [r3, #12]
      break;
 8001f96:	e012      	b.n	8001fbe <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68da      	ldr	r2, [r3, #12]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f042 0208 	orr.w	r2, r2, #8
 8001fa6:	60da      	str	r2, [r3, #12]
      break;
 8001fa8:	e009      	b.n	8001fbe <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68da      	ldr	r2, [r3, #12]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f042 0210 	orr.w	r2, r2, #16
 8001fb8:	60da      	str	r2, [r3, #12]
      break;
 8001fba:	e000      	b.n	8001fbe <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8001fbc:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	6839      	ldr	r1, [r7, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f000 fba2 	bl	8002710 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2b06      	cmp	r3, #6
 8001fdc:	d007      	beq.n	8001fee <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f042 0201 	orr.w	r2, r2, #1
 8001fec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b02      	cmp	r3, #2
 800200c:	d122      	bne.n	8002054 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b02      	cmp	r3, #2
 800201a:	d11b      	bne.n	8002054 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f06f 0202 	mvn.w	r2, #2
 8002024:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f001 f9c8 	bl	80033d0 <HAL_TIM_IC_CaptureCallback>
 8002040:	e005      	b.n	800204e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f97c 	bl	8002340 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 f983 	bl	8002354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	f003 0304 	and.w	r3, r3, #4
 800205e:	2b04      	cmp	r3, #4
 8002060:	d122      	bne.n	80020a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	2b04      	cmp	r3, #4
 800206e:	d11b      	bne.n	80020a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f06f 0204 	mvn.w	r2, #4
 8002078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2202      	movs	r2, #2
 800207e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f001 f99e 	bl	80033d0 <HAL_TIM_IC_CaptureCallback>
 8002094:	e005      	b.n	80020a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f952 	bl	8002340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 f959 	bl	8002354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	f003 0308 	and.w	r3, r3, #8
 80020b2:	2b08      	cmp	r3, #8
 80020b4:	d122      	bne.n	80020fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	f003 0308 	and.w	r3, r3, #8
 80020c0:	2b08      	cmp	r3, #8
 80020c2:	d11b      	bne.n	80020fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f06f 0208 	mvn.w	r2, #8
 80020cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2204      	movs	r2, #4
 80020d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f001 f974 	bl	80033d0 <HAL_TIM_IC_CaptureCallback>
 80020e8:	e005      	b.n	80020f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f928 	bl	8002340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 f92f 	bl	8002354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	f003 0310 	and.w	r3, r3, #16
 8002106:	2b10      	cmp	r3, #16
 8002108:	d122      	bne.n	8002150 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	f003 0310 	and.w	r3, r3, #16
 8002114:	2b10      	cmp	r3, #16
 8002116:	d11b      	bne.n	8002150 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f06f 0210 	mvn.w	r2, #16
 8002120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2208      	movs	r2, #8
 8002126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f001 f94a 	bl	80033d0 <HAL_TIM_IC_CaptureCallback>
 800213c:	e005      	b.n	800214a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 f8fe 	bl	8002340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 f905 	bl	8002354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b01      	cmp	r3, #1
 800215c:	d10e      	bne.n	800217c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	2b01      	cmp	r3, #1
 800216a:	d107      	bne.n	800217c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f06f 0201 	mvn.w	r2, #1
 8002174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f001 f8c2 	bl	8003300 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002186:	2b80      	cmp	r3, #128	; 0x80
 8002188:	d10e      	bne.n	80021a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002194:	2b80      	cmp	r3, #128	; 0x80
 8002196:	d107      	bne.n	80021a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 fae3 	bl	800276e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021b2:	2b40      	cmp	r3, #64	; 0x40
 80021b4:	d10e      	bne.n	80021d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c0:	2b40      	cmp	r3, #64	; 0x40
 80021c2:	d107      	bne.n	80021d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f8ca 	bl	8002368 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	f003 0320 	and.w	r3, r3, #32
 80021de:	2b20      	cmp	r3, #32
 80021e0:	d10e      	bne.n	8002200 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	f003 0320 	and.w	r3, r3, #32
 80021ec:	2b20      	cmp	r3, #32
 80021ee:	d107      	bne.n	8002200 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f06f 0220 	mvn.w	r2, #32
 80021f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 faad 	bl	800275a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002200:	bf00      	nop
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800221a:	2b01      	cmp	r3, #1
 800221c:	d101      	bne.n	8002222 <HAL_TIM_IC_ConfigChannel+0x1a>
 800221e:	2302      	movs	r3, #2
 8002220:	e08a      	b.n	8002338 <HAL_TIM_IC_ConfigChannel+0x130>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2202      	movs	r2, #2
 800222e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d11b      	bne.n	8002270 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6818      	ldr	r0, [r3, #0]
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	6819      	ldr	r1, [r3, #0]
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f000 f938 	bl	80024bc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	699a      	ldr	r2, [r3, #24]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 020c 	bic.w	r2, r2, #12
 800225a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6999      	ldr	r1, [r3, #24]
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	689a      	ldr	r2, [r3, #8]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	619a      	str	r2, [r3, #24]
 800226e:	e05a      	b.n	8002326 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b04      	cmp	r3, #4
 8002274:	d11c      	bne.n	80022b0 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6818      	ldr	r0, [r3, #0]
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	6819      	ldr	r1, [r3, #0]
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	f000 f98d 	bl	80025a4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	699a      	ldr	r2, [r3, #24]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002298:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6999      	ldr	r1, [r3, #24]
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	021a      	lsls	r2, r3, #8
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	430a      	orrs	r2, r1
 80022ac:	619a      	str	r2, [r3, #24]
 80022ae:	e03a      	b.n	8002326 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b08      	cmp	r3, #8
 80022b4:	d11b      	bne.n	80022ee <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6818      	ldr	r0, [r3, #0]
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	6819      	ldr	r1, [r3, #0]
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	f000 f9aa 	bl	800261e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	69da      	ldr	r2, [r3, #28]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 020c 	bic.w	r2, r2, #12
 80022d8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	69d9      	ldr	r1, [r3, #28]
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	430a      	orrs	r2, r1
 80022ea:	61da      	str	r2, [r3, #28]
 80022ec:	e01b      	b.n	8002326 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6818      	ldr	r0, [r3, #0]
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	6819      	ldr	r1, [r3, #0]
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	f000 f9ca 	bl	8002696 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	69da      	ldr	r2, [r3, #28]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002310:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	69d9      	ldr	r1, [r3, #28]
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	021a      	lsls	r2, r3, #8
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	430a      	orrs	r2, r1
 8002324:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a40      	ldr	r2, [pc, #256]	; (8002490 <TIM_Base_SetConfig+0x114>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d013      	beq.n	80023bc <TIM_Base_SetConfig+0x40>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800239a:	d00f      	beq.n	80023bc <TIM_Base_SetConfig+0x40>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a3d      	ldr	r2, [pc, #244]	; (8002494 <TIM_Base_SetConfig+0x118>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d00b      	beq.n	80023bc <TIM_Base_SetConfig+0x40>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a3c      	ldr	r2, [pc, #240]	; (8002498 <TIM_Base_SetConfig+0x11c>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d007      	beq.n	80023bc <TIM_Base_SetConfig+0x40>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a3b      	ldr	r2, [pc, #236]	; (800249c <TIM_Base_SetConfig+0x120>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d003      	beq.n	80023bc <TIM_Base_SetConfig+0x40>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a3a      	ldr	r2, [pc, #232]	; (80024a0 <TIM_Base_SetConfig+0x124>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d108      	bne.n	80023ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a2f      	ldr	r2, [pc, #188]	; (8002490 <TIM_Base_SetConfig+0x114>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d02b      	beq.n	800242e <TIM_Base_SetConfig+0xb2>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023dc:	d027      	beq.n	800242e <TIM_Base_SetConfig+0xb2>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a2c      	ldr	r2, [pc, #176]	; (8002494 <TIM_Base_SetConfig+0x118>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d023      	beq.n	800242e <TIM_Base_SetConfig+0xb2>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a2b      	ldr	r2, [pc, #172]	; (8002498 <TIM_Base_SetConfig+0x11c>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d01f      	beq.n	800242e <TIM_Base_SetConfig+0xb2>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a2a      	ldr	r2, [pc, #168]	; (800249c <TIM_Base_SetConfig+0x120>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d01b      	beq.n	800242e <TIM_Base_SetConfig+0xb2>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a29      	ldr	r2, [pc, #164]	; (80024a0 <TIM_Base_SetConfig+0x124>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d017      	beq.n	800242e <TIM_Base_SetConfig+0xb2>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a28      	ldr	r2, [pc, #160]	; (80024a4 <TIM_Base_SetConfig+0x128>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d013      	beq.n	800242e <TIM_Base_SetConfig+0xb2>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a27      	ldr	r2, [pc, #156]	; (80024a8 <TIM_Base_SetConfig+0x12c>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d00f      	beq.n	800242e <TIM_Base_SetConfig+0xb2>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a26      	ldr	r2, [pc, #152]	; (80024ac <TIM_Base_SetConfig+0x130>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d00b      	beq.n	800242e <TIM_Base_SetConfig+0xb2>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a25      	ldr	r2, [pc, #148]	; (80024b0 <TIM_Base_SetConfig+0x134>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d007      	beq.n	800242e <TIM_Base_SetConfig+0xb2>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a24      	ldr	r2, [pc, #144]	; (80024b4 <TIM_Base_SetConfig+0x138>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d003      	beq.n	800242e <TIM_Base_SetConfig+0xb2>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a23      	ldr	r2, [pc, #140]	; (80024b8 <TIM_Base_SetConfig+0x13c>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d108      	bne.n	8002440 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002434:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	4313      	orrs	r3, r2
 800243e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	4313      	orrs	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a0a      	ldr	r2, [pc, #40]	; (8002490 <TIM_Base_SetConfig+0x114>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d003      	beq.n	8002474 <TIM_Base_SetConfig+0xf8>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a0c      	ldr	r2, [pc, #48]	; (80024a0 <TIM_Base_SetConfig+0x124>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d103      	bne.n	800247c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	691a      	ldr	r2, [r3, #16]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	615a      	str	r2, [r3, #20]
}
 8002482:	bf00      	nop
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	40010000 	.word	0x40010000
 8002494:	40000400 	.word	0x40000400
 8002498:	40000800 	.word	0x40000800
 800249c:	40000c00 	.word	0x40000c00
 80024a0:	40010400 	.word	0x40010400
 80024a4:	40014000 	.word	0x40014000
 80024a8:	40014400 	.word	0x40014400
 80024ac:	40014800 	.word	0x40014800
 80024b0:	40001800 	.word	0x40001800
 80024b4:	40001c00 	.word	0x40001c00
 80024b8:	40002000 	.word	0x40002000

080024bc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80024bc:	b480      	push	{r7}
 80024be:	b087      	sub	sp, #28
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
 80024c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	f023 0201 	bic.w	r2, r3, #1
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	4a28      	ldr	r2, [pc, #160]	; (8002588 <TIM_TI1_SetConfig+0xcc>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d01b      	beq.n	8002522 <TIM_TI1_SetConfig+0x66>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f0:	d017      	beq.n	8002522 <TIM_TI1_SetConfig+0x66>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	4a25      	ldr	r2, [pc, #148]	; (800258c <TIM_TI1_SetConfig+0xd0>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d013      	beq.n	8002522 <TIM_TI1_SetConfig+0x66>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	4a24      	ldr	r2, [pc, #144]	; (8002590 <TIM_TI1_SetConfig+0xd4>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d00f      	beq.n	8002522 <TIM_TI1_SetConfig+0x66>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	4a23      	ldr	r2, [pc, #140]	; (8002594 <TIM_TI1_SetConfig+0xd8>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d00b      	beq.n	8002522 <TIM_TI1_SetConfig+0x66>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	4a22      	ldr	r2, [pc, #136]	; (8002598 <TIM_TI1_SetConfig+0xdc>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d007      	beq.n	8002522 <TIM_TI1_SetConfig+0x66>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	4a21      	ldr	r2, [pc, #132]	; (800259c <TIM_TI1_SetConfig+0xe0>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d003      	beq.n	8002522 <TIM_TI1_SetConfig+0x66>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	4a20      	ldr	r2, [pc, #128]	; (80025a0 <TIM_TI1_SetConfig+0xe4>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d101      	bne.n	8002526 <TIM_TI1_SetConfig+0x6a>
 8002522:	2301      	movs	r3, #1
 8002524:	e000      	b.n	8002528 <TIM_TI1_SetConfig+0x6c>
 8002526:	2300      	movs	r3, #0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d008      	beq.n	800253e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	f023 0303 	bic.w	r3, r3, #3
 8002532:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4313      	orrs	r3, r2
 800253a:	617b      	str	r3, [r7, #20]
 800253c:	e003      	b.n	8002546 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	f043 0301 	orr.w	r3, r3, #1
 8002544:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800254c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	011b      	lsls	r3, r3, #4
 8002552:	b2db      	uxtb	r3, r3
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	4313      	orrs	r3, r2
 8002558:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	f023 030a 	bic.w	r3, r3, #10
 8002560:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	f003 030a 	and.w	r3, r3, #10
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	4313      	orrs	r3, r2
 800256c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	621a      	str	r2, [r3, #32]
}
 800257a:	bf00      	nop
 800257c:	371c      	adds	r7, #28
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	40010000 	.word	0x40010000
 800258c:	40000400 	.word	0x40000400
 8002590:	40000800 	.word	0x40000800
 8002594:	40000c00 	.word	0x40000c00
 8002598:	40010400 	.word	0x40010400
 800259c:	40014000 	.word	0x40014000
 80025a0:	40001800 	.word	0x40001800

080025a4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b087      	sub	sp, #28
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
 80025b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	f023 0210 	bic.w	r2, r3, #16
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	021b      	lsls	r3, r3, #8
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	4313      	orrs	r3, r2
 80025da:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80025e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	031b      	lsls	r3, r3, #12
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80025f6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	011b      	lsls	r3, r3, #4
 80025fc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	4313      	orrs	r3, r2
 8002604:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	621a      	str	r2, [r3, #32]
}
 8002612:	bf00      	nop
 8002614:	371c      	adds	r7, #28
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800261e:	b480      	push	{r7}
 8002620:	b087      	sub	sp, #28
 8002622:	af00      	add	r7, sp, #0
 8002624:	60f8      	str	r0, [r7, #12]
 8002626:	60b9      	str	r1, [r7, #8]
 8002628:	607a      	str	r2, [r7, #4]
 800262a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	69db      	ldr	r3, [r3, #28]
 800263c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f023 0303 	bic.w	r3, r3, #3
 800264a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4313      	orrs	r3, r2
 8002652:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800265a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	011b      	lsls	r3, r3, #4
 8002660:	b2db      	uxtb	r3, r3
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	4313      	orrs	r3, r2
 8002666:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800266e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	021b      	lsls	r3, r3, #8
 8002674:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	4313      	orrs	r3, r2
 800267c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	621a      	str	r2, [r3, #32]
}
 800268a:	bf00      	nop
 800268c:	371c      	adds	r7, #28
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002696:	b480      	push	{r7}
 8002698:	b087      	sub	sp, #28
 800269a:	af00      	add	r7, sp, #0
 800269c:	60f8      	str	r0, [r7, #12]
 800269e:	60b9      	str	r1, [r7, #8]
 80026a0:	607a      	str	r2, [r7, #4]
 80026a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026c2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	021b      	lsls	r3, r3, #8
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80026d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	031b      	lsls	r3, r3, #12
 80026da:	b29b      	uxth	r3, r3
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	4313      	orrs	r3, r2
 80026e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80026e8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	031b      	lsls	r3, r3, #12
 80026ee:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	621a      	str	r2, [r3, #32]
}
 8002704:	bf00      	nop
 8002706:	371c      	adds	r7, #28
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002710:	b480      	push	{r7}
 8002712:	b087      	sub	sp, #28
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	f003 031f 	and.w	r3, r3, #31
 8002722:	2201      	movs	r2, #1
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6a1a      	ldr	r2, [r3, #32]
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	43db      	mvns	r3, r3
 8002732:	401a      	ands	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6a1a      	ldr	r2, [r3, #32]
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	f003 031f 	and.w	r3, r3, #31
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	fa01 f303 	lsl.w	r3, r1, r3
 8002748:	431a      	orrs	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	621a      	str	r2, [r3, #32]
}
 800274e:	bf00      	nop
 8002750:	371c      	adds	r7, #28
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e03f      	b.n	8002814 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b00      	cmp	r3, #0
 800279e:	d106      	bne.n	80027ae <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 ff17 	bl	80035dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2224      	movs	r2, #36	; 0x24
 80027b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68da      	ldr	r2, [r3, #12]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027c4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f90c 	bl	80029e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	691a      	ldr	r2, [r3, #16]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027da:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	695a      	ldr	r2, [r3, #20]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027ea:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027fa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2220      	movs	r2, #32
 8002806:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2220      	movs	r2, #32
 800280e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b088      	sub	sp, #32
 8002820:	af02      	add	r7, sp, #8
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	603b      	str	r3, [r7, #0]
 8002828:	4613      	mov	r3, r2
 800282a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b20      	cmp	r3, #32
 800283a:	f040 8083 	bne.w	8002944 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d002      	beq.n	800284a <HAL_UART_Transmit+0x2e>
 8002844:	88fb      	ldrh	r3, [r7, #6]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e07b      	b.n	8002946 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002854:	2b01      	cmp	r3, #1
 8002856:	d101      	bne.n	800285c <HAL_UART_Transmit+0x40>
 8002858:	2302      	movs	r3, #2
 800285a:	e074      	b.n	8002946 <HAL_UART_Transmit+0x12a>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2221      	movs	r2, #33	; 0x21
 800286e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002872:	f7fe fb7f 	bl	8000f74 <HAL_GetTick>
 8002876:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	88fa      	ldrh	r2, [r7, #6]
 800287c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	88fa      	ldrh	r2, [r7, #6]
 8002882:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800288c:	e042      	b.n	8002914 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002892:	b29b      	uxth	r3, r3
 8002894:	3b01      	subs	r3, #1
 8002896:	b29a      	uxth	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028a4:	d122      	bne.n	80028ec <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	2200      	movs	r2, #0
 80028ae:	2180      	movs	r1, #128	; 0x80
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f000 f84c 	bl	800294e <UART_WaitOnFlagUntilTimeout>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e042      	b.n	8002946 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	881b      	ldrh	r3, [r3, #0]
 80028c8:	461a      	mov	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028d2:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d103      	bne.n	80028e4 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	3302      	adds	r3, #2
 80028e0:	60bb      	str	r3, [r7, #8]
 80028e2:	e017      	b.n	8002914 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	3301      	adds	r3, #1
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	e013      	b.n	8002914 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	2200      	movs	r2, #0
 80028f4:	2180      	movs	r1, #128	; 0x80
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 f829 	bl	800294e <UART_WaitOnFlagUntilTimeout>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e01f      	b.n	8002946 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	1c5a      	adds	r2, r3, #1
 800290a:	60ba      	str	r2, [r7, #8]
 800290c:	781a      	ldrb	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002918:	b29b      	uxth	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1b7      	bne.n	800288e <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	2200      	movs	r2, #0
 8002926:	2140      	movs	r1, #64	; 0x40
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f000 f810 	bl	800294e <UART_WaitOnFlagUntilTimeout>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e006      	b.n	8002946 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2220      	movs	r2, #32
 800293c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002940:	2300      	movs	r3, #0
 8002942:	e000      	b.n	8002946 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002944:	2302      	movs	r3, #2
  }
}
 8002946:	4618      	mov	r0, r3
 8002948:	3718      	adds	r7, #24
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b084      	sub	sp, #16
 8002952:	af00      	add	r7, sp, #0
 8002954:	60f8      	str	r0, [r7, #12]
 8002956:	60b9      	str	r1, [r7, #8]
 8002958:	603b      	str	r3, [r7, #0]
 800295a:	4613      	mov	r3, r2
 800295c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800295e:	e02c      	b.n	80029ba <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002966:	d028      	beq.n	80029ba <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d007      	beq.n	800297e <UART_WaitOnFlagUntilTimeout+0x30>
 800296e:	f7fe fb01 	bl	8000f74 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	429a      	cmp	r2, r3
 800297c:	d21d      	bcs.n	80029ba <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68da      	ldr	r2, [r3, #12]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800298c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	695a      	ldr	r2, [r3, #20]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f022 0201 	bic.w	r2, r2, #1
 800299c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2220      	movs	r2, #32
 80029a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2220      	movs	r2, #32
 80029aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e00f      	b.n	80029da <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	4013      	ands	r3, r2
 80029c4:	68ba      	ldr	r2, [r7, #8]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	bf0c      	ite	eq
 80029ca:	2301      	moveq	r3, #1
 80029cc:	2300      	movne	r3, #0
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	461a      	mov	r2, r3
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d0c3      	beq.n	8002960 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
	...

080029e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029e8:	b085      	sub	sp, #20
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002a26:	f023 030c 	bic.w	r3, r3, #12
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6812      	ldr	r2, [r2, #0]
 8002a2e:	68f9      	ldr	r1, [r7, #12]
 8002a30:	430b      	orrs	r3, r1
 8002a32:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	699a      	ldr	r2, [r3, #24]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a52:	f040 818b 	bne.w	8002d6c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4ac1      	ldr	r2, [pc, #772]	; (8002d60 <UART_SetConfig+0x37c>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d005      	beq.n	8002a6c <UART_SetConfig+0x88>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4abf      	ldr	r2, [pc, #764]	; (8002d64 <UART_SetConfig+0x380>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	f040 80bd 	bne.w	8002be6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a6c:	f7ff f9ce 	bl	8001e0c <HAL_RCC_GetPCLK2Freq>
 8002a70:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	461d      	mov	r5, r3
 8002a76:	f04f 0600 	mov.w	r6, #0
 8002a7a:	46a8      	mov	r8, r5
 8002a7c:	46b1      	mov	r9, r6
 8002a7e:	eb18 0308 	adds.w	r3, r8, r8
 8002a82:	eb49 0409 	adc.w	r4, r9, r9
 8002a86:	4698      	mov	r8, r3
 8002a88:	46a1      	mov	r9, r4
 8002a8a:	eb18 0805 	adds.w	r8, r8, r5
 8002a8e:	eb49 0906 	adc.w	r9, r9, r6
 8002a92:	f04f 0100 	mov.w	r1, #0
 8002a96:	f04f 0200 	mov.w	r2, #0
 8002a9a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002a9e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002aa2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002aa6:	4688      	mov	r8, r1
 8002aa8:	4691      	mov	r9, r2
 8002aaa:	eb18 0005 	adds.w	r0, r8, r5
 8002aae:	eb49 0106 	adc.w	r1, r9, r6
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	461d      	mov	r5, r3
 8002ab8:	f04f 0600 	mov.w	r6, #0
 8002abc:	196b      	adds	r3, r5, r5
 8002abe:	eb46 0406 	adc.w	r4, r6, r6
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	4623      	mov	r3, r4
 8002ac6:	f7fe f86f 	bl	8000ba8 <__aeabi_uldivmod>
 8002aca:	4603      	mov	r3, r0
 8002acc:	460c      	mov	r4, r1
 8002ace:	461a      	mov	r2, r3
 8002ad0:	4ba5      	ldr	r3, [pc, #660]	; (8002d68 <UART_SetConfig+0x384>)
 8002ad2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ad6:	095b      	lsrs	r3, r3, #5
 8002ad8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	461d      	mov	r5, r3
 8002ae0:	f04f 0600 	mov.w	r6, #0
 8002ae4:	46a9      	mov	r9, r5
 8002ae6:	46b2      	mov	sl, r6
 8002ae8:	eb19 0309 	adds.w	r3, r9, r9
 8002aec:	eb4a 040a 	adc.w	r4, sl, sl
 8002af0:	4699      	mov	r9, r3
 8002af2:	46a2      	mov	sl, r4
 8002af4:	eb19 0905 	adds.w	r9, r9, r5
 8002af8:	eb4a 0a06 	adc.w	sl, sl, r6
 8002afc:	f04f 0100 	mov.w	r1, #0
 8002b00:	f04f 0200 	mov.w	r2, #0
 8002b04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b08:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b0c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b10:	4689      	mov	r9, r1
 8002b12:	4692      	mov	sl, r2
 8002b14:	eb19 0005 	adds.w	r0, r9, r5
 8002b18:	eb4a 0106 	adc.w	r1, sl, r6
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	461d      	mov	r5, r3
 8002b22:	f04f 0600 	mov.w	r6, #0
 8002b26:	196b      	adds	r3, r5, r5
 8002b28:	eb46 0406 	adc.w	r4, r6, r6
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	4623      	mov	r3, r4
 8002b30:	f7fe f83a 	bl	8000ba8 <__aeabi_uldivmod>
 8002b34:	4603      	mov	r3, r0
 8002b36:	460c      	mov	r4, r1
 8002b38:	461a      	mov	r2, r3
 8002b3a:	4b8b      	ldr	r3, [pc, #556]	; (8002d68 <UART_SetConfig+0x384>)
 8002b3c:	fba3 1302 	umull	r1, r3, r3, r2
 8002b40:	095b      	lsrs	r3, r3, #5
 8002b42:	2164      	movs	r1, #100	; 0x64
 8002b44:	fb01 f303 	mul.w	r3, r1, r3
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	3332      	adds	r3, #50	; 0x32
 8002b4e:	4a86      	ldr	r2, [pc, #536]	; (8002d68 <UART_SetConfig+0x384>)
 8002b50:	fba2 2303 	umull	r2, r3, r2, r3
 8002b54:	095b      	lsrs	r3, r3, #5
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b5c:	4498      	add	r8, r3
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	461d      	mov	r5, r3
 8002b62:	f04f 0600 	mov.w	r6, #0
 8002b66:	46a9      	mov	r9, r5
 8002b68:	46b2      	mov	sl, r6
 8002b6a:	eb19 0309 	adds.w	r3, r9, r9
 8002b6e:	eb4a 040a 	adc.w	r4, sl, sl
 8002b72:	4699      	mov	r9, r3
 8002b74:	46a2      	mov	sl, r4
 8002b76:	eb19 0905 	adds.w	r9, r9, r5
 8002b7a:	eb4a 0a06 	adc.w	sl, sl, r6
 8002b7e:	f04f 0100 	mov.w	r1, #0
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b8a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b8e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b92:	4689      	mov	r9, r1
 8002b94:	4692      	mov	sl, r2
 8002b96:	eb19 0005 	adds.w	r0, r9, r5
 8002b9a:	eb4a 0106 	adc.w	r1, sl, r6
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	461d      	mov	r5, r3
 8002ba4:	f04f 0600 	mov.w	r6, #0
 8002ba8:	196b      	adds	r3, r5, r5
 8002baa:	eb46 0406 	adc.w	r4, r6, r6
 8002bae:	461a      	mov	r2, r3
 8002bb0:	4623      	mov	r3, r4
 8002bb2:	f7fd fff9 	bl	8000ba8 <__aeabi_uldivmod>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	460c      	mov	r4, r1
 8002bba:	461a      	mov	r2, r3
 8002bbc:	4b6a      	ldr	r3, [pc, #424]	; (8002d68 <UART_SetConfig+0x384>)
 8002bbe:	fba3 1302 	umull	r1, r3, r3, r2
 8002bc2:	095b      	lsrs	r3, r3, #5
 8002bc4:	2164      	movs	r1, #100	; 0x64
 8002bc6:	fb01 f303 	mul.w	r3, r1, r3
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	3332      	adds	r3, #50	; 0x32
 8002bd0:	4a65      	ldr	r2, [pc, #404]	; (8002d68 <UART_SetConfig+0x384>)
 8002bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd6:	095b      	lsrs	r3, r3, #5
 8002bd8:	f003 0207 	and.w	r2, r3, #7
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4442      	add	r2, r8
 8002be2:	609a      	str	r2, [r3, #8]
 8002be4:	e26f      	b.n	80030c6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002be6:	f7ff f8fd 	bl	8001de4 <HAL_RCC_GetPCLK1Freq>
 8002bea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	461d      	mov	r5, r3
 8002bf0:	f04f 0600 	mov.w	r6, #0
 8002bf4:	46a8      	mov	r8, r5
 8002bf6:	46b1      	mov	r9, r6
 8002bf8:	eb18 0308 	adds.w	r3, r8, r8
 8002bfc:	eb49 0409 	adc.w	r4, r9, r9
 8002c00:	4698      	mov	r8, r3
 8002c02:	46a1      	mov	r9, r4
 8002c04:	eb18 0805 	adds.w	r8, r8, r5
 8002c08:	eb49 0906 	adc.w	r9, r9, r6
 8002c0c:	f04f 0100 	mov.w	r1, #0
 8002c10:	f04f 0200 	mov.w	r2, #0
 8002c14:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002c18:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002c1c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002c20:	4688      	mov	r8, r1
 8002c22:	4691      	mov	r9, r2
 8002c24:	eb18 0005 	adds.w	r0, r8, r5
 8002c28:	eb49 0106 	adc.w	r1, r9, r6
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	461d      	mov	r5, r3
 8002c32:	f04f 0600 	mov.w	r6, #0
 8002c36:	196b      	adds	r3, r5, r5
 8002c38:	eb46 0406 	adc.w	r4, r6, r6
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	4623      	mov	r3, r4
 8002c40:	f7fd ffb2 	bl	8000ba8 <__aeabi_uldivmod>
 8002c44:	4603      	mov	r3, r0
 8002c46:	460c      	mov	r4, r1
 8002c48:	461a      	mov	r2, r3
 8002c4a:	4b47      	ldr	r3, [pc, #284]	; (8002d68 <UART_SetConfig+0x384>)
 8002c4c:	fba3 2302 	umull	r2, r3, r3, r2
 8002c50:	095b      	lsrs	r3, r3, #5
 8002c52:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	461d      	mov	r5, r3
 8002c5a:	f04f 0600 	mov.w	r6, #0
 8002c5e:	46a9      	mov	r9, r5
 8002c60:	46b2      	mov	sl, r6
 8002c62:	eb19 0309 	adds.w	r3, r9, r9
 8002c66:	eb4a 040a 	adc.w	r4, sl, sl
 8002c6a:	4699      	mov	r9, r3
 8002c6c:	46a2      	mov	sl, r4
 8002c6e:	eb19 0905 	adds.w	r9, r9, r5
 8002c72:	eb4a 0a06 	adc.w	sl, sl, r6
 8002c76:	f04f 0100 	mov.w	r1, #0
 8002c7a:	f04f 0200 	mov.w	r2, #0
 8002c7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c82:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c86:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c8a:	4689      	mov	r9, r1
 8002c8c:	4692      	mov	sl, r2
 8002c8e:	eb19 0005 	adds.w	r0, r9, r5
 8002c92:	eb4a 0106 	adc.w	r1, sl, r6
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	461d      	mov	r5, r3
 8002c9c:	f04f 0600 	mov.w	r6, #0
 8002ca0:	196b      	adds	r3, r5, r5
 8002ca2:	eb46 0406 	adc.w	r4, r6, r6
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	4623      	mov	r3, r4
 8002caa:	f7fd ff7d 	bl	8000ba8 <__aeabi_uldivmod>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	460c      	mov	r4, r1
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	4b2c      	ldr	r3, [pc, #176]	; (8002d68 <UART_SetConfig+0x384>)
 8002cb6:	fba3 1302 	umull	r1, r3, r3, r2
 8002cba:	095b      	lsrs	r3, r3, #5
 8002cbc:	2164      	movs	r1, #100	; 0x64
 8002cbe:	fb01 f303 	mul.w	r3, r1, r3
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	3332      	adds	r3, #50	; 0x32
 8002cc8:	4a27      	ldr	r2, [pc, #156]	; (8002d68 <UART_SetConfig+0x384>)
 8002cca:	fba2 2303 	umull	r2, r3, r2, r3
 8002cce:	095b      	lsrs	r3, r3, #5
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002cd6:	4498      	add	r8, r3
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	461d      	mov	r5, r3
 8002cdc:	f04f 0600 	mov.w	r6, #0
 8002ce0:	46a9      	mov	r9, r5
 8002ce2:	46b2      	mov	sl, r6
 8002ce4:	eb19 0309 	adds.w	r3, r9, r9
 8002ce8:	eb4a 040a 	adc.w	r4, sl, sl
 8002cec:	4699      	mov	r9, r3
 8002cee:	46a2      	mov	sl, r4
 8002cf0:	eb19 0905 	adds.w	r9, r9, r5
 8002cf4:	eb4a 0a06 	adc.w	sl, sl, r6
 8002cf8:	f04f 0100 	mov.w	r1, #0
 8002cfc:	f04f 0200 	mov.w	r2, #0
 8002d00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d0c:	4689      	mov	r9, r1
 8002d0e:	4692      	mov	sl, r2
 8002d10:	eb19 0005 	adds.w	r0, r9, r5
 8002d14:	eb4a 0106 	adc.w	r1, sl, r6
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	461d      	mov	r5, r3
 8002d1e:	f04f 0600 	mov.w	r6, #0
 8002d22:	196b      	adds	r3, r5, r5
 8002d24:	eb46 0406 	adc.w	r4, r6, r6
 8002d28:	461a      	mov	r2, r3
 8002d2a:	4623      	mov	r3, r4
 8002d2c:	f7fd ff3c 	bl	8000ba8 <__aeabi_uldivmod>
 8002d30:	4603      	mov	r3, r0
 8002d32:	460c      	mov	r4, r1
 8002d34:	461a      	mov	r2, r3
 8002d36:	4b0c      	ldr	r3, [pc, #48]	; (8002d68 <UART_SetConfig+0x384>)
 8002d38:	fba3 1302 	umull	r1, r3, r3, r2
 8002d3c:	095b      	lsrs	r3, r3, #5
 8002d3e:	2164      	movs	r1, #100	; 0x64
 8002d40:	fb01 f303 	mul.w	r3, r1, r3
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	3332      	adds	r3, #50	; 0x32
 8002d4a:	4a07      	ldr	r2, [pc, #28]	; (8002d68 <UART_SetConfig+0x384>)
 8002d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d50:	095b      	lsrs	r3, r3, #5
 8002d52:	f003 0207 	and.w	r2, r3, #7
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4442      	add	r2, r8
 8002d5c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002d5e:	e1b2      	b.n	80030c6 <UART_SetConfig+0x6e2>
 8002d60:	40011000 	.word	0x40011000
 8002d64:	40011400 	.word	0x40011400
 8002d68:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4ad7      	ldr	r2, [pc, #860]	; (80030d0 <UART_SetConfig+0x6ec>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d005      	beq.n	8002d82 <UART_SetConfig+0x39e>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4ad6      	ldr	r2, [pc, #856]	; (80030d4 <UART_SetConfig+0x6f0>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	f040 80d1 	bne.w	8002f24 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d82:	f7ff f843 	bl	8001e0c <HAL_RCC_GetPCLK2Freq>
 8002d86:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	469a      	mov	sl, r3
 8002d8c:	f04f 0b00 	mov.w	fp, #0
 8002d90:	46d0      	mov	r8, sl
 8002d92:	46d9      	mov	r9, fp
 8002d94:	eb18 0308 	adds.w	r3, r8, r8
 8002d98:	eb49 0409 	adc.w	r4, r9, r9
 8002d9c:	4698      	mov	r8, r3
 8002d9e:	46a1      	mov	r9, r4
 8002da0:	eb18 080a 	adds.w	r8, r8, sl
 8002da4:	eb49 090b 	adc.w	r9, r9, fp
 8002da8:	f04f 0100 	mov.w	r1, #0
 8002dac:	f04f 0200 	mov.w	r2, #0
 8002db0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002db4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002db8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002dbc:	4688      	mov	r8, r1
 8002dbe:	4691      	mov	r9, r2
 8002dc0:	eb1a 0508 	adds.w	r5, sl, r8
 8002dc4:	eb4b 0609 	adc.w	r6, fp, r9
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	4619      	mov	r1, r3
 8002dce:	f04f 0200 	mov.w	r2, #0
 8002dd2:	f04f 0300 	mov.w	r3, #0
 8002dd6:	f04f 0400 	mov.w	r4, #0
 8002dda:	0094      	lsls	r4, r2, #2
 8002ddc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002de0:	008b      	lsls	r3, r1, #2
 8002de2:	461a      	mov	r2, r3
 8002de4:	4623      	mov	r3, r4
 8002de6:	4628      	mov	r0, r5
 8002de8:	4631      	mov	r1, r6
 8002dea:	f7fd fedd 	bl	8000ba8 <__aeabi_uldivmod>
 8002dee:	4603      	mov	r3, r0
 8002df0:	460c      	mov	r4, r1
 8002df2:	461a      	mov	r2, r3
 8002df4:	4bb8      	ldr	r3, [pc, #736]	; (80030d8 <UART_SetConfig+0x6f4>)
 8002df6:	fba3 2302 	umull	r2, r3, r3, r2
 8002dfa:	095b      	lsrs	r3, r3, #5
 8002dfc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	469b      	mov	fp, r3
 8002e04:	f04f 0c00 	mov.w	ip, #0
 8002e08:	46d9      	mov	r9, fp
 8002e0a:	46e2      	mov	sl, ip
 8002e0c:	eb19 0309 	adds.w	r3, r9, r9
 8002e10:	eb4a 040a 	adc.w	r4, sl, sl
 8002e14:	4699      	mov	r9, r3
 8002e16:	46a2      	mov	sl, r4
 8002e18:	eb19 090b 	adds.w	r9, r9, fp
 8002e1c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002e20:	f04f 0100 	mov.w	r1, #0
 8002e24:	f04f 0200 	mov.w	r2, #0
 8002e28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e2c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e30:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e34:	4689      	mov	r9, r1
 8002e36:	4692      	mov	sl, r2
 8002e38:	eb1b 0509 	adds.w	r5, fp, r9
 8002e3c:	eb4c 060a 	adc.w	r6, ip, sl
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	4619      	mov	r1, r3
 8002e46:	f04f 0200 	mov.w	r2, #0
 8002e4a:	f04f 0300 	mov.w	r3, #0
 8002e4e:	f04f 0400 	mov.w	r4, #0
 8002e52:	0094      	lsls	r4, r2, #2
 8002e54:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002e58:	008b      	lsls	r3, r1, #2
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	4623      	mov	r3, r4
 8002e5e:	4628      	mov	r0, r5
 8002e60:	4631      	mov	r1, r6
 8002e62:	f7fd fea1 	bl	8000ba8 <__aeabi_uldivmod>
 8002e66:	4603      	mov	r3, r0
 8002e68:	460c      	mov	r4, r1
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	4b9a      	ldr	r3, [pc, #616]	; (80030d8 <UART_SetConfig+0x6f4>)
 8002e6e:	fba3 1302 	umull	r1, r3, r3, r2
 8002e72:	095b      	lsrs	r3, r3, #5
 8002e74:	2164      	movs	r1, #100	; 0x64
 8002e76:	fb01 f303 	mul.w	r3, r1, r3
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	011b      	lsls	r3, r3, #4
 8002e7e:	3332      	adds	r3, #50	; 0x32
 8002e80:	4a95      	ldr	r2, [pc, #596]	; (80030d8 <UART_SetConfig+0x6f4>)
 8002e82:	fba2 2303 	umull	r2, r3, r2, r3
 8002e86:	095b      	lsrs	r3, r3, #5
 8002e88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e8c:	4498      	add	r8, r3
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	469b      	mov	fp, r3
 8002e92:	f04f 0c00 	mov.w	ip, #0
 8002e96:	46d9      	mov	r9, fp
 8002e98:	46e2      	mov	sl, ip
 8002e9a:	eb19 0309 	adds.w	r3, r9, r9
 8002e9e:	eb4a 040a 	adc.w	r4, sl, sl
 8002ea2:	4699      	mov	r9, r3
 8002ea4:	46a2      	mov	sl, r4
 8002ea6:	eb19 090b 	adds.w	r9, r9, fp
 8002eaa:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002eae:	f04f 0100 	mov.w	r1, #0
 8002eb2:	f04f 0200 	mov.w	r2, #0
 8002eb6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002eba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ebe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ec2:	4689      	mov	r9, r1
 8002ec4:	4692      	mov	sl, r2
 8002ec6:	eb1b 0509 	adds.w	r5, fp, r9
 8002eca:	eb4c 060a 	adc.w	r6, ip, sl
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	f04f 0200 	mov.w	r2, #0
 8002ed8:	f04f 0300 	mov.w	r3, #0
 8002edc:	f04f 0400 	mov.w	r4, #0
 8002ee0:	0094      	lsls	r4, r2, #2
 8002ee2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002ee6:	008b      	lsls	r3, r1, #2
 8002ee8:	461a      	mov	r2, r3
 8002eea:	4623      	mov	r3, r4
 8002eec:	4628      	mov	r0, r5
 8002eee:	4631      	mov	r1, r6
 8002ef0:	f7fd fe5a 	bl	8000ba8 <__aeabi_uldivmod>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	460c      	mov	r4, r1
 8002ef8:	461a      	mov	r2, r3
 8002efa:	4b77      	ldr	r3, [pc, #476]	; (80030d8 <UART_SetConfig+0x6f4>)
 8002efc:	fba3 1302 	umull	r1, r3, r3, r2
 8002f00:	095b      	lsrs	r3, r3, #5
 8002f02:	2164      	movs	r1, #100	; 0x64
 8002f04:	fb01 f303 	mul.w	r3, r1, r3
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	011b      	lsls	r3, r3, #4
 8002f0c:	3332      	adds	r3, #50	; 0x32
 8002f0e:	4a72      	ldr	r2, [pc, #456]	; (80030d8 <UART_SetConfig+0x6f4>)
 8002f10:	fba2 2303 	umull	r2, r3, r2, r3
 8002f14:	095b      	lsrs	r3, r3, #5
 8002f16:	f003 020f 	and.w	r2, r3, #15
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4442      	add	r2, r8
 8002f20:	609a      	str	r2, [r3, #8]
 8002f22:	e0d0      	b.n	80030c6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f24:	f7fe ff5e 	bl	8001de4 <HAL_RCC_GetPCLK1Freq>
 8002f28:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	469a      	mov	sl, r3
 8002f2e:	f04f 0b00 	mov.w	fp, #0
 8002f32:	46d0      	mov	r8, sl
 8002f34:	46d9      	mov	r9, fp
 8002f36:	eb18 0308 	adds.w	r3, r8, r8
 8002f3a:	eb49 0409 	adc.w	r4, r9, r9
 8002f3e:	4698      	mov	r8, r3
 8002f40:	46a1      	mov	r9, r4
 8002f42:	eb18 080a 	adds.w	r8, r8, sl
 8002f46:	eb49 090b 	adc.w	r9, r9, fp
 8002f4a:	f04f 0100 	mov.w	r1, #0
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002f56:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002f5a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002f5e:	4688      	mov	r8, r1
 8002f60:	4691      	mov	r9, r2
 8002f62:	eb1a 0508 	adds.w	r5, sl, r8
 8002f66:	eb4b 0609 	adc.w	r6, fp, r9
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	4619      	mov	r1, r3
 8002f70:	f04f 0200 	mov.w	r2, #0
 8002f74:	f04f 0300 	mov.w	r3, #0
 8002f78:	f04f 0400 	mov.w	r4, #0
 8002f7c:	0094      	lsls	r4, r2, #2
 8002f7e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002f82:	008b      	lsls	r3, r1, #2
 8002f84:	461a      	mov	r2, r3
 8002f86:	4623      	mov	r3, r4
 8002f88:	4628      	mov	r0, r5
 8002f8a:	4631      	mov	r1, r6
 8002f8c:	f7fd fe0c 	bl	8000ba8 <__aeabi_uldivmod>
 8002f90:	4603      	mov	r3, r0
 8002f92:	460c      	mov	r4, r1
 8002f94:	461a      	mov	r2, r3
 8002f96:	4b50      	ldr	r3, [pc, #320]	; (80030d8 <UART_SetConfig+0x6f4>)
 8002f98:	fba3 2302 	umull	r2, r3, r3, r2
 8002f9c:	095b      	lsrs	r3, r3, #5
 8002f9e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	469b      	mov	fp, r3
 8002fa6:	f04f 0c00 	mov.w	ip, #0
 8002faa:	46d9      	mov	r9, fp
 8002fac:	46e2      	mov	sl, ip
 8002fae:	eb19 0309 	adds.w	r3, r9, r9
 8002fb2:	eb4a 040a 	adc.w	r4, sl, sl
 8002fb6:	4699      	mov	r9, r3
 8002fb8:	46a2      	mov	sl, r4
 8002fba:	eb19 090b 	adds.w	r9, r9, fp
 8002fbe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002fc2:	f04f 0100 	mov.w	r1, #0
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002fd2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002fd6:	4689      	mov	r9, r1
 8002fd8:	4692      	mov	sl, r2
 8002fda:	eb1b 0509 	adds.w	r5, fp, r9
 8002fde:	eb4c 060a 	adc.w	r6, ip, sl
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	f04f 0200 	mov.w	r2, #0
 8002fec:	f04f 0300 	mov.w	r3, #0
 8002ff0:	f04f 0400 	mov.w	r4, #0
 8002ff4:	0094      	lsls	r4, r2, #2
 8002ff6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002ffa:	008b      	lsls	r3, r1, #2
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	4623      	mov	r3, r4
 8003000:	4628      	mov	r0, r5
 8003002:	4631      	mov	r1, r6
 8003004:	f7fd fdd0 	bl	8000ba8 <__aeabi_uldivmod>
 8003008:	4603      	mov	r3, r0
 800300a:	460c      	mov	r4, r1
 800300c:	461a      	mov	r2, r3
 800300e:	4b32      	ldr	r3, [pc, #200]	; (80030d8 <UART_SetConfig+0x6f4>)
 8003010:	fba3 1302 	umull	r1, r3, r3, r2
 8003014:	095b      	lsrs	r3, r3, #5
 8003016:	2164      	movs	r1, #100	; 0x64
 8003018:	fb01 f303 	mul.w	r3, r1, r3
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	3332      	adds	r3, #50	; 0x32
 8003022:	4a2d      	ldr	r2, [pc, #180]	; (80030d8 <UART_SetConfig+0x6f4>)
 8003024:	fba2 2303 	umull	r2, r3, r2, r3
 8003028:	095b      	lsrs	r3, r3, #5
 800302a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800302e:	4498      	add	r8, r3
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	469b      	mov	fp, r3
 8003034:	f04f 0c00 	mov.w	ip, #0
 8003038:	46d9      	mov	r9, fp
 800303a:	46e2      	mov	sl, ip
 800303c:	eb19 0309 	adds.w	r3, r9, r9
 8003040:	eb4a 040a 	adc.w	r4, sl, sl
 8003044:	4699      	mov	r9, r3
 8003046:	46a2      	mov	sl, r4
 8003048:	eb19 090b 	adds.w	r9, r9, fp
 800304c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003050:	f04f 0100 	mov.w	r1, #0
 8003054:	f04f 0200 	mov.w	r2, #0
 8003058:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800305c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003060:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003064:	4689      	mov	r9, r1
 8003066:	4692      	mov	sl, r2
 8003068:	eb1b 0509 	adds.w	r5, fp, r9
 800306c:	eb4c 060a 	adc.w	r6, ip, sl
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	4619      	mov	r1, r3
 8003076:	f04f 0200 	mov.w	r2, #0
 800307a:	f04f 0300 	mov.w	r3, #0
 800307e:	f04f 0400 	mov.w	r4, #0
 8003082:	0094      	lsls	r4, r2, #2
 8003084:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003088:	008b      	lsls	r3, r1, #2
 800308a:	461a      	mov	r2, r3
 800308c:	4623      	mov	r3, r4
 800308e:	4628      	mov	r0, r5
 8003090:	4631      	mov	r1, r6
 8003092:	f7fd fd89 	bl	8000ba8 <__aeabi_uldivmod>
 8003096:	4603      	mov	r3, r0
 8003098:	460c      	mov	r4, r1
 800309a:	461a      	mov	r2, r3
 800309c:	4b0e      	ldr	r3, [pc, #56]	; (80030d8 <UART_SetConfig+0x6f4>)
 800309e:	fba3 1302 	umull	r1, r3, r3, r2
 80030a2:	095b      	lsrs	r3, r3, #5
 80030a4:	2164      	movs	r1, #100	; 0x64
 80030a6:	fb01 f303 	mul.w	r3, r1, r3
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	011b      	lsls	r3, r3, #4
 80030ae:	3332      	adds	r3, #50	; 0x32
 80030b0:	4a09      	ldr	r2, [pc, #36]	; (80030d8 <UART_SetConfig+0x6f4>)
 80030b2:	fba2 2303 	umull	r2, r3, r2, r3
 80030b6:	095b      	lsrs	r3, r3, #5
 80030b8:	f003 020f 	and.w	r2, r3, #15
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4442      	add	r2, r8
 80030c2:	609a      	str	r2, [r3, #8]
}
 80030c4:	e7ff      	b.n	80030c6 <UART_SetConfig+0x6e2>
 80030c6:	bf00      	nop
 80030c8:	3714      	adds	r7, #20
 80030ca:	46bd      	mov	sp, r7
 80030cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030d0:	40011000 	.word	0x40011000
 80030d4:	40011400 	.word	0x40011400
 80030d8:	51eb851f 	.word	0x51eb851f

080030dc <SysTick_Handler>:
#include "main.h"

extern TIM_HandleTypeDef htim2,htim6;

void SysTick_Handler (void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80030e0:	f7fd ff34 	bl	8000f4c <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80030e4:	f7fe f880 	bl	80011e8 <HAL_SYSTICK_IRQHandler>
}
 80030e8:	bf00      	nop
 80030ea:	bd80      	pop	{r7, pc}

080030ec <TIM2_IRQHandler>:

void TIM2_IRQHandler (void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim2);
 80030f0:	4802      	ldr	r0, [pc, #8]	; (80030fc <TIM2_IRQHandler+0x10>)
 80030f2:	f7fe ff81 	bl	8001ff8 <HAL_TIM_IRQHandler>
}
 80030f6:	bf00      	nop
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	20000254 	.word	0x20000254

08003100 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim6);
 8003104:	4802      	ldr	r0, [pc, #8]	; (8003110 <TIM6_DAC_IRQHandler+0x10>)
 8003106:	f7fe ff77 	bl	8001ff8 <HAL_TIM_IRQHandler>
}
 800310a:	bf00      	nop
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	20000214 	.word	0x20000214

08003114 <main>:

TIM_HandleTypeDef htim2,htim6;
UART_HandleTypeDef huart2;

int main(void)
{
 8003114:	b590      	push	{r4, r7, lr}
 8003116:	b0a5      	sub	sp, #148	; 0x94
 8003118:	af00      	add	r7, sp, #0
	uint32_t capture_difference = 0;
 800311a:	2300      	movs	r3, #0
 800311c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	double timer2_cnt_freq = 0;
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	f04f 0400 	mov.w	r4, #0
 8003128:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	double timer2_cnt_res = 0;
 800312c:	f04f 0300 	mov.w	r3, #0
 8003130:	f04f 0400 	mov.w	r4, #0
 8003134:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	double user_signal_time_period = 0;
 8003138:	f04f 0300 	mov.w	r3, #0
 800313c:	f04f 0400 	mov.w	r4, #0
 8003140:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	double user_signal_freq =0;
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	f04f 0400 	mov.w	r4, #0
 800314c:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68

	char *user_data = "The application is running. \r\n";
 8003150:	4b43      	ldr	r3, [pc, #268]	; (8003260 <main+0x14c>)
 8003152:	667b      	str	r3, [r7, #100]	; 0x64
	char usr_msg[100];

	HAL_Init();
 8003154:	f7fd fea8 	bl	8000ea8 <HAL_Init>
	SystemClock_Config(SYS_CLOCK_FREQ_50MHZ);
 8003158:	2032      	movs	r0, #50	; 0x32
 800315a:	f000 f96d 	bl	8003438 <SystemClock_Config>
	GPIO_Init();
 800315e:	f000 f88f 	bl	8003280 <GPIO_Init>

	UART2_Init();
 8003162:	f000 f90f 	bl	8003384 <UART2_Init>
	TIMER2_Init();
 8003166:	f000 f8db 	bl	8003320 <TIMER2_Init>
	TIMER6_Init();
 800316a:	f000 f8af 	bl	80032cc <TIMER6_Init>
//	LSI_Configuration();

	HAL_UART_Transmit(&huart2,(uint8_t*)user_data,strlen(user_data),HAL_MAX_DELAY);
 800316e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8003170:	f7fd f82e 	bl	80001d0 <strlen>
 8003174:	4603      	mov	r3, r0
 8003176:	b29a      	uxth	r2, r3
 8003178:	f04f 33ff 	mov.w	r3, #4294967295
 800317c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800317e:	4839      	ldr	r0, [pc, #228]	; (8003264 <main+0x150>)
 8003180:	f7ff fb4c 	bl	800281c <HAL_UART_Transmit>

	//Let start the timer in IT mode
	HAL_TIM_Base_Start_IT(&htim6);
 8003184:	4838      	ldr	r0, [pc, #224]	; (8003268 <main+0x154>)
 8003186:	f7fe fe80 	bl	8001e8a <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800318a:	2100      	movs	r1, #0
 800318c:	4837      	ldr	r0, [pc, #220]	; (800326c <main+0x158>)
 800318e:	f7fe fecb 	bl	8001f28 <HAL_TIM_IC_Start_IT>
	while(1)
	{
		if (is_capture_done)
 8003192:	4b37      	ldr	r3, [pc, #220]	; (8003270 <main+0x15c>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d0fb      	beq.n	8003192 <main+0x7e>
		{
			if (input_capture[1] > input_capture[0])
 800319a:	4b36      	ldr	r3, [pc, #216]	; (8003274 <main+0x160>)
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	4b35      	ldr	r3, [pc, #212]	; (8003274 <main+0x160>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d907      	bls.n	80031b6 <main+0xa2>
				capture_difference = input_capture[1]-input_capture[0];
 80031a6:	4b33      	ldr	r3, [pc, #204]	; (8003274 <main+0x160>)
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	4b32      	ldr	r3, [pc, #200]	; (8003274 <main+0x160>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80031b4:	e007      	b.n	80031c6 <main+0xb2>
			else
				capture_difference = ((0xFFFFFFFF)-input_capture[0])+ input_capture[1];
 80031b6:	4b2f      	ldr	r3, [pc, #188]	; (8003274 <main+0x160>)
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	4b2e      	ldr	r3, [pc, #184]	; (8003274 <main+0x160>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	3b01      	subs	r3, #1
 80031c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			timer2_cnt_freq = (HAL_RCC_GetPCLK1Freq()*2) / (htim2.Init.Prescaler+1);
 80031c6:	f7fe fe0d 	bl	8001de4 <HAL_RCC_GetPCLK1Freq>
 80031ca:	4603      	mov	r3, r0
 80031cc:	005a      	lsls	r2, r3, #1
 80031ce:	4b27      	ldr	r3, [pc, #156]	; (800326c <main+0x158>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	3301      	adds	r3, #1
 80031d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d8:	4618      	mov	r0, r3
 80031da:	f7fd f993 	bl	8000504 <__aeabi_ui2d>
 80031de:	4603      	mov	r3, r0
 80031e0:	460c      	mov	r4, r1
 80031e2:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			timer2_cnt_res = 1/timer2_cnt_freq;
 80031e6:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80031ea:	f04f 0000 	mov.w	r0, #0
 80031ee:	4922      	ldr	r1, [pc, #136]	; (8003278 <main+0x164>)
 80031f0:	f7fd fb2c 	bl	800084c <__aeabi_ddiv>
 80031f4:	4603      	mov	r3, r0
 80031f6:	460c      	mov	r4, r1
 80031f8:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
			user_signal_time_period = capture_difference*timer2_cnt_res;
 80031fc:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8003200:	f7fd f980 	bl	8000504 <__aeabi_ui2d>
 8003204:	4603      	mov	r3, r0
 8003206:	460c      	mov	r4, r1
 8003208:	461a      	mov	r2, r3
 800320a:	4623      	mov	r3, r4
 800320c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003210:	f7fd f9f2 	bl	80005f8 <__aeabi_dmul>
 8003214:	4603      	mov	r3, r0
 8003216:	460c      	mov	r4, r1
 8003218:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
			user_signal_freq = 1/user_signal_time_period;
 800321c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003220:	f04f 0000 	mov.w	r0, #0
 8003224:	4914      	ldr	r1, [pc, #80]	; (8003278 <main+0x164>)
 8003226:	f7fd fb11 	bl	800084c <__aeabi_ddiv>
 800322a:	4603      	mov	r3, r0
 800322c:	460c      	mov	r4, r1
 800322e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68

			sprintf(usr_msg,"Frequency of the signal applied = %.2f HZ\r\n",user_signal_freq);
 8003232:	4638      	mov	r0, r7
 8003234:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003238:	4910      	ldr	r1, [pc, #64]	; (800327c <main+0x168>)
 800323a:	f000 ff2d 	bl	8004098 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)usr_msg, strlen(usr_msg), HAL_MAX_DELAY);
 800323e:	463b      	mov	r3, r7
 8003240:	4618      	mov	r0, r3
 8003242:	f7fc ffc5 	bl	80001d0 <strlen>
 8003246:	4603      	mov	r3, r0
 8003248:	b29a      	uxth	r2, r3
 800324a:	4639      	mov	r1, r7
 800324c:	f04f 33ff 	mov.w	r3, #4294967295
 8003250:	4804      	ldr	r0, [pc, #16]	; (8003264 <main+0x150>)
 8003252:	f7ff fae3 	bl	800281c <HAL_UART_Transmit>

			is_capture_done = FALSE;
 8003256:	4b06      	ldr	r3, [pc, #24]	; (8003270 <main+0x15c>)
 8003258:	2200      	movs	r2, #0
 800325a:	701a      	strb	r2, [r3, #0]
		if (is_capture_done)
 800325c:	e799      	b.n	8003192 <main+0x7e>
 800325e:	bf00      	nop
 8003260:	08005890 	.word	0x08005890
 8003264:	20000294 	.word	0x20000294
 8003268:	20000214 	.word	0x20000214
 800326c:	20000254 	.word	0x20000254
 8003270:	20000200 	.word	0x20000200
 8003274:	200001f8 	.word	0x200001f8
 8003278:	3ff00000 	.word	0x3ff00000
 800327c:	080058b0 	.word	0x080058b0

08003280 <GPIO_Init>:

	return 0;
}

void GPIO_Init(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003286:	2300      	movs	r3, #0
 8003288:	603b      	str	r3, [r7, #0]
 800328a:	4b0e      	ldr	r3, [pc, #56]	; (80032c4 <GPIO_Init+0x44>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	4a0d      	ldr	r2, [pc, #52]	; (80032c4 <GPIO_Init+0x44>)
 8003290:	f043 0308 	orr.w	r3, r3, #8
 8003294:	6313      	str	r3, [r2, #48]	; 0x30
 8003296:	4b0b      	ldr	r3, [pc, #44]	; (80032c4 <GPIO_Init+0x44>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	f003 0308 	and.w	r3, r3, #8
 800329e:	603b      	str	r3, [r7, #0]
 80032a0:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef ledgpio;
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 80032a2:	2301      	movs	r3, #1
 80032a4:	60bb      	str	r3, [r7, #8]
	ledgpio.Pin = GPIO_PIN_12;
 80032a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032aa:	607b      	str	r3, [r7, #4]
	ledgpio.Pull= GPIO_NOPULL;
 80032ac:	2300      	movs	r3, #0
 80032ae:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(GPIOD, &ledgpio);
 80032b0:	1d3b      	adds	r3, r7, #4
 80032b2:	4619      	mov	r1, r3
 80032b4:	4804      	ldr	r0, [pc, #16]	; (80032c8 <GPIO_Init+0x48>)
 80032b6:	f7fd ffa5 	bl	8001204 <HAL_GPIO_Init>
}
 80032ba:	bf00      	nop
 80032bc:	3718      	adds	r7, #24
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	40023800 	.word	0x40023800
 80032c8:	40020c00 	.word	0x40020c00

080032cc <TIMER6_Init>:

void TIMER6_Init (void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
	htim6.Instance = TIM6;
 80032d0:	4b09      	ldr	r3, [pc, #36]	; (80032f8 <TIMER6_Init+0x2c>)
 80032d2:	4a0a      	ldr	r2, [pc, #40]	; (80032fc <TIMER6_Init+0x30>)
 80032d4:	601a      	str	r2, [r3, #0]
	//Generate the frequency ~30Khz
	htim6.Init.Prescaler = 6;
 80032d6:	4b08      	ldr	r3, [pc, #32]	; (80032f8 <TIMER6_Init+0x2c>)
 80032d8:	2206      	movs	r2, #6
 80032da:	605a      	str	r2, [r3, #4]
	htim6.Init.Period = (119 -1);
 80032dc:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <TIMER6_Init+0x2c>)
 80032de:	2276      	movs	r2, #118	; 0x76
 80032e0:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_Base_Init (&htim6) != HAL_OK)
 80032e2:	4805      	ldr	r0, [pc, #20]	; (80032f8 <TIMER6_Init+0x2c>)
 80032e4:	f7fe fda6 	bl	8001e34 <HAL_TIM_Base_Init>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <TIMER6_Init+0x26>
	{
		Error_handler();
 80032ee:	f000 f94f 	bl	8003590 <Error_handler>
	}

}
 80032f2:	bf00      	nop
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	20000214 	.word	0x20000214
 80032fc:	40001000 	.word	0x40001000

08003300 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8003308:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800330c:	4803      	ldr	r0, [pc, #12]	; (800331c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800330e:	f7fe f913 	bl	8001538 <HAL_GPIO_TogglePin>
}
 8003312:	bf00      	nop
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40020c00 	.word	0x40020c00

08003320 <TIMER2_Init>:

static void TIMER2_Init(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
	TIM_IC_InitTypeDef timer2IC_Config;

	htim2.Instance=TIM2;
 8003326:	4b16      	ldr	r3, [pc, #88]	; (8003380 <TIMER2_Init+0x60>)
 8003328:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800332c:	601a      	str	r2, [r3, #0]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800332e:	4b14      	ldr	r3, [pc, #80]	; (8003380 <TIMER2_Init+0x60>)
 8003330:	2200      	movs	r2, #0
 8003332:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0xFFFFFFFF;
 8003334:	4b12      	ldr	r3, [pc, #72]	; (8003380 <TIMER2_Init+0x60>)
 8003336:	f04f 32ff 	mov.w	r2, #4294967295
 800333a:	60da      	str	r2, [r3, #12]
	htim2.Init.Prescaler = 1;
 800333c:	4b10      	ldr	r3, [pc, #64]	; (8003380 <TIMER2_Init+0x60>)
 800333e:	2201      	movs	r2, #1
 8003340:	605a      	str	r2, [r3, #4]

	if( HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8003342:	480f      	ldr	r0, [pc, #60]	; (8003380 <TIMER2_Init+0x60>)
 8003344:	f7fe fdc5 	bl	8001ed2 <HAL_TIM_IC_Init>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <TIMER2_Init+0x32>
	{
		Error_handler();
 800334e:	f000 f91f 	bl	8003590 <Error_handler>
	}

	timer2IC_Config.ICFilter 	= 0;
 8003352:	2300      	movs	r3, #0
 8003354:	60fb      	str	r3, [r7, #12]
	timer2IC_Config.ICPolarity 	= TIM_ICPOLARITY_RISING;
 8003356:	2300      	movs	r3, #0
 8003358:	603b      	str	r3, [r7, #0]
	timer2IC_Config.ICPrescaler	= TIM_ICPSC_DIV1;
 800335a:	2300      	movs	r3, #0
 800335c:	60bb      	str	r3, [r7, #8]
	timer2IC_Config.ICSelection	= TIM_ICSELECTION_DIRECTTI;
 800335e:	2301      	movs	r3, #1
 8003360:	607b      	str	r3, [r7, #4]

	if(HAL_TIM_IC_ConfigChannel(&htim2, &timer2IC_Config, TIM_CHANNEL_1) != HAL_OK)
 8003362:	463b      	mov	r3, r7
 8003364:	2200      	movs	r2, #0
 8003366:	4619      	mov	r1, r3
 8003368:	4805      	ldr	r0, [pc, #20]	; (8003380 <TIMER2_Init+0x60>)
 800336a:	f7fe ff4d 	bl	8002208 <HAL_TIM_IC_ConfigChannel>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <TIMER2_Init+0x58>
	{
		Error_handler();
 8003374:	f000 f90c 	bl	8003590 <Error_handler>
	}
}
 8003378:	bf00      	nop
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	20000254 	.word	0x20000254

08003384 <UART2_Init>:

void UART2_Init(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 8003388:	4b0f      	ldr	r3, [pc, #60]	; (80033c8 <UART2_Init+0x44>)
 800338a:	4a10      	ldr	r2, [pc, #64]	; (80033cc <UART2_Init+0x48>)
 800338c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800338e:	4b0e      	ldr	r3, [pc, #56]	; (80033c8 <UART2_Init+0x44>)
 8003390:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003394:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003396:	4b0c      	ldr	r3, [pc, #48]	; (80033c8 <UART2_Init+0x44>)
 8003398:	2200      	movs	r2, #0
 800339a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800339c:	4b0a      	ldr	r3, [pc, #40]	; (80033c8 <UART2_Init+0x44>)
 800339e:	2200      	movs	r2, #0
 80033a0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80033a2:	4b09      	ldr	r3, [pc, #36]	; (80033c8 <UART2_Init+0x44>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80033a8:	4b07      	ldr	r3, [pc, #28]	; (80033c8 <UART2_Init+0x44>)
 80033aa:	220c      	movs	r2, #12
 80033ac:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033ae:	4b06      	ldr	r3, [pc, #24]	; (80033c8 <UART2_Init+0x44>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 80033b4:	4b04      	ldr	r3, [pc, #16]	; (80033c8 <UART2_Init+0x44>)
 80033b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80033ba:	61da      	str	r2, [r3, #28]

	HAL_UART_Init(&huart2);
 80033bc:	4802      	ldr	r0, [pc, #8]	; (80033c8 <UART2_Init+0x44>)
 80033be:	f7ff f9e0 	bl	8002782 <HAL_UART_Init>
}
 80033c2:	bf00      	nop
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	20000294 	.word	0x20000294
 80033cc:	40004400 	.word	0x40004400

080033d0 <HAL_TIM_IC_CaptureCallback>:
//	}
	HAL_RCC_MCOConfig(RCC_MCO1,RCC_MCO1SOURCE_HSE,RCC_MCODIV_4);
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
	if(!is_capture_done)
 80033d8:	4b14      	ldr	r3, [pc, #80]	; (800342c <HAL_TIM_IC_CaptureCallback+0x5c>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d11e      	bne.n	800341e <HAL_TIM_IC_CaptureCallback+0x4e>
	{
		if(count == 1)
 80033e0:	4b13      	ldr	r3, [pc, #76]	; (8003430 <HAL_TIM_IC_CaptureCallback+0x60>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d10b      	bne.n	8003400 <HAL_TIM_IC_CaptureCallback+0x30>
		{
			input_capture[0] = __HAL_TIM_GET_COMPARE(htim,TIM_CHANNEL_1);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ee:	4a11      	ldr	r2, [pc, #68]	; (8003434 <HAL_TIM_IC_CaptureCallback+0x64>)
 80033f0:	6013      	str	r3, [r2, #0]
			count++;
 80033f2:	4b0f      	ldr	r3, [pc, #60]	; (8003430 <HAL_TIM_IC_CaptureCallback+0x60>)
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	3301      	adds	r3, #1
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	4b0d      	ldr	r3, [pc, #52]	; (8003430 <HAL_TIM_IC_CaptureCallback+0x60>)
 80033fc:	701a      	strb	r2, [r3, #0]
			input_capture[1] = __HAL_TIM_GET_COMPARE(htim,TIM_CHANNEL_1);
			count =1;
			is_capture_done = TRUE;
		}
	}
}
 80033fe:	e00e      	b.n	800341e <HAL_TIM_IC_CaptureCallback+0x4e>
		else if (count == 2)
 8003400:	4b0b      	ldr	r3, [pc, #44]	; (8003430 <HAL_TIM_IC_CaptureCallback+0x60>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	2b02      	cmp	r3, #2
 8003406:	d10a      	bne.n	800341e <HAL_TIM_IC_CaptureCallback+0x4e>
			input_capture[1] = __HAL_TIM_GET_COMPARE(htim,TIM_CHANNEL_1);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800340e:	4a09      	ldr	r2, [pc, #36]	; (8003434 <HAL_TIM_IC_CaptureCallback+0x64>)
 8003410:	6053      	str	r3, [r2, #4]
			count =1;
 8003412:	4b07      	ldr	r3, [pc, #28]	; (8003430 <HAL_TIM_IC_CaptureCallback+0x60>)
 8003414:	2201      	movs	r2, #1
 8003416:	701a      	strb	r2, [r3, #0]
			is_capture_done = TRUE;
 8003418:	4b04      	ldr	r3, [pc, #16]	; (800342c <HAL_TIM_IC_CaptureCallback+0x5c>)
 800341a:	2201      	movs	r2, #1
 800341c:	701a      	strb	r2, [r3, #0]
}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	20000200 	.word	0x20000200
 8003430:	20000005 	.word	0x20000005
 8003434:	200001f8 	.word	0x200001f8

08003438 <SystemClock_Config>:

void SystemClock_Config(uint8_t clock_freq)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b094      	sub	sp, #80	; 0x50
 800343c:	af00      	add	r7, sp, #0
 800343e:	4603      	mov	r3, r0
 8003440:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;

	uint8_t Flatency = 0;
 8003442:	2300      	movs	r3, #0
 8003444:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
 8003448:	2303      	movs	r3, #3
 800344a:	61fb      	str	r3, [r7, #28]
	osc_init.HSEState = RCC_HSE_ON;
 800344c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003450:	623b      	str	r3, [r7, #32]
	osc_init.HSIState = RCC_HSI_ON;
 8003452:	2301      	movs	r3, #1
 8003454:	62bb      	str	r3, [r7, #40]	; 0x28
	osc_init.PLL.PLLState = RCC_PLL_ON;
 8003456:	2302      	movs	r3, #2
 8003458:	637b      	str	r3, [r7, #52]	; 0x34
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800345a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800345e:	63bb      	str	r3, [r7, #56]	; 0x38
	switch (clock_freq)
 8003460:	79fb      	ldrb	r3, [r7, #7]
 8003462:	2b54      	cmp	r3, #84	; 0x54
 8003464:	d021      	beq.n	80034aa <SystemClock_Config+0x72>
 8003466:	2b54      	cmp	r3, #84	; 0x54
 8003468:	dc02      	bgt.n	8003470 <SystemClock_Config+0x38>
 800346a:	2b32      	cmp	r3, #50	; 0x32
 800346c:	d005      	beq.n	800347a <SystemClock_Config+0x42>

			Flatency = FLASH_ACR_LATENCY_5WS;
			break;
		}
		default :
			return;
 800346e:	e089      	b.n	8003584 <SystemClock_Config+0x14c>
	switch (clock_freq)
 8003470:	2b78      	cmp	r3, #120	; 0x78
 8003472:	d032      	beq.n	80034da <SystemClock_Config+0xa2>
 8003474:	2ba8      	cmp	r3, #168	; 0xa8
 8003476:	d048      	beq.n	800350a <SystemClock_Config+0xd2>
			return;
 8003478:	e084      	b.n	8003584 <SystemClock_Config+0x14c>
			osc_init.PLL.PLLM = 8;
 800347a:	2308      	movs	r3, #8
 800347c:	63fb      	str	r3, [r7, #60]	; 0x3c
			osc_init.PLL.PLLN = 100; //PLLN from 50 to 432
 800347e:	2364      	movs	r3, #100	; 0x64
 8003480:	643b      	str	r3, [r7, #64]	; 0x40
			osc_init.PLL.PLLP = 2;
 8003482:	2302      	movs	r3, #2
 8003484:	647b      	str	r3, [r7, #68]	; 0x44
			osc_init.PLL.PLLQ = 2;
 8003486:	2302      	movs	r3, #2
 8003488:	64bb      	str	r3, [r7, #72]	; 0x48
			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800348a:	230f      	movs	r3, #15
 800348c:	60bb      	str	r3, [r7, #8]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800348e:	2302      	movs	r3, #2
 8003490:	60fb      	str	r3, [r7, #12]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003492:	2300      	movs	r3, #0
 8003494:	613b      	str	r3, [r7, #16]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8003496:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800349a:	617b      	str	r3, [r7, #20]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 800349c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034a0:	61bb      	str	r3, [r7, #24]
			Flatency = FLASH_ACR_LATENCY_1WS;
 80034a2:	2301      	movs	r3, #1
 80034a4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			break;
 80034a8:	e048      	b.n	800353c <SystemClock_Config+0x104>
			osc_init.PLL.PLLM = 8;
 80034aa:	2308      	movs	r3, #8
 80034ac:	63fb      	str	r3, [r7, #60]	; 0x3c
			osc_init.PLL.PLLN = 168; //PLLN from 50 to 432
 80034ae:	23a8      	movs	r3, #168	; 0xa8
 80034b0:	643b      	str	r3, [r7, #64]	; 0x40
			osc_init.PLL.PLLP = 2;
 80034b2:	2302      	movs	r3, #2
 80034b4:	647b      	str	r3, [r7, #68]	; 0x44
			osc_init.PLL.PLLQ = 2;
 80034b6:	2302      	movs	r3, #2
 80034b8:	64bb      	str	r3, [r7, #72]	; 0x48
			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80034ba:	230f      	movs	r3, #15
 80034bc:	60bb      	str	r3, [r7, #8]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034be:	2302      	movs	r3, #2
 80034c0:	60fb      	str	r3, [r7, #12]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034c2:	2300      	movs	r3, #0
 80034c4:	613b      	str	r3, [r7, #16]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 80034c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034ca:	617b      	str	r3, [r7, #20]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80034cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034d0:	61bb      	str	r3, [r7, #24]
			Flatency = FLASH_ACR_LATENCY_2WS;
 80034d2:	2302      	movs	r3, #2
 80034d4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			break;
 80034d8:	e030      	b.n	800353c <SystemClock_Config+0x104>
			osc_init.PLL.PLLM = 8;
 80034da:	2308      	movs	r3, #8
 80034dc:	63fb      	str	r3, [r7, #60]	; 0x3c
			osc_init.PLL.PLLN = 240; //PLLN from 50 to 432
 80034de:	23f0      	movs	r3, #240	; 0xf0
 80034e0:	643b      	str	r3, [r7, #64]	; 0x40
			osc_init.PLL.PLLP = 2;
 80034e2:	2302      	movs	r3, #2
 80034e4:	647b      	str	r3, [r7, #68]	; 0x44
			osc_init.PLL.PLLQ = 2;
 80034e6:	2302      	movs	r3, #2
 80034e8:	64bb      	str	r3, [r7, #72]	; 0x48
			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80034ea:	230f      	movs	r3, #15
 80034ec:	60bb      	str	r3, [r7, #8]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034ee:	2302      	movs	r3, #2
 80034f0:	60fb      	str	r3, [r7, #12]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034f2:	2300      	movs	r3, #0
 80034f4:	613b      	str	r3, [r7, #16]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
 80034f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80034fa:	617b      	str	r3, [r7, #20]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80034fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003500:	61bb      	str	r3, [r7, #24]
			Flatency = FLASH_ACR_LATENCY_3WS;
 8003502:	2303      	movs	r3, #3
 8003504:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			break;
 8003508:	e018      	b.n	800353c <SystemClock_Config+0x104>
			osc_init.PLL.PLLM = 8;
 800350a:	2308      	movs	r3, #8
 800350c:	63fb      	str	r3, [r7, #60]	; 0x3c
			osc_init.PLL.PLLN = 336; //PLLN from 50 to 432
 800350e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003512:	643b      	str	r3, [r7, #64]	; 0x40
			osc_init.PLL.PLLP = 2;
 8003514:	2302      	movs	r3, #2
 8003516:	647b      	str	r3, [r7, #68]	; 0x44
			osc_init.PLL.PLLQ = 2;
 8003518:	2302      	movs	r3, #2
 800351a:	64bb      	str	r3, [r7, #72]	; 0x48
			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800351c:	230f      	movs	r3, #15
 800351e:	60bb      	str	r3, [r7, #8]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003520:	2302      	movs	r3, #2
 8003522:	60fb      	str	r3, [r7, #12]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003524:	2300      	movs	r3, #0
 8003526:	613b      	str	r3, [r7, #16]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
 8003528:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800352c:	617b      	str	r3, [r7, #20]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 800352e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003532:	61bb      	str	r3, [r7, #24]
			Flatency = FLASH_ACR_LATENCY_5WS;
 8003534:	2305      	movs	r3, #5
 8003536:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			break;
 800353a:	bf00      	nop
	}
	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 800353c:	f107 031c 	add.w	r3, r7, #28
 8003540:	4618      	mov	r0, r3
 8003542:	f7fe f815 	bl	8001570 <HAL_RCC_OscConfig>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d001      	beq.n	8003550 <SystemClock_Config+0x118>
	{
		Error_handler();
 800354c:	f000 f820 	bl	8003590 <Error_handler>
	}

	if(HAL_RCC_ClockConfig(&clk_init, Flatency)!= HAL_OK)
 8003550:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8003554:	f107 0308 	add.w	r3, r7, #8
 8003558:	4611      	mov	r1, r2
 800355a:	4618      	mov	r0, r3
 800355c:	f7fe fa78 	bl	8001a50 <HAL_RCC_ClockConfig>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <SystemClock_Config+0x132>
	{
		Error_handler();
 8003566:	f000 f813 	bl	8003590 <Error_handler>
	}

	//Systick configuration
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800356a:	f7fe fc2f 	bl	8001dcc <HAL_RCC_GetHCLKFreq>
 800356e:	4602      	mov	r2, r0
 8003570:	4b06      	ldr	r3, [pc, #24]	; (800358c <SystemClock_Config+0x154>)
 8003572:	fba3 2302 	umull	r2, r3, r3, r2
 8003576:	099b      	lsrs	r3, r3, #6
 8003578:	4618      	mov	r0, r3
 800357a:	f7fd fe0c 	bl	8001196 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800357e:	2004      	movs	r0, #4
 8003580:	f7fd fe16 	bl	80011b0 <HAL_SYSTICK_CLKSourceConfig>
}
 8003584:	3750      	adds	r7, #80	; 0x50
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	10624dd3 	.word	0x10624dd3

08003590 <Error_handler>:
void Error_handler(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
	;
}
 8003594:	bf00      	nop
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
	...

080035a0 <HAL_MspInit>:
 *      Author: thaithinhtran
 */
#include "main.h"

void HAL_MspInit(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
//Here will do low level processor specific inits.
	//1. set up the priority grouping of the cortex mx processor
//	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x07<<16; //usage faul , memory fault , bus fault system exceptions
 80035a4:	4b0c      	ldr	r3, [pc, #48]	; (80035d8 <HAL_MspInit+0x38>)
 80035a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a8:	4a0b      	ldr	r2, [pc, #44]	; (80035d8 <HAL_MspInit+0x38>)
 80035aa:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80035ae:	6253      	str	r3, [r2, #36]	; 0x24

	//3. Configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 80035b0:	2200      	movs	r2, #0
 80035b2:	2100      	movs	r1, #0
 80035b4:	f06f 000b 	mvn.w	r0, #11
 80035b8:	f7fd fdc3 	bl	8001142 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 80035bc:	2200      	movs	r2, #0
 80035be:	2100      	movs	r1, #0
 80035c0:	f06f 000a 	mvn.w	r0, #10
 80035c4:	f7fd fdbd 	bl	8001142 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 80035c8:	2200      	movs	r2, #0
 80035ca:	2100      	movs	r1, #0
 80035cc:	f06f 0009 	mvn.w	r0, #9
 80035d0:	f7fd fdb7 	bl	8001142 <HAL_NVIC_SetPriority>
}
 80035d4:	bf00      	nop
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	e000ed00 	.word	0xe000ed00

080035dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b08a      	sub	sp, #40	; 0x28
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_uart;
	//Here we are going to do the low level inits of UART2 peripheral

	//1. Enable the clock for USART2 peripheral and GPIO pins
	__HAL_RCC_USART2_CLK_ENABLE();
 80035e4:	2300      	movs	r3, #0
 80035e6:	613b      	str	r3, [r7, #16]
 80035e8:	4b1e      	ldr	r3, [pc, #120]	; (8003664 <HAL_UART_MspInit+0x88>)
 80035ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ec:	4a1d      	ldr	r2, [pc, #116]	; (8003664 <HAL_UART_MspInit+0x88>)
 80035ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035f2:	6413      	str	r3, [r2, #64]	; 0x40
 80035f4:	4b1b      	ldr	r3, [pc, #108]	; (8003664 <HAL_UART_MspInit+0x88>)
 80035f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fc:	613b      	str	r3, [r7, #16]
 80035fe:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003600:	2300      	movs	r3, #0
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	4b17      	ldr	r3, [pc, #92]	; (8003664 <HAL_UART_MspInit+0x88>)
 8003606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003608:	4a16      	ldr	r2, [pc, #88]	; (8003664 <HAL_UART_MspInit+0x88>)
 800360a:	f043 0301 	orr.w	r3, r3, #1
 800360e:	6313      	str	r3, [r2, #48]	; 0x30
 8003610:	4b14      	ldr	r3, [pc, #80]	; (8003664 <HAL_UART_MspInit+0x88>)
 8003612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	60fb      	str	r3, [r7, #12]
 800361a:	68fb      	ldr	r3, [r7, #12]
	//2. Do the pin configurations
	gpio_uart.Pin = GPIO_PIN_2;
 800361c:	2304      	movs	r3, #4
 800361e:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 8003620:	2302      	movs	r3, #2
 8003622:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull = GPIO_PULLUP;
 8003624:	2301      	movs	r3, #1
 8003626:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8003628:	2300      	movs	r3, #0
 800362a:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate = GPIO_AF7_USART2;
 800362c:	2307      	movs	r3, #7
 800362e:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_GPIO_Init(GPIOA,&gpio_uart);
 8003630:	f107 0314 	add.w	r3, r7, #20
 8003634:	4619      	mov	r1, r3
 8003636:	480c      	ldr	r0, [pc, #48]	; (8003668 <HAL_UART_MspInit+0x8c>)
 8003638:	f7fd fde4 	bl	8001204 <HAL_GPIO_Init>

	gpio_uart.Pin = GPIO_PIN_3;
 800363c:	2308      	movs	r3, #8
 800363e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA,&gpio_uart);
 8003640:	f107 0314 	add.w	r3, r7, #20
 8003644:	4619      	mov	r1, r3
 8003646:	4808      	ldr	r0, [pc, #32]	; (8003668 <HAL_UART_MspInit+0x8c>)
 8003648:	f7fd fddc 	bl	8001204 <HAL_GPIO_Init>
	//3. Enabe the IRQ and set the priority (NVIC settings)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 800364c:	2026      	movs	r0, #38	; 0x26
 800364e:	f7fd fd94 	bl	800117a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn,15,0);
 8003652:	2200      	movs	r2, #0
 8003654:	210f      	movs	r1, #15
 8003656:	2026      	movs	r0, #38	; 0x26
 8003658:	f7fd fd73 	bl	8001142 <HAL_NVIC_SetPriority>

}
 800365c:	bf00      	nop
 800365e:	3728      	adds	r7, #40	; 0x28
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	40023800 	.word	0x40023800
 8003668:	40020000 	.word	0x40020000

0800366c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htimer)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
	//1. Enable the Clock for TIM6 peripheral
	__HAL_RCC_TIM6_CLK_ENABLE();
 8003674:	2300      	movs	r3, #0
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	4b0b      	ldr	r3, [pc, #44]	; (80036a8 <HAL_TIM_Base_MspInit+0x3c>)
 800367a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367c:	4a0a      	ldr	r2, [pc, #40]	; (80036a8 <HAL_TIM_Base_MspInit+0x3c>)
 800367e:	f043 0310 	orr.w	r3, r3, #16
 8003682:	6413      	str	r3, [r2, #64]	; 0x40
 8003684:	4b08      	ldr	r3, [pc, #32]	; (80036a8 <HAL_TIM_Base_MspInit+0x3c>)
 8003686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003688:	f003 0310 	and.w	r3, r3, #16
 800368c:	60fb      	str	r3, [r7, #12]
 800368e:	68fb      	ldr	r3, [r7, #12]

	//2. Enable the IRQ of TIM6
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003690:	2036      	movs	r0, #54	; 0x36
 8003692:	f7fd fd72 	bl	800117a <HAL_NVIC_EnableIRQ>

	//3. Setup the priority of TIM6_DAC_IRQn
	HAL_NVIC_SetPriority(TIM6_DAC_IRQn,15,0);
 8003696:	2200      	movs	r2, #0
 8003698:	210f      	movs	r1, #15
 800369a:	2036      	movs	r0, #54	; 0x36
 800369c:	f7fd fd51 	bl	8001142 <HAL_NVIC_SetPriority>
}
 80036a0:	bf00      	nop
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40023800 	.word	0x40023800

080036ac <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b088      	sub	sp, #32
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef tim2ch1_gpio;
	//1. Enable the peripheral clock for the timer2 and GPIOA
	__HAL_RCC_TIM2_CLK_ENABLE();
 80036b4:	2300      	movs	r3, #0
 80036b6:	60bb      	str	r3, [r7, #8]
 80036b8:	4b11      	ldr	r3, [pc, #68]	; (8003700 <HAL_TIM_IC_MspInit+0x54>)
 80036ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036bc:	4a10      	ldr	r2, [pc, #64]	; (8003700 <HAL_TIM_IC_MspInit+0x54>)
 80036be:	f043 0301 	orr.w	r3, r3, #1
 80036c2:	6413      	str	r3, [r2, #64]	; 0x40
 80036c4:	4b0e      	ldr	r3, [pc, #56]	; (8003700 <HAL_TIM_IC_MspInit+0x54>)
 80036c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	60bb      	str	r3, [r7, #8]
 80036ce:	68bb      	ldr	r3, [r7, #8]
	//__HAL_RCC_GPIOA_CLK_ENABLE();

	//2. Configure a gpio to behave as timer2 channel 1
	tim2ch1_gpio.Pin = GPIO_PIN_0;
 80036d0:	2301      	movs	r3, #1
 80036d2:	60fb      	str	r3, [r7, #12]
	tim2ch1_gpio.Mode= GPIO_MODE_AF_PP;
 80036d4:	2302      	movs	r3, #2
 80036d6:	613b      	str	r3, [r7, #16]
	tim2ch1_gpio.Alternate = GPIO_AF1_TIM2;
 80036d8:	2301      	movs	r3, #1
 80036da:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &tim2ch1_gpio);
 80036dc:	f107 030c 	add.w	r3, r7, #12
 80036e0:	4619      	mov	r1, r3
 80036e2:	4808      	ldr	r0, [pc, #32]	; (8003704 <HAL_TIM_IC_MspInit+0x58>)
 80036e4:	f7fd fd8e 	bl	8001204 <HAL_GPIO_Init>

	//3. nvic settings
	HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 80036e8:	2200      	movs	r2, #0
 80036ea:	210f      	movs	r1, #15
 80036ec:	201c      	movs	r0, #28
 80036ee:	f7fd fd28 	bl	8001142 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80036f2:	201c      	movs	r0, #28
 80036f4:	f7fd fd41 	bl	800117a <HAL_NVIC_EnableIRQ>

}
 80036f8:	bf00      	nop
 80036fa:	3720      	adds	r7, #32
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40023800 	.word	0x40023800
 8003704:	40020000 	.word	0x40020000

08003708 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800370c:	4b08      	ldr	r3, [pc, #32]	; (8003730 <SystemInit+0x28>)
 800370e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003712:	4a07      	ldr	r2, [pc, #28]	; (8003730 <SystemInit+0x28>)
 8003714:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003718:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800371c:	4b04      	ldr	r3, [pc, #16]	; (8003730 <SystemInit+0x28>)
 800371e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003722:	609a      	str	r2, [r3, #8]
#endif
}
 8003724:	bf00      	nop
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	e000ed00 	.word	0xe000ed00

08003734 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003734:	f8df d034 	ldr.w	sp, [pc, #52]	; 800376c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003738:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800373a:	e003      	b.n	8003744 <LoopCopyDataInit>

0800373c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800373c:	4b0c      	ldr	r3, [pc, #48]	; (8003770 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800373e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003740:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003742:	3104      	adds	r1, #4

08003744 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003744:	480b      	ldr	r0, [pc, #44]	; (8003774 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003746:	4b0c      	ldr	r3, [pc, #48]	; (8003778 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003748:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800374a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800374c:	d3f6      	bcc.n	800373c <CopyDataInit>
  ldr  r2, =_sbss
 800374e:	4a0b      	ldr	r2, [pc, #44]	; (800377c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003750:	e002      	b.n	8003758 <LoopFillZerobss>

08003752 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003752:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003754:	f842 3b04 	str.w	r3, [r2], #4

08003758 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003758:	4b09      	ldr	r3, [pc, #36]	; (8003780 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800375a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800375c:	d3f9      	bcc.n	8003752 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800375e:	f7ff ffd3 	bl	8003708 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003762:	f000 f811 	bl	8003788 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003766:	f7ff fcd5 	bl	8003114 <main>
  bx  lr    
 800376a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800376c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003770:	08005b60 	.word	0x08005b60
  ldr  r0, =_sdata
 8003774:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003778:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 800377c:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8003780:	200002d8 	.word	0x200002d8

08003784 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003784:	e7fe      	b.n	8003784 <ADC_IRQHandler>
	...

08003788 <__libc_init_array>:
 8003788:	b570      	push	{r4, r5, r6, lr}
 800378a:	4e0d      	ldr	r6, [pc, #52]	; (80037c0 <__libc_init_array+0x38>)
 800378c:	4c0d      	ldr	r4, [pc, #52]	; (80037c4 <__libc_init_array+0x3c>)
 800378e:	1ba4      	subs	r4, r4, r6
 8003790:	10a4      	asrs	r4, r4, #2
 8003792:	2500      	movs	r5, #0
 8003794:	42a5      	cmp	r5, r4
 8003796:	d109      	bne.n	80037ac <__libc_init_array+0x24>
 8003798:	4e0b      	ldr	r6, [pc, #44]	; (80037c8 <__libc_init_array+0x40>)
 800379a:	4c0c      	ldr	r4, [pc, #48]	; (80037cc <__libc_init_array+0x44>)
 800379c:	f002 f86a 	bl	8005874 <_init>
 80037a0:	1ba4      	subs	r4, r4, r6
 80037a2:	10a4      	asrs	r4, r4, #2
 80037a4:	2500      	movs	r5, #0
 80037a6:	42a5      	cmp	r5, r4
 80037a8:	d105      	bne.n	80037b6 <__libc_init_array+0x2e>
 80037aa:	bd70      	pop	{r4, r5, r6, pc}
 80037ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037b0:	4798      	blx	r3
 80037b2:	3501      	adds	r5, #1
 80037b4:	e7ee      	b.n	8003794 <__libc_init_array+0xc>
 80037b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037ba:	4798      	blx	r3
 80037bc:	3501      	adds	r5, #1
 80037be:	e7f2      	b.n	80037a6 <__libc_init_array+0x1e>
 80037c0:	08005b58 	.word	0x08005b58
 80037c4:	08005b58 	.word	0x08005b58
 80037c8:	08005b58 	.word	0x08005b58
 80037cc:	08005b5c 	.word	0x08005b5c

080037d0 <memset>:
 80037d0:	4402      	add	r2, r0
 80037d2:	4603      	mov	r3, r0
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d100      	bne.n	80037da <memset+0xa>
 80037d8:	4770      	bx	lr
 80037da:	f803 1b01 	strb.w	r1, [r3], #1
 80037de:	e7f9      	b.n	80037d4 <memset+0x4>

080037e0 <__cvt>:
 80037e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037e4:	ec55 4b10 	vmov	r4, r5, d0
 80037e8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80037ea:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80037ee:	2d00      	cmp	r5, #0
 80037f0:	460e      	mov	r6, r1
 80037f2:	4691      	mov	r9, r2
 80037f4:	4619      	mov	r1, r3
 80037f6:	bfb8      	it	lt
 80037f8:	4622      	movlt	r2, r4
 80037fa:	462b      	mov	r3, r5
 80037fc:	f027 0720 	bic.w	r7, r7, #32
 8003800:	bfbb      	ittet	lt
 8003802:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003806:	461d      	movlt	r5, r3
 8003808:	2300      	movge	r3, #0
 800380a:	232d      	movlt	r3, #45	; 0x2d
 800380c:	bfb8      	it	lt
 800380e:	4614      	movlt	r4, r2
 8003810:	2f46      	cmp	r7, #70	; 0x46
 8003812:	700b      	strb	r3, [r1, #0]
 8003814:	d004      	beq.n	8003820 <__cvt+0x40>
 8003816:	2f45      	cmp	r7, #69	; 0x45
 8003818:	d100      	bne.n	800381c <__cvt+0x3c>
 800381a:	3601      	adds	r6, #1
 800381c:	2102      	movs	r1, #2
 800381e:	e000      	b.n	8003822 <__cvt+0x42>
 8003820:	2103      	movs	r1, #3
 8003822:	ab03      	add	r3, sp, #12
 8003824:	9301      	str	r3, [sp, #4]
 8003826:	ab02      	add	r3, sp, #8
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	4632      	mov	r2, r6
 800382c:	4653      	mov	r3, sl
 800382e:	ec45 4b10 	vmov	d0, r4, r5
 8003832:	f000 fcdd 	bl	80041f0 <_dtoa_r>
 8003836:	2f47      	cmp	r7, #71	; 0x47
 8003838:	4680      	mov	r8, r0
 800383a:	d102      	bne.n	8003842 <__cvt+0x62>
 800383c:	f019 0f01 	tst.w	r9, #1
 8003840:	d026      	beq.n	8003890 <__cvt+0xb0>
 8003842:	2f46      	cmp	r7, #70	; 0x46
 8003844:	eb08 0906 	add.w	r9, r8, r6
 8003848:	d111      	bne.n	800386e <__cvt+0x8e>
 800384a:	f898 3000 	ldrb.w	r3, [r8]
 800384e:	2b30      	cmp	r3, #48	; 0x30
 8003850:	d10a      	bne.n	8003868 <__cvt+0x88>
 8003852:	2200      	movs	r2, #0
 8003854:	2300      	movs	r3, #0
 8003856:	4620      	mov	r0, r4
 8003858:	4629      	mov	r1, r5
 800385a:	f7fd f935 	bl	8000ac8 <__aeabi_dcmpeq>
 800385e:	b918      	cbnz	r0, 8003868 <__cvt+0x88>
 8003860:	f1c6 0601 	rsb	r6, r6, #1
 8003864:	f8ca 6000 	str.w	r6, [sl]
 8003868:	f8da 3000 	ldr.w	r3, [sl]
 800386c:	4499      	add	r9, r3
 800386e:	2200      	movs	r2, #0
 8003870:	2300      	movs	r3, #0
 8003872:	4620      	mov	r0, r4
 8003874:	4629      	mov	r1, r5
 8003876:	f7fd f927 	bl	8000ac8 <__aeabi_dcmpeq>
 800387a:	b938      	cbnz	r0, 800388c <__cvt+0xac>
 800387c:	2230      	movs	r2, #48	; 0x30
 800387e:	9b03      	ldr	r3, [sp, #12]
 8003880:	454b      	cmp	r3, r9
 8003882:	d205      	bcs.n	8003890 <__cvt+0xb0>
 8003884:	1c59      	adds	r1, r3, #1
 8003886:	9103      	str	r1, [sp, #12]
 8003888:	701a      	strb	r2, [r3, #0]
 800388a:	e7f8      	b.n	800387e <__cvt+0x9e>
 800388c:	f8cd 900c 	str.w	r9, [sp, #12]
 8003890:	9b03      	ldr	r3, [sp, #12]
 8003892:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003894:	eba3 0308 	sub.w	r3, r3, r8
 8003898:	4640      	mov	r0, r8
 800389a:	6013      	str	r3, [r2, #0]
 800389c:	b004      	add	sp, #16
 800389e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080038a2 <__exponent>:
 80038a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038a4:	2900      	cmp	r1, #0
 80038a6:	4604      	mov	r4, r0
 80038a8:	bfba      	itte	lt
 80038aa:	4249      	neglt	r1, r1
 80038ac:	232d      	movlt	r3, #45	; 0x2d
 80038ae:	232b      	movge	r3, #43	; 0x2b
 80038b0:	2909      	cmp	r1, #9
 80038b2:	f804 2b02 	strb.w	r2, [r4], #2
 80038b6:	7043      	strb	r3, [r0, #1]
 80038b8:	dd20      	ble.n	80038fc <__exponent+0x5a>
 80038ba:	f10d 0307 	add.w	r3, sp, #7
 80038be:	461f      	mov	r7, r3
 80038c0:	260a      	movs	r6, #10
 80038c2:	fb91 f5f6 	sdiv	r5, r1, r6
 80038c6:	fb06 1115 	mls	r1, r6, r5, r1
 80038ca:	3130      	adds	r1, #48	; 0x30
 80038cc:	2d09      	cmp	r5, #9
 80038ce:	f803 1c01 	strb.w	r1, [r3, #-1]
 80038d2:	f103 32ff 	add.w	r2, r3, #4294967295
 80038d6:	4629      	mov	r1, r5
 80038d8:	dc09      	bgt.n	80038ee <__exponent+0x4c>
 80038da:	3130      	adds	r1, #48	; 0x30
 80038dc:	3b02      	subs	r3, #2
 80038de:	f802 1c01 	strb.w	r1, [r2, #-1]
 80038e2:	42bb      	cmp	r3, r7
 80038e4:	4622      	mov	r2, r4
 80038e6:	d304      	bcc.n	80038f2 <__exponent+0x50>
 80038e8:	1a10      	subs	r0, r2, r0
 80038ea:	b003      	add	sp, #12
 80038ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038ee:	4613      	mov	r3, r2
 80038f0:	e7e7      	b.n	80038c2 <__exponent+0x20>
 80038f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80038f6:	f804 2b01 	strb.w	r2, [r4], #1
 80038fa:	e7f2      	b.n	80038e2 <__exponent+0x40>
 80038fc:	2330      	movs	r3, #48	; 0x30
 80038fe:	4419      	add	r1, r3
 8003900:	7083      	strb	r3, [r0, #2]
 8003902:	1d02      	adds	r2, r0, #4
 8003904:	70c1      	strb	r1, [r0, #3]
 8003906:	e7ef      	b.n	80038e8 <__exponent+0x46>

08003908 <_printf_float>:
 8003908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800390c:	b08d      	sub	sp, #52	; 0x34
 800390e:	460c      	mov	r4, r1
 8003910:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8003914:	4616      	mov	r6, r2
 8003916:	461f      	mov	r7, r3
 8003918:	4605      	mov	r5, r0
 800391a:	f001 fa21 	bl	8004d60 <_localeconv_r>
 800391e:	6803      	ldr	r3, [r0, #0]
 8003920:	9304      	str	r3, [sp, #16]
 8003922:	4618      	mov	r0, r3
 8003924:	f7fc fc54 	bl	80001d0 <strlen>
 8003928:	2300      	movs	r3, #0
 800392a:	930a      	str	r3, [sp, #40]	; 0x28
 800392c:	f8d8 3000 	ldr.w	r3, [r8]
 8003930:	9005      	str	r0, [sp, #20]
 8003932:	3307      	adds	r3, #7
 8003934:	f023 0307 	bic.w	r3, r3, #7
 8003938:	f103 0208 	add.w	r2, r3, #8
 800393c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003940:	f8d4 b000 	ldr.w	fp, [r4]
 8003944:	f8c8 2000 	str.w	r2, [r8]
 8003948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003950:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003954:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003958:	9307      	str	r3, [sp, #28]
 800395a:	f8cd 8018 	str.w	r8, [sp, #24]
 800395e:	f04f 32ff 	mov.w	r2, #4294967295
 8003962:	4ba7      	ldr	r3, [pc, #668]	; (8003c00 <_printf_float+0x2f8>)
 8003964:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003968:	f7fd f8e0 	bl	8000b2c <__aeabi_dcmpun>
 800396c:	bb70      	cbnz	r0, 80039cc <_printf_float+0xc4>
 800396e:	f04f 32ff 	mov.w	r2, #4294967295
 8003972:	4ba3      	ldr	r3, [pc, #652]	; (8003c00 <_printf_float+0x2f8>)
 8003974:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003978:	f7fd f8ba 	bl	8000af0 <__aeabi_dcmple>
 800397c:	bb30      	cbnz	r0, 80039cc <_printf_float+0xc4>
 800397e:	2200      	movs	r2, #0
 8003980:	2300      	movs	r3, #0
 8003982:	4640      	mov	r0, r8
 8003984:	4649      	mov	r1, r9
 8003986:	f7fd f8a9 	bl	8000adc <__aeabi_dcmplt>
 800398a:	b110      	cbz	r0, 8003992 <_printf_float+0x8a>
 800398c:	232d      	movs	r3, #45	; 0x2d
 800398e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003992:	4a9c      	ldr	r2, [pc, #624]	; (8003c04 <_printf_float+0x2fc>)
 8003994:	4b9c      	ldr	r3, [pc, #624]	; (8003c08 <_printf_float+0x300>)
 8003996:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800399a:	bf8c      	ite	hi
 800399c:	4690      	movhi	r8, r2
 800399e:	4698      	movls	r8, r3
 80039a0:	2303      	movs	r3, #3
 80039a2:	f02b 0204 	bic.w	r2, fp, #4
 80039a6:	6123      	str	r3, [r4, #16]
 80039a8:	6022      	str	r2, [r4, #0]
 80039aa:	f04f 0900 	mov.w	r9, #0
 80039ae:	9700      	str	r7, [sp, #0]
 80039b0:	4633      	mov	r3, r6
 80039b2:	aa0b      	add	r2, sp, #44	; 0x2c
 80039b4:	4621      	mov	r1, r4
 80039b6:	4628      	mov	r0, r5
 80039b8:	f000 f9e6 	bl	8003d88 <_printf_common>
 80039bc:	3001      	adds	r0, #1
 80039be:	f040 808d 	bne.w	8003adc <_printf_float+0x1d4>
 80039c2:	f04f 30ff 	mov.w	r0, #4294967295
 80039c6:	b00d      	add	sp, #52	; 0x34
 80039c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039cc:	4642      	mov	r2, r8
 80039ce:	464b      	mov	r3, r9
 80039d0:	4640      	mov	r0, r8
 80039d2:	4649      	mov	r1, r9
 80039d4:	f7fd f8aa 	bl	8000b2c <__aeabi_dcmpun>
 80039d8:	b110      	cbz	r0, 80039e0 <_printf_float+0xd8>
 80039da:	4a8c      	ldr	r2, [pc, #560]	; (8003c0c <_printf_float+0x304>)
 80039dc:	4b8c      	ldr	r3, [pc, #560]	; (8003c10 <_printf_float+0x308>)
 80039de:	e7da      	b.n	8003996 <_printf_float+0x8e>
 80039e0:	6861      	ldr	r1, [r4, #4]
 80039e2:	1c4b      	adds	r3, r1, #1
 80039e4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80039e8:	a80a      	add	r0, sp, #40	; 0x28
 80039ea:	d13e      	bne.n	8003a6a <_printf_float+0x162>
 80039ec:	2306      	movs	r3, #6
 80039ee:	6063      	str	r3, [r4, #4]
 80039f0:	2300      	movs	r3, #0
 80039f2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80039f6:	ab09      	add	r3, sp, #36	; 0x24
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	ec49 8b10 	vmov	d0, r8, r9
 80039fe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003a02:	6022      	str	r2, [r4, #0]
 8003a04:	f8cd a004 	str.w	sl, [sp, #4]
 8003a08:	6861      	ldr	r1, [r4, #4]
 8003a0a:	4628      	mov	r0, r5
 8003a0c:	f7ff fee8 	bl	80037e0 <__cvt>
 8003a10:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8003a14:	2b47      	cmp	r3, #71	; 0x47
 8003a16:	4680      	mov	r8, r0
 8003a18:	d109      	bne.n	8003a2e <_printf_float+0x126>
 8003a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a1c:	1cd8      	adds	r0, r3, #3
 8003a1e:	db02      	blt.n	8003a26 <_printf_float+0x11e>
 8003a20:	6862      	ldr	r2, [r4, #4]
 8003a22:	4293      	cmp	r3, r2
 8003a24:	dd47      	ble.n	8003ab6 <_printf_float+0x1ae>
 8003a26:	f1aa 0a02 	sub.w	sl, sl, #2
 8003a2a:	fa5f fa8a 	uxtb.w	sl, sl
 8003a2e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003a32:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003a34:	d824      	bhi.n	8003a80 <_printf_float+0x178>
 8003a36:	3901      	subs	r1, #1
 8003a38:	4652      	mov	r2, sl
 8003a3a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003a3e:	9109      	str	r1, [sp, #36]	; 0x24
 8003a40:	f7ff ff2f 	bl	80038a2 <__exponent>
 8003a44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003a46:	1813      	adds	r3, r2, r0
 8003a48:	2a01      	cmp	r2, #1
 8003a4a:	4681      	mov	r9, r0
 8003a4c:	6123      	str	r3, [r4, #16]
 8003a4e:	dc02      	bgt.n	8003a56 <_printf_float+0x14e>
 8003a50:	6822      	ldr	r2, [r4, #0]
 8003a52:	07d1      	lsls	r1, r2, #31
 8003a54:	d501      	bpl.n	8003a5a <_printf_float+0x152>
 8003a56:	3301      	adds	r3, #1
 8003a58:	6123      	str	r3, [r4, #16]
 8003a5a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0a5      	beq.n	80039ae <_printf_float+0xa6>
 8003a62:	232d      	movs	r3, #45	; 0x2d
 8003a64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a68:	e7a1      	b.n	80039ae <_printf_float+0xa6>
 8003a6a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8003a6e:	f000 8177 	beq.w	8003d60 <_printf_float+0x458>
 8003a72:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003a76:	d1bb      	bne.n	80039f0 <_printf_float+0xe8>
 8003a78:	2900      	cmp	r1, #0
 8003a7a:	d1b9      	bne.n	80039f0 <_printf_float+0xe8>
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e7b6      	b.n	80039ee <_printf_float+0xe6>
 8003a80:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8003a84:	d119      	bne.n	8003aba <_printf_float+0x1b2>
 8003a86:	2900      	cmp	r1, #0
 8003a88:	6863      	ldr	r3, [r4, #4]
 8003a8a:	dd0c      	ble.n	8003aa6 <_printf_float+0x19e>
 8003a8c:	6121      	str	r1, [r4, #16]
 8003a8e:	b913      	cbnz	r3, 8003a96 <_printf_float+0x18e>
 8003a90:	6822      	ldr	r2, [r4, #0]
 8003a92:	07d2      	lsls	r2, r2, #31
 8003a94:	d502      	bpl.n	8003a9c <_printf_float+0x194>
 8003a96:	3301      	adds	r3, #1
 8003a98:	440b      	add	r3, r1
 8003a9a:	6123      	str	r3, [r4, #16]
 8003a9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a9e:	65a3      	str	r3, [r4, #88]	; 0x58
 8003aa0:	f04f 0900 	mov.w	r9, #0
 8003aa4:	e7d9      	b.n	8003a5a <_printf_float+0x152>
 8003aa6:	b913      	cbnz	r3, 8003aae <_printf_float+0x1a6>
 8003aa8:	6822      	ldr	r2, [r4, #0]
 8003aaa:	07d0      	lsls	r0, r2, #31
 8003aac:	d501      	bpl.n	8003ab2 <_printf_float+0x1aa>
 8003aae:	3302      	adds	r3, #2
 8003ab0:	e7f3      	b.n	8003a9a <_printf_float+0x192>
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e7f1      	b.n	8003a9a <_printf_float+0x192>
 8003ab6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8003aba:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	db05      	blt.n	8003ace <_printf_float+0x1c6>
 8003ac2:	6822      	ldr	r2, [r4, #0]
 8003ac4:	6123      	str	r3, [r4, #16]
 8003ac6:	07d1      	lsls	r1, r2, #31
 8003ac8:	d5e8      	bpl.n	8003a9c <_printf_float+0x194>
 8003aca:	3301      	adds	r3, #1
 8003acc:	e7e5      	b.n	8003a9a <_printf_float+0x192>
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	bfd4      	ite	le
 8003ad2:	f1c3 0302 	rsble	r3, r3, #2
 8003ad6:	2301      	movgt	r3, #1
 8003ad8:	4413      	add	r3, r2
 8003ada:	e7de      	b.n	8003a9a <_printf_float+0x192>
 8003adc:	6823      	ldr	r3, [r4, #0]
 8003ade:	055a      	lsls	r2, r3, #21
 8003ae0:	d407      	bmi.n	8003af2 <_printf_float+0x1ea>
 8003ae2:	6923      	ldr	r3, [r4, #16]
 8003ae4:	4642      	mov	r2, r8
 8003ae6:	4631      	mov	r1, r6
 8003ae8:	4628      	mov	r0, r5
 8003aea:	47b8      	blx	r7
 8003aec:	3001      	adds	r0, #1
 8003aee:	d12b      	bne.n	8003b48 <_printf_float+0x240>
 8003af0:	e767      	b.n	80039c2 <_printf_float+0xba>
 8003af2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003af6:	f240 80dc 	bls.w	8003cb2 <_printf_float+0x3aa>
 8003afa:	2200      	movs	r2, #0
 8003afc:	2300      	movs	r3, #0
 8003afe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003b02:	f7fc ffe1 	bl	8000ac8 <__aeabi_dcmpeq>
 8003b06:	2800      	cmp	r0, #0
 8003b08:	d033      	beq.n	8003b72 <_printf_float+0x26a>
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	4a41      	ldr	r2, [pc, #260]	; (8003c14 <_printf_float+0x30c>)
 8003b0e:	4631      	mov	r1, r6
 8003b10:	4628      	mov	r0, r5
 8003b12:	47b8      	blx	r7
 8003b14:	3001      	adds	r0, #1
 8003b16:	f43f af54 	beq.w	80039c2 <_printf_float+0xba>
 8003b1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	db02      	blt.n	8003b28 <_printf_float+0x220>
 8003b22:	6823      	ldr	r3, [r4, #0]
 8003b24:	07d8      	lsls	r0, r3, #31
 8003b26:	d50f      	bpl.n	8003b48 <_printf_float+0x240>
 8003b28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b2c:	4631      	mov	r1, r6
 8003b2e:	4628      	mov	r0, r5
 8003b30:	47b8      	blx	r7
 8003b32:	3001      	adds	r0, #1
 8003b34:	f43f af45 	beq.w	80039c2 <_printf_float+0xba>
 8003b38:	f04f 0800 	mov.w	r8, #0
 8003b3c:	f104 091a 	add.w	r9, r4, #26
 8003b40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b42:	3b01      	subs	r3, #1
 8003b44:	4543      	cmp	r3, r8
 8003b46:	dc09      	bgt.n	8003b5c <_printf_float+0x254>
 8003b48:	6823      	ldr	r3, [r4, #0]
 8003b4a:	079b      	lsls	r3, r3, #30
 8003b4c:	f100 8103 	bmi.w	8003d56 <_printf_float+0x44e>
 8003b50:	68e0      	ldr	r0, [r4, #12]
 8003b52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b54:	4298      	cmp	r0, r3
 8003b56:	bfb8      	it	lt
 8003b58:	4618      	movlt	r0, r3
 8003b5a:	e734      	b.n	80039c6 <_printf_float+0xbe>
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	464a      	mov	r2, r9
 8003b60:	4631      	mov	r1, r6
 8003b62:	4628      	mov	r0, r5
 8003b64:	47b8      	blx	r7
 8003b66:	3001      	adds	r0, #1
 8003b68:	f43f af2b 	beq.w	80039c2 <_printf_float+0xba>
 8003b6c:	f108 0801 	add.w	r8, r8, #1
 8003b70:	e7e6      	b.n	8003b40 <_printf_float+0x238>
 8003b72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	dc2b      	bgt.n	8003bd0 <_printf_float+0x2c8>
 8003b78:	2301      	movs	r3, #1
 8003b7a:	4a26      	ldr	r2, [pc, #152]	; (8003c14 <_printf_float+0x30c>)
 8003b7c:	4631      	mov	r1, r6
 8003b7e:	4628      	mov	r0, r5
 8003b80:	47b8      	blx	r7
 8003b82:	3001      	adds	r0, #1
 8003b84:	f43f af1d 	beq.w	80039c2 <_printf_float+0xba>
 8003b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b8a:	b923      	cbnz	r3, 8003b96 <_printf_float+0x28e>
 8003b8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b8e:	b913      	cbnz	r3, 8003b96 <_printf_float+0x28e>
 8003b90:	6823      	ldr	r3, [r4, #0]
 8003b92:	07d9      	lsls	r1, r3, #31
 8003b94:	d5d8      	bpl.n	8003b48 <_printf_float+0x240>
 8003b96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b9a:	4631      	mov	r1, r6
 8003b9c:	4628      	mov	r0, r5
 8003b9e:	47b8      	blx	r7
 8003ba0:	3001      	adds	r0, #1
 8003ba2:	f43f af0e 	beq.w	80039c2 <_printf_float+0xba>
 8003ba6:	f04f 0900 	mov.w	r9, #0
 8003baa:	f104 0a1a 	add.w	sl, r4, #26
 8003bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bb0:	425b      	negs	r3, r3
 8003bb2:	454b      	cmp	r3, r9
 8003bb4:	dc01      	bgt.n	8003bba <_printf_float+0x2b2>
 8003bb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003bb8:	e794      	b.n	8003ae4 <_printf_float+0x1dc>
 8003bba:	2301      	movs	r3, #1
 8003bbc:	4652      	mov	r2, sl
 8003bbe:	4631      	mov	r1, r6
 8003bc0:	4628      	mov	r0, r5
 8003bc2:	47b8      	blx	r7
 8003bc4:	3001      	adds	r0, #1
 8003bc6:	f43f aefc 	beq.w	80039c2 <_printf_float+0xba>
 8003bca:	f109 0901 	add.w	r9, r9, #1
 8003bce:	e7ee      	b.n	8003bae <_printf_float+0x2a6>
 8003bd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003bd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	bfa8      	it	ge
 8003bd8:	461a      	movge	r2, r3
 8003bda:	2a00      	cmp	r2, #0
 8003bdc:	4691      	mov	r9, r2
 8003bde:	dd07      	ble.n	8003bf0 <_printf_float+0x2e8>
 8003be0:	4613      	mov	r3, r2
 8003be2:	4631      	mov	r1, r6
 8003be4:	4642      	mov	r2, r8
 8003be6:	4628      	mov	r0, r5
 8003be8:	47b8      	blx	r7
 8003bea:	3001      	adds	r0, #1
 8003bec:	f43f aee9 	beq.w	80039c2 <_printf_float+0xba>
 8003bf0:	f104 031a 	add.w	r3, r4, #26
 8003bf4:	f04f 0b00 	mov.w	fp, #0
 8003bf8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003bfc:	9306      	str	r3, [sp, #24]
 8003bfe:	e015      	b.n	8003c2c <_printf_float+0x324>
 8003c00:	7fefffff 	.word	0x7fefffff
 8003c04:	080058f8 	.word	0x080058f8
 8003c08:	080058f4 	.word	0x080058f4
 8003c0c:	08005900 	.word	0x08005900
 8003c10:	080058fc 	.word	0x080058fc
 8003c14:	08005904 	.word	0x08005904
 8003c18:	2301      	movs	r3, #1
 8003c1a:	9a06      	ldr	r2, [sp, #24]
 8003c1c:	4631      	mov	r1, r6
 8003c1e:	4628      	mov	r0, r5
 8003c20:	47b8      	blx	r7
 8003c22:	3001      	adds	r0, #1
 8003c24:	f43f aecd 	beq.w	80039c2 <_printf_float+0xba>
 8003c28:	f10b 0b01 	add.w	fp, fp, #1
 8003c2c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003c30:	ebaa 0309 	sub.w	r3, sl, r9
 8003c34:	455b      	cmp	r3, fp
 8003c36:	dcef      	bgt.n	8003c18 <_printf_float+0x310>
 8003c38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	44d0      	add	r8, sl
 8003c40:	db15      	blt.n	8003c6e <_printf_float+0x366>
 8003c42:	6823      	ldr	r3, [r4, #0]
 8003c44:	07da      	lsls	r2, r3, #31
 8003c46:	d412      	bmi.n	8003c6e <_printf_float+0x366>
 8003c48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003c4c:	eba3 020a 	sub.w	r2, r3, sl
 8003c50:	eba3 0a01 	sub.w	sl, r3, r1
 8003c54:	4592      	cmp	sl, r2
 8003c56:	bfa8      	it	ge
 8003c58:	4692      	movge	sl, r2
 8003c5a:	f1ba 0f00 	cmp.w	sl, #0
 8003c5e:	dc0e      	bgt.n	8003c7e <_printf_float+0x376>
 8003c60:	f04f 0800 	mov.w	r8, #0
 8003c64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003c68:	f104 091a 	add.w	r9, r4, #26
 8003c6c:	e019      	b.n	8003ca2 <_printf_float+0x39a>
 8003c6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003c72:	4631      	mov	r1, r6
 8003c74:	4628      	mov	r0, r5
 8003c76:	47b8      	blx	r7
 8003c78:	3001      	adds	r0, #1
 8003c7a:	d1e5      	bne.n	8003c48 <_printf_float+0x340>
 8003c7c:	e6a1      	b.n	80039c2 <_printf_float+0xba>
 8003c7e:	4653      	mov	r3, sl
 8003c80:	4642      	mov	r2, r8
 8003c82:	4631      	mov	r1, r6
 8003c84:	4628      	mov	r0, r5
 8003c86:	47b8      	blx	r7
 8003c88:	3001      	adds	r0, #1
 8003c8a:	d1e9      	bne.n	8003c60 <_printf_float+0x358>
 8003c8c:	e699      	b.n	80039c2 <_printf_float+0xba>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	464a      	mov	r2, r9
 8003c92:	4631      	mov	r1, r6
 8003c94:	4628      	mov	r0, r5
 8003c96:	47b8      	blx	r7
 8003c98:	3001      	adds	r0, #1
 8003c9a:	f43f ae92 	beq.w	80039c2 <_printf_float+0xba>
 8003c9e:	f108 0801 	add.w	r8, r8, #1
 8003ca2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003ca6:	1a9b      	subs	r3, r3, r2
 8003ca8:	eba3 030a 	sub.w	r3, r3, sl
 8003cac:	4543      	cmp	r3, r8
 8003cae:	dcee      	bgt.n	8003c8e <_printf_float+0x386>
 8003cb0:	e74a      	b.n	8003b48 <_printf_float+0x240>
 8003cb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003cb4:	2a01      	cmp	r2, #1
 8003cb6:	dc01      	bgt.n	8003cbc <_printf_float+0x3b4>
 8003cb8:	07db      	lsls	r3, r3, #31
 8003cba:	d53a      	bpl.n	8003d32 <_printf_float+0x42a>
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	4642      	mov	r2, r8
 8003cc0:	4631      	mov	r1, r6
 8003cc2:	4628      	mov	r0, r5
 8003cc4:	47b8      	blx	r7
 8003cc6:	3001      	adds	r0, #1
 8003cc8:	f43f ae7b 	beq.w	80039c2 <_printf_float+0xba>
 8003ccc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003cd0:	4631      	mov	r1, r6
 8003cd2:	4628      	mov	r0, r5
 8003cd4:	47b8      	blx	r7
 8003cd6:	3001      	adds	r0, #1
 8003cd8:	f108 0801 	add.w	r8, r8, #1
 8003cdc:	f43f ae71 	beq.w	80039c2 <_printf_float+0xba>
 8003ce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f103 3aff 	add.w	sl, r3, #4294967295
 8003ce8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003cec:	2300      	movs	r3, #0
 8003cee:	f7fc feeb 	bl	8000ac8 <__aeabi_dcmpeq>
 8003cf2:	b9c8      	cbnz	r0, 8003d28 <_printf_float+0x420>
 8003cf4:	4653      	mov	r3, sl
 8003cf6:	4642      	mov	r2, r8
 8003cf8:	4631      	mov	r1, r6
 8003cfa:	4628      	mov	r0, r5
 8003cfc:	47b8      	blx	r7
 8003cfe:	3001      	adds	r0, #1
 8003d00:	d10e      	bne.n	8003d20 <_printf_float+0x418>
 8003d02:	e65e      	b.n	80039c2 <_printf_float+0xba>
 8003d04:	2301      	movs	r3, #1
 8003d06:	4652      	mov	r2, sl
 8003d08:	4631      	mov	r1, r6
 8003d0a:	4628      	mov	r0, r5
 8003d0c:	47b8      	blx	r7
 8003d0e:	3001      	adds	r0, #1
 8003d10:	f43f ae57 	beq.w	80039c2 <_printf_float+0xba>
 8003d14:	f108 0801 	add.w	r8, r8, #1
 8003d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	4543      	cmp	r3, r8
 8003d1e:	dcf1      	bgt.n	8003d04 <_printf_float+0x3fc>
 8003d20:	464b      	mov	r3, r9
 8003d22:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003d26:	e6de      	b.n	8003ae6 <_printf_float+0x1de>
 8003d28:	f04f 0800 	mov.w	r8, #0
 8003d2c:	f104 0a1a 	add.w	sl, r4, #26
 8003d30:	e7f2      	b.n	8003d18 <_printf_float+0x410>
 8003d32:	2301      	movs	r3, #1
 8003d34:	e7df      	b.n	8003cf6 <_printf_float+0x3ee>
 8003d36:	2301      	movs	r3, #1
 8003d38:	464a      	mov	r2, r9
 8003d3a:	4631      	mov	r1, r6
 8003d3c:	4628      	mov	r0, r5
 8003d3e:	47b8      	blx	r7
 8003d40:	3001      	adds	r0, #1
 8003d42:	f43f ae3e 	beq.w	80039c2 <_printf_float+0xba>
 8003d46:	f108 0801 	add.w	r8, r8, #1
 8003d4a:	68e3      	ldr	r3, [r4, #12]
 8003d4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003d4e:	1a9b      	subs	r3, r3, r2
 8003d50:	4543      	cmp	r3, r8
 8003d52:	dcf0      	bgt.n	8003d36 <_printf_float+0x42e>
 8003d54:	e6fc      	b.n	8003b50 <_printf_float+0x248>
 8003d56:	f04f 0800 	mov.w	r8, #0
 8003d5a:	f104 0919 	add.w	r9, r4, #25
 8003d5e:	e7f4      	b.n	8003d4a <_printf_float+0x442>
 8003d60:	2900      	cmp	r1, #0
 8003d62:	f43f ae8b 	beq.w	8003a7c <_printf_float+0x174>
 8003d66:	2300      	movs	r3, #0
 8003d68:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003d6c:	ab09      	add	r3, sp, #36	; 0x24
 8003d6e:	9300      	str	r3, [sp, #0]
 8003d70:	ec49 8b10 	vmov	d0, r8, r9
 8003d74:	6022      	str	r2, [r4, #0]
 8003d76:	f8cd a004 	str.w	sl, [sp, #4]
 8003d7a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003d7e:	4628      	mov	r0, r5
 8003d80:	f7ff fd2e 	bl	80037e0 <__cvt>
 8003d84:	4680      	mov	r8, r0
 8003d86:	e648      	b.n	8003a1a <_printf_float+0x112>

08003d88 <_printf_common>:
 8003d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d8c:	4691      	mov	r9, r2
 8003d8e:	461f      	mov	r7, r3
 8003d90:	688a      	ldr	r2, [r1, #8]
 8003d92:	690b      	ldr	r3, [r1, #16]
 8003d94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	bfb8      	it	lt
 8003d9c:	4613      	movlt	r3, r2
 8003d9e:	f8c9 3000 	str.w	r3, [r9]
 8003da2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003da6:	4606      	mov	r6, r0
 8003da8:	460c      	mov	r4, r1
 8003daa:	b112      	cbz	r2, 8003db2 <_printf_common+0x2a>
 8003dac:	3301      	adds	r3, #1
 8003dae:	f8c9 3000 	str.w	r3, [r9]
 8003db2:	6823      	ldr	r3, [r4, #0]
 8003db4:	0699      	lsls	r1, r3, #26
 8003db6:	bf42      	ittt	mi
 8003db8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003dbc:	3302      	addmi	r3, #2
 8003dbe:	f8c9 3000 	strmi.w	r3, [r9]
 8003dc2:	6825      	ldr	r5, [r4, #0]
 8003dc4:	f015 0506 	ands.w	r5, r5, #6
 8003dc8:	d107      	bne.n	8003dda <_printf_common+0x52>
 8003dca:	f104 0a19 	add.w	sl, r4, #25
 8003dce:	68e3      	ldr	r3, [r4, #12]
 8003dd0:	f8d9 2000 	ldr.w	r2, [r9]
 8003dd4:	1a9b      	subs	r3, r3, r2
 8003dd6:	42ab      	cmp	r3, r5
 8003dd8:	dc28      	bgt.n	8003e2c <_printf_common+0xa4>
 8003dda:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003dde:	6822      	ldr	r2, [r4, #0]
 8003de0:	3300      	adds	r3, #0
 8003de2:	bf18      	it	ne
 8003de4:	2301      	movne	r3, #1
 8003de6:	0692      	lsls	r2, r2, #26
 8003de8:	d42d      	bmi.n	8003e46 <_printf_common+0xbe>
 8003dea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003dee:	4639      	mov	r1, r7
 8003df0:	4630      	mov	r0, r6
 8003df2:	47c0      	blx	r8
 8003df4:	3001      	adds	r0, #1
 8003df6:	d020      	beq.n	8003e3a <_printf_common+0xb2>
 8003df8:	6823      	ldr	r3, [r4, #0]
 8003dfa:	68e5      	ldr	r5, [r4, #12]
 8003dfc:	f8d9 2000 	ldr.w	r2, [r9]
 8003e00:	f003 0306 	and.w	r3, r3, #6
 8003e04:	2b04      	cmp	r3, #4
 8003e06:	bf08      	it	eq
 8003e08:	1aad      	subeq	r5, r5, r2
 8003e0a:	68a3      	ldr	r3, [r4, #8]
 8003e0c:	6922      	ldr	r2, [r4, #16]
 8003e0e:	bf0c      	ite	eq
 8003e10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e14:	2500      	movne	r5, #0
 8003e16:	4293      	cmp	r3, r2
 8003e18:	bfc4      	itt	gt
 8003e1a:	1a9b      	subgt	r3, r3, r2
 8003e1c:	18ed      	addgt	r5, r5, r3
 8003e1e:	f04f 0900 	mov.w	r9, #0
 8003e22:	341a      	adds	r4, #26
 8003e24:	454d      	cmp	r5, r9
 8003e26:	d11a      	bne.n	8003e5e <_printf_common+0xd6>
 8003e28:	2000      	movs	r0, #0
 8003e2a:	e008      	b.n	8003e3e <_printf_common+0xb6>
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	4652      	mov	r2, sl
 8003e30:	4639      	mov	r1, r7
 8003e32:	4630      	mov	r0, r6
 8003e34:	47c0      	blx	r8
 8003e36:	3001      	adds	r0, #1
 8003e38:	d103      	bne.n	8003e42 <_printf_common+0xba>
 8003e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e42:	3501      	adds	r5, #1
 8003e44:	e7c3      	b.n	8003dce <_printf_common+0x46>
 8003e46:	18e1      	adds	r1, r4, r3
 8003e48:	1c5a      	adds	r2, r3, #1
 8003e4a:	2030      	movs	r0, #48	; 0x30
 8003e4c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e50:	4422      	add	r2, r4
 8003e52:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e5a:	3302      	adds	r3, #2
 8003e5c:	e7c5      	b.n	8003dea <_printf_common+0x62>
 8003e5e:	2301      	movs	r3, #1
 8003e60:	4622      	mov	r2, r4
 8003e62:	4639      	mov	r1, r7
 8003e64:	4630      	mov	r0, r6
 8003e66:	47c0      	blx	r8
 8003e68:	3001      	adds	r0, #1
 8003e6a:	d0e6      	beq.n	8003e3a <_printf_common+0xb2>
 8003e6c:	f109 0901 	add.w	r9, r9, #1
 8003e70:	e7d8      	b.n	8003e24 <_printf_common+0x9c>
	...

08003e74 <_printf_i>:
 8003e74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e78:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003e7c:	460c      	mov	r4, r1
 8003e7e:	7e09      	ldrb	r1, [r1, #24]
 8003e80:	b085      	sub	sp, #20
 8003e82:	296e      	cmp	r1, #110	; 0x6e
 8003e84:	4617      	mov	r7, r2
 8003e86:	4606      	mov	r6, r0
 8003e88:	4698      	mov	r8, r3
 8003e8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003e8c:	f000 80b3 	beq.w	8003ff6 <_printf_i+0x182>
 8003e90:	d822      	bhi.n	8003ed8 <_printf_i+0x64>
 8003e92:	2963      	cmp	r1, #99	; 0x63
 8003e94:	d036      	beq.n	8003f04 <_printf_i+0x90>
 8003e96:	d80a      	bhi.n	8003eae <_printf_i+0x3a>
 8003e98:	2900      	cmp	r1, #0
 8003e9a:	f000 80b9 	beq.w	8004010 <_printf_i+0x19c>
 8003e9e:	2958      	cmp	r1, #88	; 0x58
 8003ea0:	f000 8083 	beq.w	8003faa <_printf_i+0x136>
 8003ea4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ea8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003eac:	e032      	b.n	8003f14 <_printf_i+0xa0>
 8003eae:	2964      	cmp	r1, #100	; 0x64
 8003eb0:	d001      	beq.n	8003eb6 <_printf_i+0x42>
 8003eb2:	2969      	cmp	r1, #105	; 0x69
 8003eb4:	d1f6      	bne.n	8003ea4 <_printf_i+0x30>
 8003eb6:	6820      	ldr	r0, [r4, #0]
 8003eb8:	6813      	ldr	r3, [r2, #0]
 8003eba:	0605      	lsls	r5, r0, #24
 8003ebc:	f103 0104 	add.w	r1, r3, #4
 8003ec0:	d52a      	bpl.n	8003f18 <_printf_i+0xa4>
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	6011      	str	r1, [r2, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	da03      	bge.n	8003ed2 <_printf_i+0x5e>
 8003eca:	222d      	movs	r2, #45	; 0x2d
 8003ecc:	425b      	negs	r3, r3
 8003ece:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003ed2:	486f      	ldr	r0, [pc, #444]	; (8004090 <_printf_i+0x21c>)
 8003ed4:	220a      	movs	r2, #10
 8003ed6:	e039      	b.n	8003f4c <_printf_i+0xd8>
 8003ed8:	2973      	cmp	r1, #115	; 0x73
 8003eda:	f000 809d 	beq.w	8004018 <_printf_i+0x1a4>
 8003ede:	d808      	bhi.n	8003ef2 <_printf_i+0x7e>
 8003ee0:	296f      	cmp	r1, #111	; 0x6f
 8003ee2:	d020      	beq.n	8003f26 <_printf_i+0xb2>
 8003ee4:	2970      	cmp	r1, #112	; 0x70
 8003ee6:	d1dd      	bne.n	8003ea4 <_printf_i+0x30>
 8003ee8:	6823      	ldr	r3, [r4, #0]
 8003eea:	f043 0320 	orr.w	r3, r3, #32
 8003eee:	6023      	str	r3, [r4, #0]
 8003ef0:	e003      	b.n	8003efa <_printf_i+0x86>
 8003ef2:	2975      	cmp	r1, #117	; 0x75
 8003ef4:	d017      	beq.n	8003f26 <_printf_i+0xb2>
 8003ef6:	2978      	cmp	r1, #120	; 0x78
 8003ef8:	d1d4      	bne.n	8003ea4 <_printf_i+0x30>
 8003efa:	2378      	movs	r3, #120	; 0x78
 8003efc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f00:	4864      	ldr	r0, [pc, #400]	; (8004094 <_printf_i+0x220>)
 8003f02:	e055      	b.n	8003fb0 <_printf_i+0x13c>
 8003f04:	6813      	ldr	r3, [r2, #0]
 8003f06:	1d19      	adds	r1, r3, #4
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	6011      	str	r1, [r2, #0]
 8003f0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f14:	2301      	movs	r3, #1
 8003f16:	e08c      	b.n	8004032 <_printf_i+0x1be>
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	6011      	str	r1, [r2, #0]
 8003f1c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f20:	bf18      	it	ne
 8003f22:	b21b      	sxthne	r3, r3
 8003f24:	e7cf      	b.n	8003ec6 <_printf_i+0x52>
 8003f26:	6813      	ldr	r3, [r2, #0]
 8003f28:	6825      	ldr	r5, [r4, #0]
 8003f2a:	1d18      	adds	r0, r3, #4
 8003f2c:	6010      	str	r0, [r2, #0]
 8003f2e:	0628      	lsls	r0, r5, #24
 8003f30:	d501      	bpl.n	8003f36 <_printf_i+0xc2>
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	e002      	b.n	8003f3c <_printf_i+0xc8>
 8003f36:	0668      	lsls	r0, r5, #25
 8003f38:	d5fb      	bpl.n	8003f32 <_printf_i+0xbe>
 8003f3a:	881b      	ldrh	r3, [r3, #0]
 8003f3c:	4854      	ldr	r0, [pc, #336]	; (8004090 <_printf_i+0x21c>)
 8003f3e:	296f      	cmp	r1, #111	; 0x6f
 8003f40:	bf14      	ite	ne
 8003f42:	220a      	movne	r2, #10
 8003f44:	2208      	moveq	r2, #8
 8003f46:	2100      	movs	r1, #0
 8003f48:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f4c:	6865      	ldr	r5, [r4, #4]
 8003f4e:	60a5      	str	r5, [r4, #8]
 8003f50:	2d00      	cmp	r5, #0
 8003f52:	f2c0 8095 	blt.w	8004080 <_printf_i+0x20c>
 8003f56:	6821      	ldr	r1, [r4, #0]
 8003f58:	f021 0104 	bic.w	r1, r1, #4
 8003f5c:	6021      	str	r1, [r4, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d13d      	bne.n	8003fde <_printf_i+0x16a>
 8003f62:	2d00      	cmp	r5, #0
 8003f64:	f040 808e 	bne.w	8004084 <_printf_i+0x210>
 8003f68:	4665      	mov	r5, ip
 8003f6a:	2a08      	cmp	r2, #8
 8003f6c:	d10b      	bne.n	8003f86 <_printf_i+0x112>
 8003f6e:	6823      	ldr	r3, [r4, #0]
 8003f70:	07db      	lsls	r3, r3, #31
 8003f72:	d508      	bpl.n	8003f86 <_printf_i+0x112>
 8003f74:	6923      	ldr	r3, [r4, #16]
 8003f76:	6862      	ldr	r2, [r4, #4]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	bfde      	ittt	le
 8003f7c:	2330      	movle	r3, #48	; 0x30
 8003f7e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f82:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003f86:	ebac 0305 	sub.w	r3, ip, r5
 8003f8a:	6123      	str	r3, [r4, #16]
 8003f8c:	f8cd 8000 	str.w	r8, [sp]
 8003f90:	463b      	mov	r3, r7
 8003f92:	aa03      	add	r2, sp, #12
 8003f94:	4621      	mov	r1, r4
 8003f96:	4630      	mov	r0, r6
 8003f98:	f7ff fef6 	bl	8003d88 <_printf_common>
 8003f9c:	3001      	adds	r0, #1
 8003f9e:	d14d      	bne.n	800403c <_printf_i+0x1c8>
 8003fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fa4:	b005      	add	sp, #20
 8003fa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003faa:	4839      	ldr	r0, [pc, #228]	; (8004090 <_printf_i+0x21c>)
 8003fac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003fb0:	6813      	ldr	r3, [r2, #0]
 8003fb2:	6821      	ldr	r1, [r4, #0]
 8003fb4:	1d1d      	adds	r5, r3, #4
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6015      	str	r5, [r2, #0]
 8003fba:	060a      	lsls	r2, r1, #24
 8003fbc:	d50b      	bpl.n	8003fd6 <_printf_i+0x162>
 8003fbe:	07ca      	lsls	r2, r1, #31
 8003fc0:	bf44      	itt	mi
 8003fc2:	f041 0120 	orrmi.w	r1, r1, #32
 8003fc6:	6021      	strmi	r1, [r4, #0]
 8003fc8:	b91b      	cbnz	r3, 8003fd2 <_printf_i+0x15e>
 8003fca:	6822      	ldr	r2, [r4, #0]
 8003fcc:	f022 0220 	bic.w	r2, r2, #32
 8003fd0:	6022      	str	r2, [r4, #0]
 8003fd2:	2210      	movs	r2, #16
 8003fd4:	e7b7      	b.n	8003f46 <_printf_i+0xd2>
 8003fd6:	064d      	lsls	r5, r1, #25
 8003fd8:	bf48      	it	mi
 8003fda:	b29b      	uxthmi	r3, r3
 8003fdc:	e7ef      	b.n	8003fbe <_printf_i+0x14a>
 8003fde:	4665      	mov	r5, ip
 8003fe0:	fbb3 f1f2 	udiv	r1, r3, r2
 8003fe4:	fb02 3311 	mls	r3, r2, r1, r3
 8003fe8:	5cc3      	ldrb	r3, [r0, r3]
 8003fea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003fee:	460b      	mov	r3, r1
 8003ff0:	2900      	cmp	r1, #0
 8003ff2:	d1f5      	bne.n	8003fe0 <_printf_i+0x16c>
 8003ff4:	e7b9      	b.n	8003f6a <_printf_i+0xf6>
 8003ff6:	6813      	ldr	r3, [r2, #0]
 8003ff8:	6825      	ldr	r5, [r4, #0]
 8003ffa:	6961      	ldr	r1, [r4, #20]
 8003ffc:	1d18      	adds	r0, r3, #4
 8003ffe:	6010      	str	r0, [r2, #0]
 8004000:	0628      	lsls	r0, r5, #24
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	d501      	bpl.n	800400a <_printf_i+0x196>
 8004006:	6019      	str	r1, [r3, #0]
 8004008:	e002      	b.n	8004010 <_printf_i+0x19c>
 800400a:	066a      	lsls	r2, r5, #25
 800400c:	d5fb      	bpl.n	8004006 <_printf_i+0x192>
 800400e:	8019      	strh	r1, [r3, #0]
 8004010:	2300      	movs	r3, #0
 8004012:	6123      	str	r3, [r4, #16]
 8004014:	4665      	mov	r5, ip
 8004016:	e7b9      	b.n	8003f8c <_printf_i+0x118>
 8004018:	6813      	ldr	r3, [r2, #0]
 800401a:	1d19      	adds	r1, r3, #4
 800401c:	6011      	str	r1, [r2, #0]
 800401e:	681d      	ldr	r5, [r3, #0]
 8004020:	6862      	ldr	r2, [r4, #4]
 8004022:	2100      	movs	r1, #0
 8004024:	4628      	mov	r0, r5
 8004026:	f7fc f8db 	bl	80001e0 <memchr>
 800402a:	b108      	cbz	r0, 8004030 <_printf_i+0x1bc>
 800402c:	1b40      	subs	r0, r0, r5
 800402e:	6060      	str	r0, [r4, #4]
 8004030:	6863      	ldr	r3, [r4, #4]
 8004032:	6123      	str	r3, [r4, #16]
 8004034:	2300      	movs	r3, #0
 8004036:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800403a:	e7a7      	b.n	8003f8c <_printf_i+0x118>
 800403c:	6923      	ldr	r3, [r4, #16]
 800403e:	462a      	mov	r2, r5
 8004040:	4639      	mov	r1, r7
 8004042:	4630      	mov	r0, r6
 8004044:	47c0      	blx	r8
 8004046:	3001      	adds	r0, #1
 8004048:	d0aa      	beq.n	8003fa0 <_printf_i+0x12c>
 800404a:	6823      	ldr	r3, [r4, #0]
 800404c:	079b      	lsls	r3, r3, #30
 800404e:	d413      	bmi.n	8004078 <_printf_i+0x204>
 8004050:	68e0      	ldr	r0, [r4, #12]
 8004052:	9b03      	ldr	r3, [sp, #12]
 8004054:	4298      	cmp	r0, r3
 8004056:	bfb8      	it	lt
 8004058:	4618      	movlt	r0, r3
 800405a:	e7a3      	b.n	8003fa4 <_printf_i+0x130>
 800405c:	2301      	movs	r3, #1
 800405e:	464a      	mov	r2, r9
 8004060:	4639      	mov	r1, r7
 8004062:	4630      	mov	r0, r6
 8004064:	47c0      	blx	r8
 8004066:	3001      	adds	r0, #1
 8004068:	d09a      	beq.n	8003fa0 <_printf_i+0x12c>
 800406a:	3501      	adds	r5, #1
 800406c:	68e3      	ldr	r3, [r4, #12]
 800406e:	9a03      	ldr	r2, [sp, #12]
 8004070:	1a9b      	subs	r3, r3, r2
 8004072:	42ab      	cmp	r3, r5
 8004074:	dcf2      	bgt.n	800405c <_printf_i+0x1e8>
 8004076:	e7eb      	b.n	8004050 <_printf_i+0x1dc>
 8004078:	2500      	movs	r5, #0
 800407a:	f104 0919 	add.w	r9, r4, #25
 800407e:	e7f5      	b.n	800406c <_printf_i+0x1f8>
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1ac      	bne.n	8003fde <_printf_i+0x16a>
 8004084:	7803      	ldrb	r3, [r0, #0]
 8004086:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800408a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800408e:	e76c      	b.n	8003f6a <_printf_i+0xf6>
 8004090:	08005906 	.word	0x08005906
 8004094:	08005917 	.word	0x08005917

08004098 <siprintf>:
 8004098:	b40e      	push	{r1, r2, r3}
 800409a:	b500      	push	{lr}
 800409c:	b09c      	sub	sp, #112	; 0x70
 800409e:	ab1d      	add	r3, sp, #116	; 0x74
 80040a0:	9002      	str	r0, [sp, #8]
 80040a2:	9006      	str	r0, [sp, #24]
 80040a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80040a8:	4809      	ldr	r0, [pc, #36]	; (80040d0 <siprintf+0x38>)
 80040aa:	9107      	str	r1, [sp, #28]
 80040ac:	9104      	str	r1, [sp, #16]
 80040ae:	4909      	ldr	r1, [pc, #36]	; (80040d4 <siprintf+0x3c>)
 80040b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80040b4:	9105      	str	r1, [sp, #20]
 80040b6:	6800      	ldr	r0, [r0, #0]
 80040b8:	9301      	str	r3, [sp, #4]
 80040ba:	a902      	add	r1, sp, #8
 80040bc:	f001 fa5c 	bl	8005578 <_svfiprintf_r>
 80040c0:	9b02      	ldr	r3, [sp, #8]
 80040c2:	2200      	movs	r2, #0
 80040c4:	701a      	strb	r2, [r3, #0]
 80040c6:	b01c      	add	sp, #112	; 0x70
 80040c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80040cc:	b003      	add	sp, #12
 80040ce:	4770      	bx	lr
 80040d0:	2000000c 	.word	0x2000000c
 80040d4:	ffff0208 	.word	0xffff0208

080040d8 <quorem>:
 80040d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040dc:	6903      	ldr	r3, [r0, #16]
 80040de:	690c      	ldr	r4, [r1, #16]
 80040e0:	42a3      	cmp	r3, r4
 80040e2:	4680      	mov	r8, r0
 80040e4:	f2c0 8082 	blt.w	80041ec <quorem+0x114>
 80040e8:	3c01      	subs	r4, #1
 80040ea:	f101 0714 	add.w	r7, r1, #20
 80040ee:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80040f2:	f100 0614 	add.w	r6, r0, #20
 80040f6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80040fa:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80040fe:	eb06 030c 	add.w	r3, r6, ip
 8004102:	3501      	adds	r5, #1
 8004104:	eb07 090c 	add.w	r9, r7, ip
 8004108:	9301      	str	r3, [sp, #4]
 800410a:	fbb0 f5f5 	udiv	r5, r0, r5
 800410e:	b395      	cbz	r5, 8004176 <quorem+0x9e>
 8004110:	f04f 0a00 	mov.w	sl, #0
 8004114:	4638      	mov	r0, r7
 8004116:	46b6      	mov	lr, r6
 8004118:	46d3      	mov	fp, sl
 800411a:	f850 2b04 	ldr.w	r2, [r0], #4
 800411e:	b293      	uxth	r3, r2
 8004120:	fb05 a303 	mla	r3, r5, r3, sl
 8004124:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004128:	b29b      	uxth	r3, r3
 800412a:	ebab 0303 	sub.w	r3, fp, r3
 800412e:	0c12      	lsrs	r2, r2, #16
 8004130:	f8de b000 	ldr.w	fp, [lr]
 8004134:	fb05 a202 	mla	r2, r5, r2, sl
 8004138:	fa13 f38b 	uxtah	r3, r3, fp
 800413c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004140:	fa1f fb82 	uxth.w	fp, r2
 8004144:	f8de 2000 	ldr.w	r2, [lr]
 8004148:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800414c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004150:	b29b      	uxth	r3, r3
 8004152:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004156:	4581      	cmp	r9, r0
 8004158:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800415c:	f84e 3b04 	str.w	r3, [lr], #4
 8004160:	d2db      	bcs.n	800411a <quorem+0x42>
 8004162:	f856 300c 	ldr.w	r3, [r6, ip]
 8004166:	b933      	cbnz	r3, 8004176 <quorem+0x9e>
 8004168:	9b01      	ldr	r3, [sp, #4]
 800416a:	3b04      	subs	r3, #4
 800416c:	429e      	cmp	r6, r3
 800416e:	461a      	mov	r2, r3
 8004170:	d330      	bcc.n	80041d4 <quorem+0xfc>
 8004172:	f8c8 4010 	str.w	r4, [r8, #16]
 8004176:	4640      	mov	r0, r8
 8004178:	f001 f828 	bl	80051cc <__mcmp>
 800417c:	2800      	cmp	r0, #0
 800417e:	db25      	blt.n	80041cc <quorem+0xf4>
 8004180:	3501      	adds	r5, #1
 8004182:	4630      	mov	r0, r6
 8004184:	f04f 0c00 	mov.w	ip, #0
 8004188:	f857 2b04 	ldr.w	r2, [r7], #4
 800418c:	f8d0 e000 	ldr.w	lr, [r0]
 8004190:	b293      	uxth	r3, r2
 8004192:	ebac 0303 	sub.w	r3, ip, r3
 8004196:	0c12      	lsrs	r2, r2, #16
 8004198:	fa13 f38e 	uxtah	r3, r3, lr
 800419c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80041a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80041aa:	45b9      	cmp	r9, r7
 80041ac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80041b0:	f840 3b04 	str.w	r3, [r0], #4
 80041b4:	d2e8      	bcs.n	8004188 <quorem+0xb0>
 80041b6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80041ba:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80041be:	b92a      	cbnz	r2, 80041cc <quorem+0xf4>
 80041c0:	3b04      	subs	r3, #4
 80041c2:	429e      	cmp	r6, r3
 80041c4:	461a      	mov	r2, r3
 80041c6:	d30b      	bcc.n	80041e0 <quorem+0x108>
 80041c8:	f8c8 4010 	str.w	r4, [r8, #16]
 80041cc:	4628      	mov	r0, r5
 80041ce:	b003      	add	sp, #12
 80041d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041d4:	6812      	ldr	r2, [r2, #0]
 80041d6:	3b04      	subs	r3, #4
 80041d8:	2a00      	cmp	r2, #0
 80041da:	d1ca      	bne.n	8004172 <quorem+0x9a>
 80041dc:	3c01      	subs	r4, #1
 80041de:	e7c5      	b.n	800416c <quorem+0x94>
 80041e0:	6812      	ldr	r2, [r2, #0]
 80041e2:	3b04      	subs	r3, #4
 80041e4:	2a00      	cmp	r2, #0
 80041e6:	d1ef      	bne.n	80041c8 <quorem+0xf0>
 80041e8:	3c01      	subs	r4, #1
 80041ea:	e7ea      	b.n	80041c2 <quorem+0xea>
 80041ec:	2000      	movs	r0, #0
 80041ee:	e7ee      	b.n	80041ce <quorem+0xf6>

080041f0 <_dtoa_r>:
 80041f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041f4:	ec57 6b10 	vmov	r6, r7, d0
 80041f8:	b097      	sub	sp, #92	; 0x5c
 80041fa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80041fc:	9106      	str	r1, [sp, #24]
 80041fe:	4604      	mov	r4, r0
 8004200:	920b      	str	r2, [sp, #44]	; 0x2c
 8004202:	9312      	str	r3, [sp, #72]	; 0x48
 8004204:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004208:	e9cd 6700 	strd	r6, r7, [sp]
 800420c:	b93d      	cbnz	r5, 800421e <_dtoa_r+0x2e>
 800420e:	2010      	movs	r0, #16
 8004210:	f000 fdb4 	bl	8004d7c <malloc>
 8004214:	6260      	str	r0, [r4, #36]	; 0x24
 8004216:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800421a:	6005      	str	r5, [r0, #0]
 800421c:	60c5      	str	r5, [r0, #12]
 800421e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004220:	6819      	ldr	r1, [r3, #0]
 8004222:	b151      	cbz	r1, 800423a <_dtoa_r+0x4a>
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	604a      	str	r2, [r1, #4]
 8004228:	2301      	movs	r3, #1
 800422a:	4093      	lsls	r3, r2
 800422c:	608b      	str	r3, [r1, #8]
 800422e:	4620      	mov	r0, r4
 8004230:	f000 fdeb 	bl	8004e0a <_Bfree>
 8004234:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004236:	2200      	movs	r2, #0
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	1e3b      	subs	r3, r7, #0
 800423c:	bfbb      	ittet	lt
 800423e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004242:	9301      	strlt	r3, [sp, #4]
 8004244:	2300      	movge	r3, #0
 8004246:	2201      	movlt	r2, #1
 8004248:	bfac      	ite	ge
 800424a:	f8c8 3000 	strge.w	r3, [r8]
 800424e:	f8c8 2000 	strlt.w	r2, [r8]
 8004252:	4baf      	ldr	r3, [pc, #700]	; (8004510 <_dtoa_r+0x320>)
 8004254:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004258:	ea33 0308 	bics.w	r3, r3, r8
 800425c:	d114      	bne.n	8004288 <_dtoa_r+0x98>
 800425e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004260:	f242 730f 	movw	r3, #9999	; 0x270f
 8004264:	6013      	str	r3, [r2, #0]
 8004266:	9b00      	ldr	r3, [sp, #0]
 8004268:	b923      	cbnz	r3, 8004274 <_dtoa_r+0x84>
 800426a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800426e:	2800      	cmp	r0, #0
 8004270:	f000 8542 	beq.w	8004cf8 <_dtoa_r+0xb08>
 8004274:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004276:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8004524 <_dtoa_r+0x334>
 800427a:	2b00      	cmp	r3, #0
 800427c:	f000 8544 	beq.w	8004d08 <_dtoa_r+0xb18>
 8004280:	f10b 0303 	add.w	r3, fp, #3
 8004284:	f000 bd3e 	b.w	8004d04 <_dtoa_r+0xb14>
 8004288:	e9dd 6700 	ldrd	r6, r7, [sp]
 800428c:	2200      	movs	r2, #0
 800428e:	2300      	movs	r3, #0
 8004290:	4630      	mov	r0, r6
 8004292:	4639      	mov	r1, r7
 8004294:	f7fc fc18 	bl	8000ac8 <__aeabi_dcmpeq>
 8004298:	4681      	mov	r9, r0
 800429a:	b168      	cbz	r0, 80042b8 <_dtoa_r+0xc8>
 800429c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800429e:	2301      	movs	r3, #1
 80042a0:	6013      	str	r3, [r2, #0]
 80042a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f000 8524 	beq.w	8004cf2 <_dtoa_r+0xb02>
 80042aa:	4b9a      	ldr	r3, [pc, #616]	; (8004514 <_dtoa_r+0x324>)
 80042ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80042ae:	f103 3bff 	add.w	fp, r3, #4294967295
 80042b2:	6013      	str	r3, [r2, #0]
 80042b4:	f000 bd28 	b.w	8004d08 <_dtoa_r+0xb18>
 80042b8:	aa14      	add	r2, sp, #80	; 0x50
 80042ba:	a915      	add	r1, sp, #84	; 0x54
 80042bc:	ec47 6b10 	vmov	d0, r6, r7
 80042c0:	4620      	mov	r0, r4
 80042c2:	f000 fffa 	bl	80052ba <__d2b>
 80042c6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80042ca:	9004      	str	r0, [sp, #16]
 80042cc:	2d00      	cmp	r5, #0
 80042ce:	d07c      	beq.n	80043ca <_dtoa_r+0x1da>
 80042d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80042d4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80042d8:	46b2      	mov	sl, r6
 80042da:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80042de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80042e2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80042e6:	2200      	movs	r2, #0
 80042e8:	4b8b      	ldr	r3, [pc, #556]	; (8004518 <_dtoa_r+0x328>)
 80042ea:	4650      	mov	r0, sl
 80042ec:	4659      	mov	r1, fp
 80042ee:	f7fb ffcb 	bl	8000288 <__aeabi_dsub>
 80042f2:	a381      	add	r3, pc, #516	; (adr r3, 80044f8 <_dtoa_r+0x308>)
 80042f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f8:	f7fc f97e 	bl	80005f8 <__aeabi_dmul>
 80042fc:	a380      	add	r3, pc, #512	; (adr r3, 8004500 <_dtoa_r+0x310>)
 80042fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004302:	f7fb ffc3 	bl	800028c <__adddf3>
 8004306:	4606      	mov	r6, r0
 8004308:	4628      	mov	r0, r5
 800430a:	460f      	mov	r7, r1
 800430c:	f7fc f90a 	bl	8000524 <__aeabi_i2d>
 8004310:	a37d      	add	r3, pc, #500	; (adr r3, 8004508 <_dtoa_r+0x318>)
 8004312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004316:	f7fc f96f 	bl	80005f8 <__aeabi_dmul>
 800431a:	4602      	mov	r2, r0
 800431c:	460b      	mov	r3, r1
 800431e:	4630      	mov	r0, r6
 8004320:	4639      	mov	r1, r7
 8004322:	f7fb ffb3 	bl	800028c <__adddf3>
 8004326:	4606      	mov	r6, r0
 8004328:	460f      	mov	r7, r1
 800432a:	f7fc fc15 	bl	8000b58 <__aeabi_d2iz>
 800432e:	2200      	movs	r2, #0
 8004330:	4682      	mov	sl, r0
 8004332:	2300      	movs	r3, #0
 8004334:	4630      	mov	r0, r6
 8004336:	4639      	mov	r1, r7
 8004338:	f7fc fbd0 	bl	8000adc <__aeabi_dcmplt>
 800433c:	b148      	cbz	r0, 8004352 <_dtoa_r+0x162>
 800433e:	4650      	mov	r0, sl
 8004340:	f7fc f8f0 	bl	8000524 <__aeabi_i2d>
 8004344:	4632      	mov	r2, r6
 8004346:	463b      	mov	r3, r7
 8004348:	f7fc fbbe 	bl	8000ac8 <__aeabi_dcmpeq>
 800434c:	b908      	cbnz	r0, 8004352 <_dtoa_r+0x162>
 800434e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004352:	f1ba 0f16 	cmp.w	sl, #22
 8004356:	d859      	bhi.n	800440c <_dtoa_r+0x21c>
 8004358:	4970      	ldr	r1, [pc, #448]	; (800451c <_dtoa_r+0x32c>)
 800435a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800435e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004362:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004366:	f7fc fbd7 	bl	8000b18 <__aeabi_dcmpgt>
 800436a:	2800      	cmp	r0, #0
 800436c:	d050      	beq.n	8004410 <_dtoa_r+0x220>
 800436e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004372:	2300      	movs	r3, #0
 8004374:	930f      	str	r3, [sp, #60]	; 0x3c
 8004376:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004378:	1b5d      	subs	r5, r3, r5
 800437a:	f1b5 0801 	subs.w	r8, r5, #1
 800437e:	bf49      	itett	mi
 8004380:	f1c5 0301 	rsbmi	r3, r5, #1
 8004384:	2300      	movpl	r3, #0
 8004386:	9305      	strmi	r3, [sp, #20]
 8004388:	f04f 0800 	movmi.w	r8, #0
 800438c:	bf58      	it	pl
 800438e:	9305      	strpl	r3, [sp, #20]
 8004390:	f1ba 0f00 	cmp.w	sl, #0
 8004394:	db3e      	blt.n	8004414 <_dtoa_r+0x224>
 8004396:	2300      	movs	r3, #0
 8004398:	44d0      	add	r8, sl
 800439a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800439e:	9307      	str	r3, [sp, #28]
 80043a0:	9b06      	ldr	r3, [sp, #24]
 80043a2:	2b09      	cmp	r3, #9
 80043a4:	f200 8090 	bhi.w	80044c8 <_dtoa_r+0x2d8>
 80043a8:	2b05      	cmp	r3, #5
 80043aa:	bfc4      	itt	gt
 80043ac:	3b04      	subgt	r3, #4
 80043ae:	9306      	strgt	r3, [sp, #24]
 80043b0:	9b06      	ldr	r3, [sp, #24]
 80043b2:	f1a3 0302 	sub.w	r3, r3, #2
 80043b6:	bfcc      	ite	gt
 80043b8:	2500      	movgt	r5, #0
 80043ba:	2501      	movle	r5, #1
 80043bc:	2b03      	cmp	r3, #3
 80043be:	f200 808f 	bhi.w	80044e0 <_dtoa_r+0x2f0>
 80043c2:	e8df f003 	tbb	[pc, r3]
 80043c6:	7f7d      	.short	0x7f7d
 80043c8:	7131      	.short	0x7131
 80043ca:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80043ce:	441d      	add	r5, r3
 80043d0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80043d4:	2820      	cmp	r0, #32
 80043d6:	dd13      	ble.n	8004400 <_dtoa_r+0x210>
 80043d8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80043dc:	9b00      	ldr	r3, [sp, #0]
 80043de:	fa08 f800 	lsl.w	r8, r8, r0
 80043e2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80043e6:	fa23 f000 	lsr.w	r0, r3, r0
 80043ea:	ea48 0000 	orr.w	r0, r8, r0
 80043ee:	f7fc f889 	bl	8000504 <__aeabi_ui2d>
 80043f2:	2301      	movs	r3, #1
 80043f4:	4682      	mov	sl, r0
 80043f6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80043fa:	3d01      	subs	r5, #1
 80043fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80043fe:	e772      	b.n	80042e6 <_dtoa_r+0xf6>
 8004400:	9b00      	ldr	r3, [sp, #0]
 8004402:	f1c0 0020 	rsb	r0, r0, #32
 8004406:	fa03 f000 	lsl.w	r0, r3, r0
 800440a:	e7f0      	b.n	80043ee <_dtoa_r+0x1fe>
 800440c:	2301      	movs	r3, #1
 800440e:	e7b1      	b.n	8004374 <_dtoa_r+0x184>
 8004410:	900f      	str	r0, [sp, #60]	; 0x3c
 8004412:	e7b0      	b.n	8004376 <_dtoa_r+0x186>
 8004414:	9b05      	ldr	r3, [sp, #20]
 8004416:	eba3 030a 	sub.w	r3, r3, sl
 800441a:	9305      	str	r3, [sp, #20]
 800441c:	f1ca 0300 	rsb	r3, sl, #0
 8004420:	9307      	str	r3, [sp, #28]
 8004422:	2300      	movs	r3, #0
 8004424:	930e      	str	r3, [sp, #56]	; 0x38
 8004426:	e7bb      	b.n	80043a0 <_dtoa_r+0x1b0>
 8004428:	2301      	movs	r3, #1
 800442a:	930a      	str	r3, [sp, #40]	; 0x28
 800442c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800442e:	2b00      	cmp	r3, #0
 8004430:	dd59      	ble.n	80044e6 <_dtoa_r+0x2f6>
 8004432:	9302      	str	r3, [sp, #8]
 8004434:	4699      	mov	r9, r3
 8004436:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004438:	2200      	movs	r2, #0
 800443a:	6072      	str	r2, [r6, #4]
 800443c:	2204      	movs	r2, #4
 800443e:	f102 0014 	add.w	r0, r2, #20
 8004442:	4298      	cmp	r0, r3
 8004444:	6871      	ldr	r1, [r6, #4]
 8004446:	d953      	bls.n	80044f0 <_dtoa_r+0x300>
 8004448:	4620      	mov	r0, r4
 800444a:	f000 fcaa 	bl	8004da2 <_Balloc>
 800444e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004450:	6030      	str	r0, [r6, #0]
 8004452:	f1b9 0f0e 	cmp.w	r9, #14
 8004456:	f8d3 b000 	ldr.w	fp, [r3]
 800445a:	f200 80e6 	bhi.w	800462a <_dtoa_r+0x43a>
 800445e:	2d00      	cmp	r5, #0
 8004460:	f000 80e3 	beq.w	800462a <_dtoa_r+0x43a>
 8004464:	ed9d 7b00 	vldr	d7, [sp]
 8004468:	f1ba 0f00 	cmp.w	sl, #0
 800446c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004470:	dd74      	ble.n	800455c <_dtoa_r+0x36c>
 8004472:	4a2a      	ldr	r2, [pc, #168]	; (800451c <_dtoa_r+0x32c>)
 8004474:	f00a 030f 	and.w	r3, sl, #15
 8004478:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800447c:	ed93 7b00 	vldr	d7, [r3]
 8004480:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004484:	06f0      	lsls	r0, r6, #27
 8004486:	ed8d 7b08 	vstr	d7, [sp, #32]
 800448a:	d565      	bpl.n	8004558 <_dtoa_r+0x368>
 800448c:	4b24      	ldr	r3, [pc, #144]	; (8004520 <_dtoa_r+0x330>)
 800448e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004492:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004496:	f7fc f9d9 	bl	800084c <__aeabi_ddiv>
 800449a:	e9cd 0100 	strd	r0, r1, [sp]
 800449e:	f006 060f 	and.w	r6, r6, #15
 80044a2:	2503      	movs	r5, #3
 80044a4:	4f1e      	ldr	r7, [pc, #120]	; (8004520 <_dtoa_r+0x330>)
 80044a6:	e04c      	b.n	8004542 <_dtoa_r+0x352>
 80044a8:	2301      	movs	r3, #1
 80044aa:	930a      	str	r3, [sp, #40]	; 0x28
 80044ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80044ae:	4453      	add	r3, sl
 80044b0:	f103 0901 	add.w	r9, r3, #1
 80044b4:	9302      	str	r3, [sp, #8]
 80044b6:	464b      	mov	r3, r9
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	bfb8      	it	lt
 80044bc:	2301      	movlt	r3, #1
 80044be:	e7ba      	b.n	8004436 <_dtoa_r+0x246>
 80044c0:	2300      	movs	r3, #0
 80044c2:	e7b2      	b.n	800442a <_dtoa_r+0x23a>
 80044c4:	2300      	movs	r3, #0
 80044c6:	e7f0      	b.n	80044aa <_dtoa_r+0x2ba>
 80044c8:	2501      	movs	r5, #1
 80044ca:	2300      	movs	r3, #0
 80044cc:	9306      	str	r3, [sp, #24]
 80044ce:	950a      	str	r5, [sp, #40]	; 0x28
 80044d0:	f04f 33ff 	mov.w	r3, #4294967295
 80044d4:	9302      	str	r3, [sp, #8]
 80044d6:	4699      	mov	r9, r3
 80044d8:	2200      	movs	r2, #0
 80044da:	2312      	movs	r3, #18
 80044dc:	920b      	str	r2, [sp, #44]	; 0x2c
 80044de:	e7aa      	b.n	8004436 <_dtoa_r+0x246>
 80044e0:	2301      	movs	r3, #1
 80044e2:	930a      	str	r3, [sp, #40]	; 0x28
 80044e4:	e7f4      	b.n	80044d0 <_dtoa_r+0x2e0>
 80044e6:	2301      	movs	r3, #1
 80044e8:	9302      	str	r3, [sp, #8]
 80044ea:	4699      	mov	r9, r3
 80044ec:	461a      	mov	r2, r3
 80044ee:	e7f5      	b.n	80044dc <_dtoa_r+0x2ec>
 80044f0:	3101      	adds	r1, #1
 80044f2:	6071      	str	r1, [r6, #4]
 80044f4:	0052      	lsls	r2, r2, #1
 80044f6:	e7a2      	b.n	800443e <_dtoa_r+0x24e>
 80044f8:	636f4361 	.word	0x636f4361
 80044fc:	3fd287a7 	.word	0x3fd287a7
 8004500:	8b60c8b3 	.word	0x8b60c8b3
 8004504:	3fc68a28 	.word	0x3fc68a28
 8004508:	509f79fb 	.word	0x509f79fb
 800450c:	3fd34413 	.word	0x3fd34413
 8004510:	7ff00000 	.word	0x7ff00000
 8004514:	08005905 	.word	0x08005905
 8004518:	3ff80000 	.word	0x3ff80000
 800451c:	08005960 	.word	0x08005960
 8004520:	08005938 	.word	0x08005938
 8004524:	08005931 	.word	0x08005931
 8004528:	07f1      	lsls	r1, r6, #31
 800452a:	d508      	bpl.n	800453e <_dtoa_r+0x34e>
 800452c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004530:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004534:	f7fc f860 	bl	80005f8 <__aeabi_dmul>
 8004538:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800453c:	3501      	adds	r5, #1
 800453e:	1076      	asrs	r6, r6, #1
 8004540:	3708      	adds	r7, #8
 8004542:	2e00      	cmp	r6, #0
 8004544:	d1f0      	bne.n	8004528 <_dtoa_r+0x338>
 8004546:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800454a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800454e:	f7fc f97d 	bl	800084c <__aeabi_ddiv>
 8004552:	e9cd 0100 	strd	r0, r1, [sp]
 8004556:	e01a      	b.n	800458e <_dtoa_r+0x39e>
 8004558:	2502      	movs	r5, #2
 800455a:	e7a3      	b.n	80044a4 <_dtoa_r+0x2b4>
 800455c:	f000 80a0 	beq.w	80046a0 <_dtoa_r+0x4b0>
 8004560:	f1ca 0600 	rsb	r6, sl, #0
 8004564:	4b9f      	ldr	r3, [pc, #636]	; (80047e4 <_dtoa_r+0x5f4>)
 8004566:	4fa0      	ldr	r7, [pc, #640]	; (80047e8 <_dtoa_r+0x5f8>)
 8004568:	f006 020f 	and.w	r2, r6, #15
 800456c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004574:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004578:	f7fc f83e 	bl	80005f8 <__aeabi_dmul>
 800457c:	e9cd 0100 	strd	r0, r1, [sp]
 8004580:	1136      	asrs	r6, r6, #4
 8004582:	2300      	movs	r3, #0
 8004584:	2502      	movs	r5, #2
 8004586:	2e00      	cmp	r6, #0
 8004588:	d17f      	bne.n	800468a <_dtoa_r+0x49a>
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1e1      	bne.n	8004552 <_dtoa_r+0x362>
 800458e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 8087 	beq.w	80046a4 <_dtoa_r+0x4b4>
 8004596:	e9dd 6700 	ldrd	r6, r7, [sp]
 800459a:	2200      	movs	r2, #0
 800459c:	4b93      	ldr	r3, [pc, #588]	; (80047ec <_dtoa_r+0x5fc>)
 800459e:	4630      	mov	r0, r6
 80045a0:	4639      	mov	r1, r7
 80045a2:	f7fc fa9b 	bl	8000adc <__aeabi_dcmplt>
 80045a6:	2800      	cmp	r0, #0
 80045a8:	d07c      	beq.n	80046a4 <_dtoa_r+0x4b4>
 80045aa:	f1b9 0f00 	cmp.w	r9, #0
 80045ae:	d079      	beq.n	80046a4 <_dtoa_r+0x4b4>
 80045b0:	9b02      	ldr	r3, [sp, #8]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	dd35      	ble.n	8004622 <_dtoa_r+0x432>
 80045b6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80045ba:	9308      	str	r3, [sp, #32]
 80045bc:	4639      	mov	r1, r7
 80045be:	2200      	movs	r2, #0
 80045c0:	4b8b      	ldr	r3, [pc, #556]	; (80047f0 <_dtoa_r+0x600>)
 80045c2:	4630      	mov	r0, r6
 80045c4:	f7fc f818 	bl	80005f8 <__aeabi_dmul>
 80045c8:	e9cd 0100 	strd	r0, r1, [sp]
 80045cc:	9f02      	ldr	r7, [sp, #8]
 80045ce:	3501      	adds	r5, #1
 80045d0:	4628      	mov	r0, r5
 80045d2:	f7fb ffa7 	bl	8000524 <__aeabi_i2d>
 80045d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80045da:	f7fc f80d 	bl	80005f8 <__aeabi_dmul>
 80045de:	2200      	movs	r2, #0
 80045e0:	4b84      	ldr	r3, [pc, #528]	; (80047f4 <_dtoa_r+0x604>)
 80045e2:	f7fb fe53 	bl	800028c <__adddf3>
 80045e6:	4605      	mov	r5, r0
 80045e8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80045ec:	2f00      	cmp	r7, #0
 80045ee:	d15d      	bne.n	80046ac <_dtoa_r+0x4bc>
 80045f0:	2200      	movs	r2, #0
 80045f2:	4b81      	ldr	r3, [pc, #516]	; (80047f8 <_dtoa_r+0x608>)
 80045f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80045f8:	f7fb fe46 	bl	8000288 <__aeabi_dsub>
 80045fc:	462a      	mov	r2, r5
 80045fe:	4633      	mov	r3, r6
 8004600:	e9cd 0100 	strd	r0, r1, [sp]
 8004604:	f7fc fa88 	bl	8000b18 <__aeabi_dcmpgt>
 8004608:	2800      	cmp	r0, #0
 800460a:	f040 8288 	bne.w	8004b1e <_dtoa_r+0x92e>
 800460e:	462a      	mov	r2, r5
 8004610:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004614:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004618:	f7fc fa60 	bl	8000adc <__aeabi_dcmplt>
 800461c:	2800      	cmp	r0, #0
 800461e:	f040 827c 	bne.w	8004b1a <_dtoa_r+0x92a>
 8004622:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004626:	e9cd 2300 	strd	r2, r3, [sp]
 800462a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800462c:	2b00      	cmp	r3, #0
 800462e:	f2c0 8150 	blt.w	80048d2 <_dtoa_r+0x6e2>
 8004632:	f1ba 0f0e 	cmp.w	sl, #14
 8004636:	f300 814c 	bgt.w	80048d2 <_dtoa_r+0x6e2>
 800463a:	4b6a      	ldr	r3, [pc, #424]	; (80047e4 <_dtoa_r+0x5f4>)
 800463c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004640:	ed93 7b00 	vldr	d7, [r3]
 8004644:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004646:	2b00      	cmp	r3, #0
 8004648:	ed8d 7b02 	vstr	d7, [sp, #8]
 800464c:	f280 80d8 	bge.w	8004800 <_dtoa_r+0x610>
 8004650:	f1b9 0f00 	cmp.w	r9, #0
 8004654:	f300 80d4 	bgt.w	8004800 <_dtoa_r+0x610>
 8004658:	f040 825e 	bne.w	8004b18 <_dtoa_r+0x928>
 800465c:	2200      	movs	r2, #0
 800465e:	4b66      	ldr	r3, [pc, #408]	; (80047f8 <_dtoa_r+0x608>)
 8004660:	ec51 0b17 	vmov	r0, r1, d7
 8004664:	f7fb ffc8 	bl	80005f8 <__aeabi_dmul>
 8004668:	e9dd 2300 	ldrd	r2, r3, [sp]
 800466c:	f7fc fa4a 	bl	8000b04 <__aeabi_dcmpge>
 8004670:	464f      	mov	r7, r9
 8004672:	464e      	mov	r6, r9
 8004674:	2800      	cmp	r0, #0
 8004676:	f040 8234 	bne.w	8004ae2 <_dtoa_r+0x8f2>
 800467a:	2331      	movs	r3, #49	; 0x31
 800467c:	f10b 0501 	add.w	r5, fp, #1
 8004680:	f88b 3000 	strb.w	r3, [fp]
 8004684:	f10a 0a01 	add.w	sl, sl, #1
 8004688:	e22f      	b.n	8004aea <_dtoa_r+0x8fa>
 800468a:	07f2      	lsls	r2, r6, #31
 800468c:	d505      	bpl.n	800469a <_dtoa_r+0x4aa>
 800468e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004692:	f7fb ffb1 	bl	80005f8 <__aeabi_dmul>
 8004696:	3501      	adds	r5, #1
 8004698:	2301      	movs	r3, #1
 800469a:	1076      	asrs	r6, r6, #1
 800469c:	3708      	adds	r7, #8
 800469e:	e772      	b.n	8004586 <_dtoa_r+0x396>
 80046a0:	2502      	movs	r5, #2
 80046a2:	e774      	b.n	800458e <_dtoa_r+0x39e>
 80046a4:	f8cd a020 	str.w	sl, [sp, #32]
 80046a8:	464f      	mov	r7, r9
 80046aa:	e791      	b.n	80045d0 <_dtoa_r+0x3e0>
 80046ac:	4b4d      	ldr	r3, [pc, #308]	; (80047e4 <_dtoa_r+0x5f4>)
 80046ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80046b2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80046b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d047      	beq.n	800474c <_dtoa_r+0x55c>
 80046bc:	4602      	mov	r2, r0
 80046be:	460b      	mov	r3, r1
 80046c0:	2000      	movs	r0, #0
 80046c2:	494e      	ldr	r1, [pc, #312]	; (80047fc <_dtoa_r+0x60c>)
 80046c4:	f7fc f8c2 	bl	800084c <__aeabi_ddiv>
 80046c8:	462a      	mov	r2, r5
 80046ca:	4633      	mov	r3, r6
 80046cc:	f7fb fddc 	bl	8000288 <__aeabi_dsub>
 80046d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80046d4:	465d      	mov	r5, fp
 80046d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80046da:	f7fc fa3d 	bl	8000b58 <__aeabi_d2iz>
 80046de:	4606      	mov	r6, r0
 80046e0:	f7fb ff20 	bl	8000524 <__aeabi_i2d>
 80046e4:	4602      	mov	r2, r0
 80046e6:	460b      	mov	r3, r1
 80046e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80046ec:	f7fb fdcc 	bl	8000288 <__aeabi_dsub>
 80046f0:	3630      	adds	r6, #48	; 0x30
 80046f2:	f805 6b01 	strb.w	r6, [r5], #1
 80046f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80046fa:	e9cd 0100 	strd	r0, r1, [sp]
 80046fe:	f7fc f9ed 	bl	8000adc <__aeabi_dcmplt>
 8004702:	2800      	cmp	r0, #0
 8004704:	d163      	bne.n	80047ce <_dtoa_r+0x5de>
 8004706:	e9dd 2300 	ldrd	r2, r3, [sp]
 800470a:	2000      	movs	r0, #0
 800470c:	4937      	ldr	r1, [pc, #220]	; (80047ec <_dtoa_r+0x5fc>)
 800470e:	f7fb fdbb 	bl	8000288 <__aeabi_dsub>
 8004712:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004716:	f7fc f9e1 	bl	8000adc <__aeabi_dcmplt>
 800471a:	2800      	cmp	r0, #0
 800471c:	f040 80b7 	bne.w	800488e <_dtoa_r+0x69e>
 8004720:	eba5 030b 	sub.w	r3, r5, fp
 8004724:	429f      	cmp	r7, r3
 8004726:	f77f af7c 	ble.w	8004622 <_dtoa_r+0x432>
 800472a:	2200      	movs	r2, #0
 800472c:	4b30      	ldr	r3, [pc, #192]	; (80047f0 <_dtoa_r+0x600>)
 800472e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004732:	f7fb ff61 	bl	80005f8 <__aeabi_dmul>
 8004736:	2200      	movs	r2, #0
 8004738:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800473c:	4b2c      	ldr	r3, [pc, #176]	; (80047f0 <_dtoa_r+0x600>)
 800473e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004742:	f7fb ff59 	bl	80005f8 <__aeabi_dmul>
 8004746:	e9cd 0100 	strd	r0, r1, [sp]
 800474a:	e7c4      	b.n	80046d6 <_dtoa_r+0x4e6>
 800474c:	462a      	mov	r2, r5
 800474e:	4633      	mov	r3, r6
 8004750:	f7fb ff52 	bl	80005f8 <__aeabi_dmul>
 8004754:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004758:	eb0b 0507 	add.w	r5, fp, r7
 800475c:	465e      	mov	r6, fp
 800475e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004762:	f7fc f9f9 	bl	8000b58 <__aeabi_d2iz>
 8004766:	4607      	mov	r7, r0
 8004768:	f7fb fedc 	bl	8000524 <__aeabi_i2d>
 800476c:	3730      	adds	r7, #48	; 0x30
 800476e:	4602      	mov	r2, r0
 8004770:	460b      	mov	r3, r1
 8004772:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004776:	f7fb fd87 	bl	8000288 <__aeabi_dsub>
 800477a:	f806 7b01 	strb.w	r7, [r6], #1
 800477e:	42ae      	cmp	r6, r5
 8004780:	e9cd 0100 	strd	r0, r1, [sp]
 8004784:	f04f 0200 	mov.w	r2, #0
 8004788:	d126      	bne.n	80047d8 <_dtoa_r+0x5e8>
 800478a:	4b1c      	ldr	r3, [pc, #112]	; (80047fc <_dtoa_r+0x60c>)
 800478c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004790:	f7fb fd7c 	bl	800028c <__adddf3>
 8004794:	4602      	mov	r2, r0
 8004796:	460b      	mov	r3, r1
 8004798:	e9dd 0100 	ldrd	r0, r1, [sp]
 800479c:	f7fc f9bc 	bl	8000b18 <__aeabi_dcmpgt>
 80047a0:	2800      	cmp	r0, #0
 80047a2:	d174      	bne.n	800488e <_dtoa_r+0x69e>
 80047a4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80047a8:	2000      	movs	r0, #0
 80047aa:	4914      	ldr	r1, [pc, #80]	; (80047fc <_dtoa_r+0x60c>)
 80047ac:	f7fb fd6c 	bl	8000288 <__aeabi_dsub>
 80047b0:	4602      	mov	r2, r0
 80047b2:	460b      	mov	r3, r1
 80047b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80047b8:	f7fc f990 	bl	8000adc <__aeabi_dcmplt>
 80047bc:	2800      	cmp	r0, #0
 80047be:	f43f af30 	beq.w	8004622 <_dtoa_r+0x432>
 80047c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80047c6:	2b30      	cmp	r3, #48	; 0x30
 80047c8:	f105 32ff 	add.w	r2, r5, #4294967295
 80047cc:	d002      	beq.n	80047d4 <_dtoa_r+0x5e4>
 80047ce:	f8dd a020 	ldr.w	sl, [sp, #32]
 80047d2:	e04a      	b.n	800486a <_dtoa_r+0x67a>
 80047d4:	4615      	mov	r5, r2
 80047d6:	e7f4      	b.n	80047c2 <_dtoa_r+0x5d2>
 80047d8:	4b05      	ldr	r3, [pc, #20]	; (80047f0 <_dtoa_r+0x600>)
 80047da:	f7fb ff0d 	bl	80005f8 <__aeabi_dmul>
 80047de:	e9cd 0100 	strd	r0, r1, [sp]
 80047e2:	e7bc      	b.n	800475e <_dtoa_r+0x56e>
 80047e4:	08005960 	.word	0x08005960
 80047e8:	08005938 	.word	0x08005938
 80047ec:	3ff00000 	.word	0x3ff00000
 80047f0:	40240000 	.word	0x40240000
 80047f4:	401c0000 	.word	0x401c0000
 80047f8:	40140000 	.word	0x40140000
 80047fc:	3fe00000 	.word	0x3fe00000
 8004800:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004804:	465d      	mov	r5, fp
 8004806:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800480a:	4630      	mov	r0, r6
 800480c:	4639      	mov	r1, r7
 800480e:	f7fc f81d 	bl	800084c <__aeabi_ddiv>
 8004812:	f7fc f9a1 	bl	8000b58 <__aeabi_d2iz>
 8004816:	4680      	mov	r8, r0
 8004818:	f7fb fe84 	bl	8000524 <__aeabi_i2d>
 800481c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004820:	f7fb feea 	bl	80005f8 <__aeabi_dmul>
 8004824:	4602      	mov	r2, r0
 8004826:	460b      	mov	r3, r1
 8004828:	4630      	mov	r0, r6
 800482a:	4639      	mov	r1, r7
 800482c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8004830:	f7fb fd2a 	bl	8000288 <__aeabi_dsub>
 8004834:	f805 6b01 	strb.w	r6, [r5], #1
 8004838:	eba5 060b 	sub.w	r6, r5, fp
 800483c:	45b1      	cmp	r9, r6
 800483e:	4602      	mov	r2, r0
 8004840:	460b      	mov	r3, r1
 8004842:	d139      	bne.n	80048b8 <_dtoa_r+0x6c8>
 8004844:	f7fb fd22 	bl	800028c <__adddf3>
 8004848:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800484c:	4606      	mov	r6, r0
 800484e:	460f      	mov	r7, r1
 8004850:	f7fc f962 	bl	8000b18 <__aeabi_dcmpgt>
 8004854:	b9c8      	cbnz	r0, 800488a <_dtoa_r+0x69a>
 8004856:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800485a:	4630      	mov	r0, r6
 800485c:	4639      	mov	r1, r7
 800485e:	f7fc f933 	bl	8000ac8 <__aeabi_dcmpeq>
 8004862:	b110      	cbz	r0, 800486a <_dtoa_r+0x67a>
 8004864:	f018 0f01 	tst.w	r8, #1
 8004868:	d10f      	bne.n	800488a <_dtoa_r+0x69a>
 800486a:	9904      	ldr	r1, [sp, #16]
 800486c:	4620      	mov	r0, r4
 800486e:	f000 facc 	bl	8004e0a <_Bfree>
 8004872:	2300      	movs	r3, #0
 8004874:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004876:	702b      	strb	r3, [r5, #0]
 8004878:	f10a 0301 	add.w	r3, sl, #1
 800487c:	6013      	str	r3, [r2, #0]
 800487e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004880:	2b00      	cmp	r3, #0
 8004882:	f000 8241 	beq.w	8004d08 <_dtoa_r+0xb18>
 8004886:	601d      	str	r5, [r3, #0]
 8004888:	e23e      	b.n	8004d08 <_dtoa_r+0xb18>
 800488a:	f8cd a020 	str.w	sl, [sp, #32]
 800488e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004892:	2a39      	cmp	r2, #57	; 0x39
 8004894:	f105 33ff 	add.w	r3, r5, #4294967295
 8004898:	d108      	bne.n	80048ac <_dtoa_r+0x6bc>
 800489a:	459b      	cmp	fp, r3
 800489c:	d10a      	bne.n	80048b4 <_dtoa_r+0x6c4>
 800489e:	9b08      	ldr	r3, [sp, #32]
 80048a0:	3301      	adds	r3, #1
 80048a2:	9308      	str	r3, [sp, #32]
 80048a4:	2330      	movs	r3, #48	; 0x30
 80048a6:	f88b 3000 	strb.w	r3, [fp]
 80048aa:	465b      	mov	r3, fp
 80048ac:	781a      	ldrb	r2, [r3, #0]
 80048ae:	3201      	adds	r2, #1
 80048b0:	701a      	strb	r2, [r3, #0]
 80048b2:	e78c      	b.n	80047ce <_dtoa_r+0x5de>
 80048b4:	461d      	mov	r5, r3
 80048b6:	e7ea      	b.n	800488e <_dtoa_r+0x69e>
 80048b8:	2200      	movs	r2, #0
 80048ba:	4b9b      	ldr	r3, [pc, #620]	; (8004b28 <_dtoa_r+0x938>)
 80048bc:	f7fb fe9c 	bl	80005f8 <__aeabi_dmul>
 80048c0:	2200      	movs	r2, #0
 80048c2:	2300      	movs	r3, #0
 80048c4:	4606      	mov	r6, r0
 80048c6:	460f      	mov	r7, r1
 80048c8:	f7fc f8fe 	bl	8000ac8 <__aeabi_dcmpeq>
 80048cc:	2800      	cmp	r0, #0
 80048ce:	d09a      	beq.n	8004806 <_dtoa_r+0x616>
 80048d0:	e7cb      	b.n	800486a <_dtoa_r+0x67a>
 80048d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80048d4:	2a00      	cmp	r2, #0
 80048d6:	f000 808b 	beq.w	80049f0 <_dtoa_r+0x800>
 80048da:	9a06      	ldr	r2, [sp, #24]
 80048dc:	2a01      	cmp	r2, #1
 80048de:	dc6e      	bgt.n	80049be <_dtoa_r+0x7ce>
 80048e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80048e2:	2a00      	cmp	r2, #0
 80048e4:	d067      	beq.n	80049b6 <_dtoa_r+0x7c6>
 80048e6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80048ea:	9f07      	ldr	r7, [sp, #28]
 80048ec:	9d05      	ldr	r5, [sp, #20]
 80048ee:	9a05      	ldr	r2, [sp, #20]
 80048f0:	2101      	movs	r1, #1
 80048f2:	441a      	add	r2, r3
 80048f4:	4620      	mov	r0, r4
 80048f6:	9205      	str	r2, [sp, #20]
 80048f8:	4498      	add	r8, r3
 80048fa:	f000 fb26 	bl	8004f4a <__i2b>
 80048fe:	4606      	mov	r6, r0
 8004900:	2d00      	cmp	r5, #0
 8004902:	dd0c      	ble.n	800491e <_dtoa_r+0x72e>
 8004904:	f1b8 0f00 	cmp.w	r8, #0
 8004908:	dd09      	ble.n	800491e <_dtoa_r+0x72e>
 800490a:	4545      	cmp	r5, r8
 800490c:	9a05      	ldr	r2, [sp, #20]
 800490e:	462b      	mov	r3, r5
 8004910:	bfa8      	it	ge
 8004912:	4643      	movge	r3, r8
 8004914:	1ad2      	subs	r2, r2, r3
 8004916:	9205      	str	r2, [sp, #20]
 8004918:	1aed      	subs	r5, r5, r3
 800491a:	eba8 0803 	sub.w	r8, r8, r3
 800491e:	9b07      	ldr	r3, [sp, #28]
 8004920:	b1eb      	cbz	r3, 800495e <_dtoa_r+0x76e>
 8004922:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004924:	2b00      	cmp	r3, #0
 8004926:	d067      	beq.n	80049f8 <_dtoa_r+0x808>
 8004928:	b18f      	cbz	r7, 800494e <_dtoa_r+0x75e>
 800492a:	4631      	mov	r1, r6
 800492c:	463a      	mov	r2, r7
 800492e:	4620      	mov	r0, r4
 8004930:	f000 fbaa 	bl	8005088 <__pow5mult>
 8004934:	9a04      	ldr	r2, [sp, #16]
 8004936:	4601      	mov	r1, r0
 8004938:	4606      	mov	r6, r0
 800493a:	4620      	mov	r0, r4
 800493c:	f000 fb0e 	bl	8004f5c <__multiply>
 8004940:	9904      	ldr	r1, [sp, #16]
 8004942:	9008      	str	r0, [sp, #32]
 8004944:	4620      	mov	r0, r4
 8004946:	f000 fa60 	bl	8004e0a <_Bfree>
 800494a:	9b08      	ldr	r3, [sp, #32]
 800494c:	9304      	str	r3, [sp, #16]
 800494e:	9b07      	ldr	r3, [sp, #28]
 8004950:	1bda      	subs	r2, r3, r7
 8004952:	d004      	beq.n	800495e <_dtoa_r+0x76e>
 8004954:	9904      	ldr	r1, [sp, #16]
 8004956:	4620      	mov	r0, r4
 8004958:	f000 fb96 	bl	8005088 <__pow5mult>
 800495c:	9004      	str	r0, [sp, #16]
 800495e:	2101      	movs	r1, #1
 8004960:	4620      	mov	r0, r4
 8004962:	f000 faf2 	bl	8004f4a <__i2b>
 8004966:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004968:	4607      	mov	r7, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	f000 81d0 	beq.w	8004d10 <_dtoa_r+0xb20>
 8004970:	461a      	mov	r2, r3
 8004972:	4601      	mov	r1, r0
 8004974:	4620      	mov	r0, r4
 8004976:	f000 fb87 	bl	8005088 <__pow5mult>
 800497a:	9b06      	ldr	r3, [sp, #24]
 800497c:	2b01      	cmp	r3, #1
 800497e:	4607      	mov	r7, r0
 8004980:	dc40      	bgt.n	8004a04 <_dtoa_r+0x814>
 8004982:	9b00      	ldr	r3, [sp, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d139      	bne.n	80049fc <_dtoa_r+0x80c>
 8004988:	9b01      	ldr	r3, [sp, #4]
 800498a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800498e:	2b00      	cmp	r3, #0
 8004990:	d136      	bne.n	8004a00 <_dtoa_r+0x810>
 8004992:	9b01      	ldr	r3, [sp, #4]
 8004994:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004998:	0d1b      	lsrs	r3, r3, #20
 800499a:	051b      	lsls	r3, r3, #20
 800499c:	b12b      	cbz	r3, 80049aa <_dtoa_r+0x7ba>
 800499e:	9b05      	ldr	r3, [sp, #20]
 80049a0:	3301      	adds	r3, #1
 80049a2:	9305      	str	r3, [sp, #20]
 80049a4:	f108 0801 	add.w	r8, r8, #1
 80049a8:	2301      	movs	r3, #1
 80049aa:	9307      	str	r3, [sp, #28]
 80049ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d12a      	bne.n	8004a08 <_dtoa_r+0x818>
 80049b2:	2001      	movs	r0, #1
 80049b4:	e030      	b.n	8004a18 <_dtoa_r+0x828>
 80049b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80049b8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80049bc:	e795      	b.n	80048ea <_dtoa_r+0x6fa>
 80049be:	9b07      	ldr	r3, [sp, #28]
 80049c0:	f109 37ff 	add.w	r7, r9, #4294967295
 80049c4:	42bb      	cmp	r3, r7
 80049c6:	bfbf      	itttt	lt
 80049c8:	9b07      	ldrlt	r3, [sp, #28]
 80049ca:	9707      	strlt	r7, [sp, #28]
 80049cc:	1afa      	sublt	r2, r7, r3
 80049ce:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80049d0:	bfbb      	ittet	lt
 80049d2:	189b      	addlt	r3, r3, r2
 80049d4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80049d6:	1bdf      	subge	r7, r3, r7
 80049d8:	2700      	movlt	r7, #0
 80049da:	f1b9 0f00 	cmp.w	r9, #0
 80049de:	bfb5      	itete	lt
 80049e0:	9b05      	ldrlt	r3, [sp, #20]
 80049e2:	9d05      	ldrge	r5, [sp, #20]
 80049e4:	eba3 0509 	sublt.w	r5, r3, r9
 80049e8:	464b      	movge	r3, r9
 80049ea:	bfb8      	it	lt
 80049ec:	2300      	movlt	r3, #0
 80049ee:	e77e      	b.n	80048ee <_dtoa_r+0x6fe>
 80049f0:	9f07      	ldr	r7, [sp, #28]
 80049f2:	9d05      	ldr	r5, [sp, #20]
 80049f4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80049f6:	e783      	b.n	8004900 <_dtoa_r+0x710>
 80049f8:	9a07      	ldr	r2, [sp, #28]
 80049fa:	e7ab      	b.n	8004954 <_dtoa_r+0x764>
 80049fc:	2300      	movs	r3, #0
 80049fe:	e7d4      	b.n	80049aa <_dtoa_r+0x7ba>
 8004a00:	9b00      	ldr	r3, [sp, #0]
 8004a02:	e7d2      	b.n	80049aa <_dtoa_r+0x7ba>
 8004a04:	2300      	movs	r3, #0
 8004a06:	9307      	str	r3, [sp, #28]
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8004a0e:	6918      	ldr	r0, [r3, #16]
 8004a10:	f000 fa4d 	bl	8004eae <__hi0bits>
 8004a14:	f1c0 0020 	rsb	r0, r0, #32
 8004a18:	4440      	add	r0, r8
 8004a1a:	f010 001f 	ands.w	r0, r0, #31
 8004a1e:	d047      	beq.n	8004ab0 <_dtoa_r+0x8c0>
 8004a20:	f1c0 0320 	rsb	r3, r0, #32
 8004a24:	2b04      	cmp	r3, #4
 8004a26:	dd3b      	ble.n	8004aa0 <_dtoa_r+0x8b0>
 8004a28:	9b05      	ldr	r3, [sp, #20]
 8004a2a:	f1c0 001c 	rsb	r0, r0, #28
 8004a2e:	4403      	add	r3, r0
 8004a30:	9305      	str	r3, [sp, #20]
 8004a32:	4405      	add	r5, r0
 8004a34:	4480      	add	r8, r0
 8004a36:	9b05      	ldr	r3, [sp, #20]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	dd05      	ble.n	8004a48 <_dtoa_r+0x858>
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	9904      	ldr	r1, [sp, #16]
 8004a40:	4620      	mov	r0, r4
 8004a42:	f000 fb6f 	bl	8005124 <__lshift>
 8004a46:	9004      	str	r0, [sp, #16]
 8004a48:	f1b8 0f00 	cmp.w	r8, #0
 8004a4c:	dd05      	ble.n	8004a5a <_dtoa_r+0x86a>
 8004a4e:	4639      	mov	r1, r7
 8004a50:	4642      	mov	r2, r8
 8004a52:	4620      	mov	r0, r4
 8004a54:	f000 fb66 	bl	8005124 <__lshift>
 8004a58:	4607      	mov	r7, r0
 8004a5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a5c:	b353      	cbz	r3, 8004ab4 <_dtoa_r+0x8c4>
 8004a5e:	4639      	mov	r1, r7
 8004a60:	9804      	ldr	r0, [sp, #16]
 8004a62:	f000 fbb3 	bl	80051cc <__mcmp>
 8004a66:	2800      	cmp	r0, #0
 8004a68:	da24      	bge.n	8004ab4 <_dtoa_r+0x8c4>
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	220a      	movs	r2, #10
 8004a6e:	9904      	ldr	r1, [sp, #16]
 8004a70:	4620      	mov	r0, r4
 8004a72:	f000 f9e1 	bl	8004e38 <__multadd>
 8004a76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a78:	9004      	str	r0, [sp, #16]
 8004a7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f000 814d 	beq.w	8004d1e <_dtoa_r+0xb2e>
 8004a84:	2300      	movs	r3, #0
 8004a86:	4631      	mov	r1, r6
 8004a88:	220a      	movs	r2, #10
 8004a8a:	4620      	mov	r0, r4
 8004a8c:	f000 f9d4 	bl	8004e38 <__multadd>
 8004a90:	9b02      	ldr	r3, [sp, #8]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	4606      	mov	r6, r0
 8004a96:	dc4f      	bgt.n	8004b38 <_dtoa_r+0x948>
 8004a98:	9b06      	ldr	r3, [sp, #24]
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	dd4c      	ble.n	8004b38 <_dtoa_r+0x948>
 8004a9e:	e011      	b.n	8004ac4 <_dtoa_r+0x8d4>
 8004aa0:	d0c9      	beq.n	8004a36 <_dtoa_r+0x846>
 8004aa2:	9a05      	ldr	r2, [sp, #20]
 8004aa4:	331c      	adds	r3, #28
 8004aa6:	441a      	add	r2, r3
 8004aa8:	9205      	str	r2, [sp, #20]
 8004aaa:	441d      	add	r5, r3
 8004aac:	4498      	add	r8, r3
 8004aae:	e7c2      	b.n	8004a36 <_dtoa_r+0x846>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	e7f6      	b.n	8004aa2 <_dtoa_r+0x8b2>
 8004ab4:	f1b9 0f00 	cmp.w	r9, #0
 8004ab8:	dc38      	bgt.n	8004b2c <_dtoa_r+0x93c>
 8004aba:	9b06      	ldr	r3, [sp, #24]
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	dd35      	ble.n	8004b2c <_dtoa_r+0x93c>
 8004ac0:	f8cd 9008 	str.w	r9, [sp, #8]
 8004ac4:	9b02      	ldr	r3, [sp, #8]
 8004ac6:	b963      	cbnz	r3, 8004ae2 <_dtoa_r+0x8f2>
 8004ac8:	4639      	mov	r1, r7
 8004aca:	2205      	movs	r2, #5
 8004acc:	4620      	mov	r0, r4
 8004ace:	f000 f9b3 	bl	8004e38 <__multadd>
 8004ad2:	4601      	mov	r1, r0
 8004ad4:	4607      	mov	r7, r0
 8004ad6:	9804      	ldr	r0, [sp, #16]
 8004ad8:	f000 fb78 	bl	80051cc <__mcmp>
 8004adc:	2800      	cmp	r0, #0
 8004ade:	f73f adcc 	bgt.w	800467a <_dtoa_r+0x48a>
 8004ae2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ae4:	465d      	mov	r5, fp
 8004ae6:	ea6f 0a03 	mvn.w	sl, r3
 8004aea:	f04f 0900 	mov.w	r9, #0
 8004aee:	4639      	mov	r1, r7
 8004af0:	4620      	mov	r0, r4
 8004af2:	f000 f98a 	bl	8004e0a <_Bfree>
 8004af6:	2e00      	cmp	r6, #0
 8004af8:	f43f aeb7 	beq.w	800486a <_dtoa_r+0x67a>
 8004afc:	f1b9 0f00 	cmp.w	r9, #0
 8004b00:	d005      	beq.n	8004b0e <_dtoa_r+0x91e>
 8004b02:	45b1      	cmp	r9, r6
 8004b04:	d003      	beq.n	8004b0e <_dtoa_r+0x91e>
 8004b06:	4649      	mov	r1, r9
 8004b08:	4620      	mov	r0, r4
 8004b0a:	f000 f97e 	bl	8004e0a <_Bfree>
 8004b0e:	4631      	mov	r1, r6
 8004b10:	4620      	mov	r0, r4
 8004b12:	f000 f97a 	bl	8004e0a <_Bfree>
 8004b16:	e6a8      	b.n	800486a <_dtoa_r+0x67a>
 8004b18:	2700      	movs	r7, #0
 8004b1a:	463e      	mov	r6, r7
 8004b1c:	e7e1      	b.n	8004ae2 <_dtoa_r+0x8f2>
 8004b1e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8004b22:	463e      	mov	r6, r7
 8004b24:	e5a9      	b.n	800467a <_dtoa_r+0x48a>
 8004b26:	bf00      	nop
 8004b28:	40240000 	.word	0x40240000
 8004b2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b2e:	f8cd 9008 	str.w	r9, [sp, #8]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f000 80fa 	beq.w	8004d2c <_dtoa_r+0xb3c>
 8004b38:	2d00      	cmp	r5, #0
 8004b3a:	dd05      	ble.n	8004b48 <_dtoa_r+0x958>
 8004b3c:	4631      	mov	r1, r6
 8004b3e:	462a      	mov	r2, r5
 8004b40:	4620      	mov	r0, r4
 8004b42:	f000 faef 	bl	8005124 <__lshift>
 8004b46:	4606      	mov	r6, r0
 8004b48:	9b07      	ldr	r3, [sp, #28]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d04c      	beq.n	8004be8 <_dtoa_r+0x9f8>
 8004b4e:	6871      	ldr	r1, [r6, #4]
 8004b50:	4620      	mov	r0, r4
 8004b52:	f000 f926 	bl	8004da2 <_Balloc>
 8004b56:	6932      	ldr	r2, [r6, #16]
 8004b58:	3202      	adds	r2, #2
 8004b5a:	4605      	mov	r5, r0
 8004b5c:	0092      	lsls	r2, r2, #2
 8004b5e:	f106 010c 	add.w	r1, r6, #12
 8004b62:	300c      	adds	r0, #12
 8004b64:	f000 f912 	bl	8004d8c <memcpy>
 8004b68:	2201      	movs	r2, #1
 8004b6a:	4629      	mov	r1, r5
 8004b6c:	4620      	mov	r0, r4
 8004b6e:	f000 fad9 	bl	8005124 <__lshift>
 8004b72:	9b00      	ldr	r3, [sp, #0]
 8004b74:	f8cd b014 	str.w	fp, [sp, #20]
 8004b78:	f003 0301 	and.w	r3, r3, #1
 8004b7c:	46b1      	mov	r9, r6
 8004b7e:	9307      	str	r3, [sp, #28]
 8004b80:	4606      	mov	r6, r0
 8004b82:	4639      	mov	r1, r7
 8004b84:	9804      	ldr	r0, [sp, #16]
 8004b86:	f7ff faa7 	bl	80040d8 <quorem>
 8004b8a:	4649      	mov	r1, r9
 8004b8c:	4605      	mov	r5, r0
 8004b8e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004b92:	9804      	ldr	r0, [sp, #16]
 8004b94:	f000 fb1a 	bl	80051cc <__mcmp>
 8004b98:	4632      	mov	r2, r6
 8004b9a:	9000      	str	r0, [sp, #0]
 8004b9c:	4639      	mov	r1, r7
 8004b9e:	4620      	mov	r0, r4
 8004ba0:	f000 fb2e 	bl	8005200 <__mdiff>
 8004ba4:	68c3      	ldr	r3, [r0, #12]
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	bb03      	cbnz	r3, 8004bec <_dtoa_r+0x9fc>
 8004baa:	4601      	mov	r1, r0
 8004bac:	9008      	str	r0, [sp, #32]
 8004bae:	9804      	ldr	r0, [sp, #16]
 8004bb0:	f000 fb0c 	bl	80051cc <__mcmp>
 8004bb4:	9a08      	ldr	r2, [sp, #32]
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	4611      	mov	r1, r2
 8004bba:	4620      	mov	r0, r4
 8004bbc:	9308      	str	r3, [sp, #32]
 8004bbe:	f000 f924 	bl	8004e0a <_Bfree>
 8004bc2:	9b08      	ldr	r3, [sp, #32]
 8004bc4:	b9a3      	cbnz	r3, 8004bf0 <_dtoa_r+0xa00>
 8004bc6:	9a06      	ldr	r2, [sp, #24]
 8004bc8:	b992      	cbnz	r2, 8004bf0 <_dtoa_r+0xa00>
 8004bca:	9a07      	ldr	r2, [sp, #28]
 8004bcc:	b982      	cbnz	r2, 8004bf0 <_dtoa_r+0xa00>
 8004bce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004bd2:	d029      	beq.n	8004c28 <_dtoa_r+0xa38>
 8004bd4:	9b00      	ldr	r3, [sp, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	dd01      	ble.n	8004bde <_dtoa_r+0x9ee>
 8004bda:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8004bde:	9b05      	ldr	r3, [sp, #20]
 8004be0:	1c5d      	adds	r5, r3, #1
 8004be2:	f883 8000 	strb.w	r8, [r3]
 8004be6:	e782      	b.n	8004aee <_dtoa_r+0x8fe>
 8004be8:	4630      	mov	r0, r6
 8004bea:	e7c2      	b.n	8004b72 <_dtoa_r+0x982>
 8004bec:	2301      	movs	r3, #1
 8004bee:	e7e3      	b.n	8004bb8 <_dtoa_r+0x9c8>
 8004bf0:	9a00      	ldr	r2, [sp, #0]
 8004bf2:	2a00      	cmp	r2, #0
 8004bf4:	db04      	blt.n	8004c00 <_dtoa_r+0xa10>
 8004bf6:	d125      	bne.n	8004c44 <_dtoa_r+0xa54>
 8004bf8:	9a06      	ldr	r2, [sp, #24]
 8004bfa:	bb1a      	cbnz	r2, 8004c44 <_dtoa_r+0xa54>
 8004bfc:	9a07      	ldr	r2, [sp, #28]
 8004bfe:	bb0a      	cbnz	r2, 8004c44 <_dtoa_r+0xa54>
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	ddec      	ble.n	8004bde <_dtoa_r+0x9ee>
 8004c04:	2201      	movs	r2, #1
 8004c06:	9904      	ldr	r1, [sp, #16]
 8004c08:	4620      	mov	r0, r4
 8004c0a:	f000 fa8b 	bl	8005124 <__lshift>
 8004c0e:	4639      	mov	r1, r7
 8004c10:	9004      	str	r0, [sp, #16]
 8004c12:	f000 fadb 	bl	80051cc <__mcmp>
 8004c16:	2800      	cmp	r0, #0
 8004c18:	dc03      	bgt.n	8004c22 <_dtoa_r+0xa32>
 8004c1a:	d1e0      	bne.n	8004bde <_dtoa_r+0x9ee>
 8004c1c:	f018 0f01 	tst.w	r8, #1
 8004c20:	d0dd      	beq.n	8004bde <_dtoa_r+0x9ee>
 8004c22:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004c26:	d1d8      	bne.n	8004bda <_dtoa_r+0x9ea>
 8004c28:	9b05      	ldr	r3, [sp, #20]
 8004c2a:	9a05      	ldr	r2, [sp, #20]
 8004c2c:	1c5d      	adds	r5, r3, #1
 8004c2e:	2339      	movs	r3, #57	; 0x39
 8004c30:	7013      	strb	r3, [r2, #0]
 8004c32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004c36:	2b39      	cmp	r3, #57	; 0x39
 8004c38:	f105 32ff 	add.w	r2, r5, #4294967295
 8004c3c:	d04f      	beq.n	8004cde <_dtoa_r+0xaee>
 8004c3e:	3301      	adds	r3, #1
 8004c40:	7013      	strb	r3, [r2, #0]
 8004c42:	e754      	b.n	8004aee <_dtoa_r+0x8fe>
 8004c44:	9a05      	ldr	r2, [sp, #20]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	f102 0501 	add.w	r5, r2, #1
 8004c4c:	dd06      	ble.n	8004c5c <_dtoa_r+0xa6c>
 8004c4e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004c52:	d0e9      	beq.n	8004c28 <_dtoa_r+0xa38>
 8004c54:	f108 0801 	add.w	r8, r8, #1
 8004c58:	9b05      	ldr	r3, [sp, #20]
 8004c5a:	e7c2      	b.n	8004be2 <_dtoa_r+0x9f2>
 8004c5c:	9a02      	ldr	r2, [sp, #8]
 8004c5e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8004c62:	eba5 030b 	sub.w	r3, r5, fp
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d021      	beq.n	8004cae <_dtoa_r+0xabe>
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	220a      	movs	r2, #10
 8004c6e:	9904      	ldr	r1, [sp, #16]
 8004c70:	4620      	mov	r0, r4
 8004c72:	f000 f8e1 	bl	8004e38 <__multadd>
 8004c76:	45b1      	cmp	r9, r6
 8004c78:	9004      	str	r0, [sp, #16]
 8004c7a:	f04f 0300 	mov.w	r3, #0
 8004c7e:	f04f 020a 	mov.w	r2, #10
 8004c82:	4649      	mov	r1, r9
 8004c84:	4620      	mov	r0, r4
 8004c86:	d105      	bne.n	8004c94 <_dtoa_r+0xaa4>
 8004c88:	f000 f8d6 	bl	8004e38 <__multadd>
 8004c8c:	4681      	mov	r9, r0
 8004c8e:	4606      	mov	r6, r0
 8004c90:	9505      	str	r5, [sp, #20]
 8004c92:	e776      	b.n	8004b82 <_dtoa_r+0x992>
 8004c94:	f000 f8d0 	bl	8004e38 <__multadd>
 8004c98:	4631      	mov	r1, r6
 8004c9a:	4681      	mov	r9, r0
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	220a      	movs	r2, #10
 8004ca0:	4620      	mov	r0, r4
 8004ca2:	f000 f8c9 	bl	8004e38 <__multadd>
 8004ca6:	4606      	mov	r6, r0
 8004ca8:	e7f2      	b.n	8004c90 <_dtoa_r+0xaa0>
 8004caa:	f04f 0900 	mov.w	r9, #0
 8004cae:	2201      	movs	r2, #1
 8004cb0:	9904      	ldr	r1, [sp, #16]
 8004cb2:	4620      	mov	r0, r4
 8004cb4:	f000 fa36 	bl	8005124 <__lshift>
 8004cb8:	4639      	mov	r1, r7
 8004cba:	9004      	str	r0, [sp, #16]
 8004cbc:	f000 fa86 	bl	80051cc <__mcmp>
 8004cc0:	2800      	cmp	r0, #0
 8004cc2:	dcb6      	bgt.n	8004c32 <_dtoa_r+0xa42>
 8004cc4:	d102      	bne.n	8004ccc <_dtoa_r+0xadc>
 8004cc6:	f018 0f01 	tst.w	r8, #1
 8004cca:	d1b2      	bne.n	8004c32 <_dtoa_r+0xa42>
 8004ccc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004cd0:	2b30      	cmp	r3, #48	; 0x30
 8004cd2:	f105 32ff 	add.w	r2, r5, #4294967295
 8004cd6:	f47f af0a 	bne.w	8004aee <_dtoa_r+0x8fe>
 8004cda:	4615      	mov	r5, r2
 8004cdc:	e7f6      	b.n	8004ccc <_dtoa_r+0xadc>
 8004cde:	4593      	cmp	fp, r2
 8004ce0:	d105      	bne.n	8004cee <_dtoa_r+0xafe>
 8004ce2:	2331      	movs	r3, #49	; 0x31
 8004ce4:	f10a 0a01 	add.w	sl, sl, #1
 8004ce8:	f88b 3000 	strb.w	r3, [fp]
 8004cec:	e6ff      	b.n	8004aee <_dtoa_r+0x8fe>
 8004cee:	4615      	mov	r5, r2
 8004cf0:	e79f      	b.n	8004c32 <_dtoa_r+0xa42>
 8004cf2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8004d58 <_dtoa_r+0xb68>
 8004cf6:	e007      	b.n	8004d08 <_dtoa_r+0xb18>
 8004cf8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004cfa:	f8df b060 	ldr.w	fp, [pc, #96]	; 8004d5c <_dtoa_r+0xb6c>
 8004cfe:	b11b      	cbz	r3, 8004d08 <_dtoa_r+0xb18>
 8004d00:	f10b 0308 	add.w	r3, fp, #8
 8004d04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004d06:	6013      	str	r3, [r2, #0]
 8004d08:	4658      	mov	r0, fp
 8004d0a:	b017      	add	sp, #92	; 0x5c
 8004d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d10:	9b06      	ldr	r3, [sp, #24]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	f77f ae35 	ble.w	8004982 <_dtoa_r+0x792>
 8004d18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d1a:	9307      	str	r3, [sp, #28]
 8004d1c:	e649      	b.n	80049b2 <_dtoa_r+0x7c2>
 8004d1e:	9b02      	ldr	r3, [sp, #8]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	dc03      	bgt.n	8004d2c <_dtoa_r+0xb3c>
 8004d24:	9b06      	ldr	r3, [sp, #24]
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	f73f aecc 	bgt.w	8004ac4 <_dtoa_r+0x8d4>
 8004d2c:	465d      	mov	r5, fp
 8004d2e:	4639      	mov	r1, r7
 8004d30:	9804      	ldr	r0, [sp, #16]
 8004d32:	f7ff f9d1 	bl	80040d8 <quorem>
 8004d36:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004d3a:	f805 8b01 	strb.w	r8, [r5], #1
 8004d3e:	9a02      	ldr	r2, [sp, #8]
 8004d40:	eba5 030b 	sub.w	r3, r5, fp
 8004d44:	429a      	cmp	r2, r3
 8004d46:	ddb0      	ble.n	8004caa <_dtoa_r+0xaba>
 8004d48:	2300      	movs	r3, #0
 8004d4a:	220a      	movs	r2, #10
 8004d4c:	9904      	ldr	r1, [sp, #16]
 8004d4e:	4620      	mov	r0, r4
 8004d50:	f000 f872 	bl	8004e38 <__multadd>
 8004d54:	9004      	str	r0, [sp, #16]
 8004d56:	e7ea      	b.n	8004d2e <_dtoa_r+0xb3e>
 8004d58:	08005904 	.word	0x08005904
 8004d5c:	08005928 	.word	0x08005928

08004d60 <_localeconv_r>:
 8004d60:	4b04      	ldr	r3, [pc, #16]	; (8004d74 <_localeconv_r+0x14>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6a18      	ldr	r0, [r3, #32]
 8004d66:	4b04      	ldr	r3, [pc, #16]	; (8004d78 <_localeconv_r+0x18>)
 8004d68:	2800      	cmp	r0, #0
 8004d6a:	bf08      	it	eq
 8004d6c:	4618      	moveq	r0, r3
 8004d6e:	30f0      	adds	r0, #240	; 0xf0
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	2000000c 	.word	0x2000000c
 8004d78:	20000070 	.word	0x20000070

08004d7c <malloc>:
 8004d7c:	4b02      	ldr	r3, [pc, #8]	; (8004d88 <malloc+0xc>)
 8004d7e:	4601      	mov	r1, r0
 8004d80:	6818      	ldr	r0, [r3, #0]
 8004d82:	f000 bb45 	b.w	8005410 <_malloc_r>
 8004d86:	bf00      	nop
 8004d88:	2000000c 	.word	0x2000000c

08004d8c <memcpy>:
 8004d8c:	b510      	push	{r4, lr}
 8004d8e:	1e43      	subs	r3, r0, #1
 8004d90:	440a      	add	r2, r1
 8004d92:	4291      	cmp	r1, r2
 8004d94:	d100      	bne.n	8004d98 <memcpy+0xc>
 8004d96:	bd10      	pop	{r4, pc}
 8004d98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004da0:	e7f7      	b.n	8004d92 <memcpy+0x6>

08004da2 <_Balloc>:
 8004da2:	b570      	push	{r4, r5, r6, lr}
 8004da4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004da6:	4604      	mov	r4, r0
 8004da8:	460e      	mov	r6, r1
 8004daa:	b93d      	cbnz	r5, 8004dbc <_Balloc+0x1a>
 8004dac:	2010      	movs	r0, #16
 8004dae:	f7ff ffe5 	bl	8004d7c <malloc>
 8004db2:	6260      	str	r0, [r4, #36]	; 0x24
 8004db4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004db8:	6005      	str	r5, [r0, #0]
 8004dba:	60c5      	str	r5, [r0, #12]
 8004dbc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004dbe:	68eb      	ldr	r3, [r5, #12]
 8004dc0:	b183      	cbz	r3, 8004de4 <_Balloc+0x42>
 8004dc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004dca:	b9b8      	cbnz	r0, 8004dfc <_Balloc+0x5a>
 8004dcc:	2101      	movs	r1, #1
 8004dce:	fa01 f506 	lsl.w	r5, r1, r6
 8004dd2:	1d6a      	adds	r2, r5, #5
 8004dd4:	0092      	lsls	r2, r2, #2
 8004dd6:	4620      	mov	r0, r4
 8004dd8:	f000 fabe 	bl	8005358 <_calloc_r>
 8004ddc:	b160      	cbz	r0, 8004df8 <_Balloc+0x56>
 8004dde:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8004de2:	e00e      	b.n	8004e02 <_Balloc+0x60>
 8004de4:	2221      	movs	r2, #33	; 0x21
 8004de6:	2104      	movs	r1, #4
 8004de8:	4620      	mov	r0, r4
 8004dea:	f000 fab5 	bl	8005358 <_calloc_r>
 8004dee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004df0:	60e8      	str	r0, [r5, #12]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1e4      	bne.n	8004dc2 <_Balloc+0x20>
 8004df8:	2000      	movs	r0, #0
 8004dfa:	bd70      	pop	{r4, r5, r6, pc}
 8004dfc:	6802      	ldr	r2, [r0, #0]
 8004dfe:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004e02:	2300      	movs	r3, #0
 8004e04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004e08:	e7f7      	b.n	8004dfa <_Balloc+0x58>

08004e0a <_Bfree>:
 8004e0a:	b570      	push	{r4, r5, r6, lr}
 8004e0c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004e0e:	4606      	mov	r6, r0
 8004e10:	460d      	mov	r5, r1
 8004e12:	b93c      	cbnz	r4, 8004e24 <_Bfree+0x1a>
 8004e14:	2010      	movs	r0, #16
 8004e16:	f7ff ffb1 	bl	8004d7c <malloc>
 8004e1a:	6270      	str	r0, [r6, #36]	; 0x24
 8004e1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004e20:	6004      	str	r4, [r0, #0]
 8004e22:	60c4      	str	r4, [r0, #12]
 8004e24:	b13d      	cbz	r5, 8004e36 <_Bfree+0x2c>
 8004e26:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004e28:	686a      	ldr	r2, [r5, #4]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004e30:	6029      	str	r1, [r5, #0]
 8004e32:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004e36:	bd70      	pop	{r4, r5, r6, pc}

08004e38 <__multadd>:
 8004e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e3c:	690d      	ldr	r5, [r1, #16]
 8004e3e:	461f      	mov	r7, r3
 8004e40:	4606      	mov	r6, r0
 8004e42:	460c      	mov	r4, r1
 8004e44:	f101 0c14 	add.w	ip, r1, #20
 8004e48:	2300      	movs	r3, #0
 8004e4a:	f8dc 0000 	ldr.w	r0, [ip]
 8004e4e:	b281      	uxth	r1, r0
 8004e50:	fb02 7101 	mla	r1, r2, r1, r7
 8004e54:	0c0f      	lsrs	r7, r1, #16
 8004e56:	0c00      	lsrs	r0, r0, #16
 8004e58:	fb02 7000 	mla	r0, r2, r0, r7
 8004e5c:	b289      	uxth	r1, r1
 8004e5e:	3301      	adds	r3, #1
 8004e60:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004e64:	429d      	cmp	r5, r3
 8004e66:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004e6a:	f84c 1b04 	str.w	r1, [ip], #4
 8004e6e:	dcec      	bgt.n	8004e4a <__multadd+0x12>
 8004e70:	b1d7      	cbz	r7, 8004ea8 <__multadd+0x70>
 8004e72:	68a3      	ldr	r3, [r4, #8]
 8004e74:	42ab      	cmp	r3, r5
 8004e76:	dc12      	bgt.n	8004e9e <__multadd+0x66>
 8004e78:	6861      	ldr	r1, [r4, #4]
 8004e7a:	4630      	mov	r0, r6
 8004e7c:	3101      	adds	r1, #1
 8004e7e:	f7ff ff90 	bl	8004da2 <_Balloc>
 8004e82:	6922      	ldr	r2, [r4, #16]
 8004e84:	3202      	adds	r2, #2
 8004e86:	f104 010c 	add.w	r1, r4, #12
 8004e8a:	4680      	mov	r8, r0
 8004e8c:	0092      	lsls	r2, r2, #2
 8004e8e:	300c      	adds	r0, #12
 8004e90:	f7ff ff7c 	bl	8004d8c <memcpy>
 8004e94:	4621      	mov	r1, r4
 8004e96:	4630      	mov	r0, r6
 8004e98:	f7ff ffb7 	bl	8004e0a <_Bfree>
 8004e9c:	4644      	mov	r4, r8
 8004e9e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004ea2:	3501      	adds	r5, #1
 8004ea4:	615f      	str	r7, [r3, #20]
 8004ea6:	6125      	str	r5, [r4, #16]
 8004ea8:	4620      	mov	r0, r4
 8004eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004eae <__hi0bits>:
 8004eae:	0c02      	lsrs	r2, r0, #16
 8004eb0:	0412      	lsls	r2, r2, #16
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	b9b2      	cbnz	r2, 8004ee4 <__hi0bits+0x36>
 8004eb6:	0403      	lsls	r3, r0, #16
 8004eb8:	2010      	movs	r0, #16
 8004eba:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004ebe:	bf04      	itt	eq
 8004ec0:	021b      	lsleq	r3, r3, #8
 8004ec2:	3008      	addeq	r0, #8
 8004ec4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004ec8:	bf04      	itt	eq
 8004eca:	011b      	lsleq	r3, r3, #4
 8004ecc:	3004      	addeq	r0, #4
 8004ece:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004ed2:	bf04      	itt	eq
 8004ed4:	009b      	lsleq	r3, r3, #2
 8004ed6:	3002      	addeq	r0, #2
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	db06      	blt.n	8004eea <__hi0bits+0x3c>
 8004edc:	005b      	lsls	r3, r3, #1
 8004ede:	d503      	bpl.n	8004ee8 <__hi0bits+0x3a>
 8004ee0:	3001      	adds	r0, #1
 8004ee2:	4770      	bx	lr
 8004ee4:	2000      	movs	r0, #0
 8004ee6:	e7e8      	b.n	8004eba <__hi0bits+0xc>
 8004ee8:	2020      	movs	r0, #32
 8004eea:	4770      	bx	lr

08004eec <__lo0bits>:
 8004eec:	6803      	ldr	r3, [r0, #0]
 8004eee:	f013 0207 	ands.w	r2, r3, #7
 8004ef2:	4601      	mov	r1, r0
 8004ef4:	d00b      	beq.n	8004f0e <__lo0bits+0x22>
 8004ef6:	07da      	lsls	r2, r3, #31
 8004ef8:	d423      	bmi.n	8004f42 <__lo0bits+0x56>
 8004efa:	0798      	lsls	r0, r3, #30
 8004efc:	bf49      	itett	mi
 8004efe:	085b      	lsrmi	r3, r3, #1
 8004f00:	089b      	lsrpl	r3, r3, #2
 8004f02:	2001      	movmi	r0, #1
 8004f04:	600b      	strmi	r3, [r1, #0]
 8004f06:	bf5c      	itt	pl
 8004f08:	600b      	strpl	r3, [r1, #0]
 8004f0a:	2002      	movpl	r0, #2
 8004f0c:	4770      	bx	lr
 8004f0e:	b298      	uxth	r0, r3
 8004f10:	b9a8      	cbnz	r0, 8004f3e <__lo0bits+0x52>
 8004f12:	0c1b      	lsrs	r3, r3, #16
 8004f14:	2010      	movs	r0, #16
 8004f16:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004f1a:	bf04      	itt	eq
 8004f1c:	0a1b      	lsreq	r3, r3, #8
 8004f1e:	3008      	addeq	r0, #8
 8004f20:	071a      	lsls	r2, r3, #28
 8004f22:	bf04      	itt	eq
 8004f24:	091b      	lsreq	r3, r3, #4
 8004f26:	3004      	addeq	r0, #4
 8004f28:	079a      	lsls	r2, r3, #30
 8004f2a:	bf04      	itt	eq
 8004f2c:	089b      	lsreq	r3, r3, #2
 8004f2e:	3002      	addeq	r0, #2
 8004f30:	07da      	lsls	r2, r3, #31
 8004f32:	d402      	bmi.n	8004f3a <__lo0bits+0x4e>
 8004f34:	085b      	lsrs	r3, r3, #1
 8004f36:	d006      	beq.n	8004f46 <__lo0bits+0x5a>
 8004f38:	3001      	adds	r0, #1
 8004f3a:	600b      	str	r3, [r1, #0]
 8004f3c:	4770      	bx	lr
 8004f3e:	4610      	mov	r0, r2
 8004f40:	e7e9      	b.n	8004f16 <__lo0bits+0x2a>
 8004f42:	2000      	movs	r0, #0
 8004f44:	4770      	bx	lr
 8004f46:	2020      	movs	r0, #32
 8004f48:	4770      	bx	lr

08004f4a <__i2b>:
 8004f4a:	b510      	push	{r4, lr}
 8004f4c:	460c      	mov	r4, r1
 8004f4e:	2101      	movs	r1, #1
 8004f50:	f7ff ff27 	bl	8004da2 <_Balloc>
 8004f54:	2201      	movs	r2, #1
 8004f56:	6144      	str	r4, [r0, #20]
 8004f58:	6102      	str	r2, [r0, #16]
 8004f5a:	bd10      	pop	{r4, pc}

08004f5c <__multiply>:
 8004f5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f60:	4614      	mov	r4, r2
 8004f62:	690a      	ldr	r2, [r1, #16]
 8004f64:	6923      	ldr	r3, [r4, #16]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	bfb8      	it	lt
 8004f6a:	460b      	movlt	r3, r1
 8004f6c:	4688      	mov	r8, r1
 8004f6e:	bfbc      	itt	lt
 8004f70:	46a0      	movlt	r8, r4
 8004f72:	461c      	movlt	r4, r3
 8004f74:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004f78:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004f7c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004f80:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004f84:	eb07 0609 	add.w	r6, r7, r9
 8004f88:	42b3      	cmp	r3, r6
 8004f8a:	bfb8      	it	lt
 8004f8c:	3101      	addlt	r1, #1
 8004f8e:	f7ff ff08 	bl	8004da2 <_Balloc>
 8004f92:	f100 0514 	add.w	r5, r0, #20
 8004f96:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8004f9a:	462b      	mov	r3, r5
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	4573      	cmp	r3, lr
 8004fa0:	d316      	bcc.n	8004fd0 <__multiply+0x74>
 8004fa2:	f104 0214 	add.w	r2, r4, #20
 8004fa6:	f108 0114 	add.w	r1, r8, #20
 8004faa:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8004fae:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	9b00      	ldr	r3, [sp, #0]
 8004fb6:	9201      	str	r2, [sp, #4]
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d80c      	bhi.n	8004fd6 <__multiply+0x7a>
 8004fbc:	2e00      	cmp	r6, #0
 8004fbe:	dd03      	ble.n	8004fc8 <__multiply+0x6c>
 8004fc0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d05d      	beq.n	8005084 <__multiply+0x128>
 8004fc8:	6106      	str	r6, [r0, #16]
 8004fca:	b003      	add	sp, #12
 8004fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fd0:	f843 2b04 	str.w	r2, [r3], #4
 8004fd4:	e7e3      	b.n	8004f9e <__multiply+0x42>
 8004fd6:	f8b2 b000 	ldrh.w	fp, [r2]
 8004fda:	f1bb 0f00 	cmp.w	fp, #0
 8004fde:	d023      	beq.n	8005028 <__multiply+0xcc>
 8004fe0:	4689      	mov	r9, r1
 8004fe2:	46ac      	mov	ip, r5
 8004fe4:	f04f 0800 	mov.w	r8, #0
 8004fe8:	f859 4b04 	ldr.w	r4, [r9], #4
 8004fec:	f8dc a000 	ldr.w	sl, [ip]
 8004ff0:	b2a3      	uxth	r3, r4
 8004ff2:	fa1f fa8a 	uxth.w	sl, sl
 8004ff6:	fb0b a303 	mla	r3, fp, r3, sl
 8004ffa:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004ffe:	f8dc 4000 	ldr.w	r4, [ip]
 8005002:	4443      	add	r3, r8
 8005004:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005008:	fb0b 840a 	mla	r4, fp, sl, r8
 800500c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005010:	46e2      	mov	sl, ip
 8005012:	b29b      	uxth	r3, r3
 8005014:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005018:	454f      	cmp	r7, r9
 800501a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800501e:	f84a 3b04 	str.w	r3, [sl], #4
 8005022:	d82b      	bhi.n	800507c <__multiply+0x120>
 8005024:	f8cc 8004 	str.w	r8, [ip, #4]
 8005028:	9b01      	ldr	r3, [sp, #4]
 800502a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800502e:	3204      	adds	r2, #4
 8005030:	f1ba 0f00 	cmp.w	sl, #0
 8005034:	d020      	beq.n	8005078 <__multiply+0x11c>
 8005036:	682b      	ldr	r3, [r5, #0]
 8005038:	4689      	mov	r9, r1
 800503a:	46a8      	mov	r8, r5
 800503c:	f04f 0b00 	mov.w	fp, #0
 8005040:	f8b9 c000 	ldrh.w	ip, [r9]
 8005044:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005048:	fb0a 440c 	mla	r4, sl, ip, r4
 800504c:	445c      	add	r4, fp
 800504e:	46c4      	mov	ip, r8
 8005050:	b29b      	uxth	r3, r3
 8005052:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005056:	f84c 3b04 	str.w	r3, [ip], #4
 800505a:	f859 3b04 	ldr.w	r3, [r9], #4
 800505e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005062:	0c1b      	lsrs	r3, r3, #16
 8005064:	fb0a b303 	mla	r3, sl, r3, fp
 8005068:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800506c:	454f      	cmp	r7, r9
 800506e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005072:	d805      	bhi.n	8005080 <__multiply+0x124>
 8005074:	f8c8 3004 	str.w	r3, [r8, #4]
 8005078:	3504      	adds	r5, #4
 800507a:	e79b      	b.n	8004fb4 <__multiply+0x58>
 800507c:	46d4      	mov	ip, sl
 800507e:	e7b3      	b.n	8004fe8 <__multiply+0x8c>
 8005080:	46e0      	mov	r8, ip
 8005082:	e7dd      	b.n	8005040 <__multiply+0xe4>
 8005084:	3e01      	subs	r6, #1
 8005086:	e799      	b.n	8004fbc <__multiply+0x60>

08005088 <__pow5mult>:
 8005088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800508c:	4615      	mov	r5, r2
 800508e:	f012 0203 	ands.w	r2, r2, #3
 8005092:	4606      	mov	r6, r0
 8005094:	460f      	mov	r7, r1
 8005096:	d007      	beq.n	80050a8 <__pow5mult+0x20>
 8005098:	3a01      	subs	r2, #1
 800509a:	4c21      	ldr	r4, [pc, #132]	; (8005120 <__pow5mult+0x98>)
 800509c:	2300      	movs	r3, #0
 800509e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80050a2:	f7ff fec9 	bl	8004e38 <__multadd>
 80050a6:	4607      	mov	r7, r0
 80050a8:	10ad      	asrs	r5, r5, #2
 80050aa:	d035      	beq.n	8005118 <__pow5mult+0x90>
 80050ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80050ae:	b93c      	cbnz	r4, 80050c0 <__pow5mult+0x38>
 80050b0:	2010      	movs	r0, #16
 80050b2:	f7ff fe63 	bl	8004d7c <malloc>
 80050b6:	6270      	str	r0, [r6, #36]	; 0x24
 80050b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80050bc:	6004      	str	r4, [r0, #0]
 80050be:	60c4      	str	r4, [r0, #12]
 80050c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80050c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80050c8:	b94c      	cbnz	r4, 80050de <__pow5mult+0x56>
 80050ca:	f240 2171 	movw	r1, #625	; 0x271
 80050ce:	4630      	mov	r0, r6
 80050d0:	f7ff ff3b 	bl	8004f4a <__i2b>
 80050d4:	2300      	movs	r3, #0
 80050d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80050da:	4604      	mov	r4, r0
 80050dc:	6003      	str	r3, [r0, #0]
 80050de:	f04f 0800 	mov.w	r8, #0
 80050e2:	07eb      	lsls	r3, r5, #31
 80050e4:	d50a      	bpl.n	80050fc <__pow5mult+0x74>
 80050e6:	4639      	mov	r1, r7
 80050e8:	4622      	mov	r2, r4
 80050ea:	4630      	mov	r0, r6
 80050ec:	f7ff ff36 	bl	8004f5c <__multiply>
 80050f0:	4639      	mov	r1, r7
 80050f2:	4681      	mov	r9, r0
 80050f4:	4630      	mov	r0, r6
 80050f6:	f7ff fe88 	bl	8004e0a <_Bfree>
 80050fa:	464f      	mov	r7, r9
 80050fc:	106d      	asrs	r5, r5, #1
 80050fe:	d00b      	beq.n	8005118 <__pow5mult+0x90>
 8005100:	6820      	ldr	r0, [r4, #0]
 8005102:	b938      	cbnz	r0, 8005114 <__pow5mult+0x8c>
 8005104:	4622      	mov	r2, r4
 8005106:	4621      	mov	r1, r4
 8005108:	4630      	mov	r0, r6
 800510a:	f7ff ff27 	bl	8004f5c <__multiply>
 800510e:	6020      	str	r0, [r4, #0]
 8005110:	f8c0 8000 	str.w	r8, [r0]
 8005114:	4604      	mov	r4, r0
 8005116:	e7e4      	b.n	80050e2 <__pow5mult+0x5a>
 8005118:	4638      	mov	r0, r7
 800511a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800511e:	bf00      	nop
 8005120:	08005a28 	.word	0x08005a28

08005124 <__lshift>:
 8005124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005128:	460c      	mov	r4, r1
 800512a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800512e:	6923      	ldr	r3, [r4, #16]
 8005130:	6849      	ldr	r1, [r1, #4]
 8005132:	eb0a 0903 	add.w	r9, sl, r3
 8005136:	68a3      	ldr	r3, [r4, #8]
 8005138:	4607      	mov	r7, r0
 800513a:	4616      	mov	r6, r2
 800513c:	f109 0501 	add.w	r5, r9, #1
 8005140:	42ab      	cmp	r3, r5
 8005142:	db32      	blt.n	80051aa <__lshift+0x86>
 8005144:	4638      	mov	r0, r7
 8005146:	f7ff fe2c 	bl	8004da2 <_Balloc>
 800514a:	2300      	movs	r3, #0
 800514c:	4680      	mov	r8, r0
 800514e:	f100 0114 	add.w	r1, r0, #20
 8005152:	461a      	mov	r2, r3
 8005154:	4553      	cmp	r3, sl
 8005156:	db2b      	blt.n	80051b0 <__lshift+0x8c>
 8005158:	6920      	ldr	r0, [r4, #16]
 800515a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800515e:	f104 0314 	add.w	r3, r4, #20
 8005162:	f016 021f 	ands.w	r2, r6, #31
 8005166:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800516a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800516e:	d025      	beq.n	80051bc <__lshift+0x98>
 8005170:	f1c2 0e20 	rsb	lr, r2, #32
 8005174:	2000      	movs	r0, #0
 8005176:	681e      	ldr	r6, [r3, #0]
 8005178:	468a      	mov	sl, r1
 800517a:	4096      	lsls	r6, r2
 800517c:	4330      	orrs	r0, r6
 800517e:	f84a 0b04 	str.w	r0, [sl], #4
 8005182:	f853 0b04 	ldr.w	r0, [r3], #4
 8005186:	459c      	cmp	ip, r3
 8005188:	fa20 f00e 	lsr.w	r0, r0, lr
 800518c:	d814      	bhi.n	80051b8 <__lshift+0x94>
 800518e:	6048      	str	r0, [r1, #4]
 8005190:	b108      	cbz	r0, 8005196 <__lshift+0x72>
 8005192:	f109 0502 	add.w	r5, r9, #2
 8005196:	3d01      	subs	r5, #1
 8005198:	4638      	mov	r0, r7
 800519a:	f8c8 5010 	str.w	r5, [r8, #16]
 800519e:	4621      	mov	r1, r4
 80051a0:	f7ff fe33 	bl	8004e0a <_Bfree>
 80051a4:	4640      	mov	r0, r8
 80051a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051aa:	3101      	adds	r1, #1
 80051ac:	005b      	lsls	r3, r3, #1
 80051ae:	e7c7      	b.n	8005140 <__lshift+0x1c>
 80051b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80051b4:	3301      	adds	r3, #1
 80051b6:	e7cd      	b.n	8005154 <__lshift+0x30>
 80051b8:	4651      	mov	r1, sl
 80051ba:	e7dc      	b.n	8005176 <__lshift+0x52>
 80051bc:	3904      	subs	r1, #4
 80051be:	f853 2b04 	ldr.w	r2, [r3], #4
 80051c2:	f841 2f04 	str.w	r2, [r1, #4]!
 80051c6:	459c      	cmp	ip, r3
 80051c8:	d8f9      	bhi.n	80051be <__lshift+0x9a>
 80051ca:	e7e4      	b.n	8005196 <__lshift+0x72>

080051cc <__mcmp>:
 80051cc:	6903      	ldr	r3, [r0, #16]
 80051ce:	690a      	ldr	r2, [r1, #16]
 80051d0:	1a9b      	subs	r3, r3, r2
 80051d2:	b530      	push	{r4, r5, lr}
 80051d4:	d10c      	bne.n	80051f0 <__mcmp+0x24>
 80051d6:	0092      	lsls	r2, r2, #2
 80051d8:	3014      	adds	r0, #20
 80051da:	3114      	adds	r1, #20
 80051dc:	1884      	adds	r4, r0, r2
 80051de:	4411      	add	r1, r2
 80051e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80051e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80051e8:	4295      	cmp	r5, r2
 80051ea:	d003      	beq.n	80051f4 <__mcmp+0x28>
 80051ec:	d305      	bcc.n	80051fa <__mcmp+0x2e>
 80051ee:	2301      	movs	r3, #1
 80051f0:	4618      	mov	r0, r3
 80051f2:	bd30      	pop	{r4, r5, pc}
 80051f4:	42a0      	cmp	r0, r4
 80051f6:	d3f3      	bcc.n	80051e0 <__mcmp+0x14>
 80051f8:	e7fa      	b.n	80051f0 <__mcmp+0x24>
 80051fa:	f04f 33ff 	mov.w	r3, #4294967295
 80051fe:	e7f7      	b.n	80051f0 <__mcmp+0x24>

08005200 <__mdiff>:
 8005200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005204:	460d      	mov	r5, r1
 8005206:	4607      	mov	r7, r0
 8005208:	4611      	mov	r1, r2
 800520a:	4628      	mov	r0, r5
 800520c:	4614      	mov	r4, r2
 800520e:	f7ff ffdd 	bl	80051cc <__mcmp>
 8005212:	1e06      	subs	r6, r0, #0
 8005214:	d108      	bne.n	8005228 <__mdiff+0x28>
 8005216:	4631      	mov	r1, r6
 8005218:	4638      	mov	r0, r7
 800521a:	f7ff fdc2 	bl	8004da2 <_Balloc>
 800521e:	2301      	movs	r3, #1
 8005220:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005228:	bfa4      	itt	ge
 800522a:	4623      	movge	r3, r4
 800522c:	462c      	movge	r4, r5
 800522e:	4638      	mov	r0, r7
 8005230:	6861      	ldr	r1, [r4, #4]
 8005232:	bfa6      	itte	ge
 8005234:	461d      	movge	r5, r3
 8005236:	2600      	movge	r6, #0
 8005238:	2601      	movlt	r6, #1
 800523a:	f7ff fdb2 	bl	8004da2 <_Balloc>
 800523e:	692b      	ldr	r3, [r5, #16]
 8005240:	60c6      	str	r6, [r0, #12]
 8005242:	6926      	ldr	r6, [r4, #16]
 8005244:	f105 0914 	add.w	r9, r5, #20
 8005248:	f104 0214 	add.w	r2, r4, #20
 800524c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005250:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005254:	f100 0514 	add.w	r5, r0, #20
 8005258:	f04f 0e00 	mov.w	lr, #0
 800525c:	f852 ab04 	ldr.w	sl, [r2], #4
 8005260:	f859 4b04 	ldr.w	r4, [r9], #4
 8005264:	fa1e f18a 	uxtah	r1, lr, sl
 8005268:	b2a3      	uxth	r3, r4
 800526a:	1ac9      	subs	r1, r1, r3
 800526c:	0c23      	lsrs	r3, r4, #16
 800526e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8005272:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005276:	b289      	uxth	r1, r1
 8005278:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800527c:	45c8      	cmp	r8, r9
 800527e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005282:	4694      	mov	ip, r2
 8005284:	f845 3b04 	str.w	r3, [r5], #4
 8005288:	d8e8      	bhi.n	800525c <__mdiff+0x5c>
 800528a:	45bc      	cmp	ip, r7
 800528c:	d304      	bcc.n	8005298 <__mdiff+0x98>
 800528e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005292:	b183      	cbz	r3, 80052b6 <__mdiff+0xb6>
 8005294:	6106      	str	r6, [r0, #16]
 8005296:	e7c5      	b.n	8005224 <__mdiff+0x24>
 8005298:	f85c 1b04 	ldr.w	r1, [ip], #4
 800529c:	fa1e f381 	uxtah	r3, lr, r1
 80052a0:	141a      	asrs	r2, r3, #16
 80052a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052ac:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80052b0:	f845 3b04 	str.w	r3, [r5], #4
 80052b4:	e7e9      	b.n	800528a <__mdiff+0x8a>
 80052b6:	3e01      	subs	r6, #1
 80052b8:	e7e9      	b.n	800528e <__mdiff+0x8e>

080052ba <__d2b>:
 80052ba:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80052be:	460e      	mov	r6, r1
 80052c0:	2101      	movs	r1, #1
 80052c2:	ec59 8b10 	vmov	r8, r9, d0
 80052c6:	4615      	mov	r5, r2
 80052c8:	f7ff fd6b 	bl	8004da2 <_Balloc>
 80052cc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80052d0:	4607      	mov	r7, r0
 80052d2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80052d6:	bb34      	cbnz	r4, 8005326 <__d2b+0x6c>
 80052d8:	9301      	str	r3, [sp, #4]
 80052da:	f1b8 0300 	subs.w	r3, r8, #0
 80052de:	d027      	beq.n	8005330 <__d2b+0x76>
 80052e0:	a802      	add	r0, sp, #8
 80052e2:	f840 3d08 	str.w	r3, [r0, #-8]!
 80052e6:	f7ff fe01 	bl	8004eec <__lo0bits>
 80052ea:	9900      	ldr	r1, [sp, #0]
 80052ec:	b1f0      	cbz	r0, 800532c <__d2b+0x72>
 80052ee:	9a01      	ldr	r2, [sp, #4]
 80052f0:	f1c0 0320 	rsb	r3, r0, #32
 80052f4:	fa02 f303 	lsl.w	r3, r2, r3
 80052f8:	430b      	orrs	r3, r1
 80052fa:	40c2      	lsrs	r2, r0
 80052fc:	617b      	str	r3, [r7, #20]
 80052fe:	9201      	str	r2, [sp, #4]
 8005300:	9b01      	ldr	r3, [sp, #4]
 8005302:	61bb      	str	r3, [r7, #24]
 8005304:	2b00      	cmp	r3, #0
 8005306:	bf14      	ite	ne
 8005308:	2102      	movne	r1, #2
 800530a:	2101      	moveq	r1, #1
 800530c:	6139      	str	r1, [r7, #16]
 800530e:	b1c4      	cbz	r4, 8005342 <__d2b+0x88>
 8005310:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005314:	4404      	add	r4, r0
 8005316:	6034      	str	r4, [r6, #0]
 8005318:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800531c:	6028      	str	r0, [r5, #0]
 800531e:	4638      	mov	r0, r7
 8005320:	b003      	add	sp, #12
 8005322:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005326:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800532a:	e7d5      	b.n	80052d8 <__d2b+0x1e>
 800532c:	6179      	str	r1, [r7, #20]
 800532e:	e7e7      	b.n	8005300 <__d2b+0x46>
 8005330:	a801      	add	r0, sp, #4
 8005332:	f7ff fddb 	bl	8004eec <__lo0bits>
 8005336:	9b01      	ldr	r3, [sp, #4]
 8005338:	617b      	str	r3, [r7, #20]
 800533a:	2101      	movs	r1, #1
 800533c:	6139      	str	r1, [r7, #16]
 800533e:	3020      	adds	r0, #32
 8005340:	e7e5      	b.n	800530e <__d2b+0x54>
 8005342:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005346:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800534a:	6030      	str	r0, [r6, #0]
 800534c:	6918      	ldr	r0, [r3, #16]
 800534e:	f7ff fdae 	bl	8004eae <__hi0bits>
 8005352:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005356:	e7e1      	b.n	800531c <__d2b+0x62>

08005358 <_calloc_r>:
 8005358:	b538      	push	{r3, r4, r5, lr}
 800535a:	fb02 f401 	mul.w	r4, r2, r1
 800535e:	4621      	mov	r1, r4
 8005360:	f000 f856 	bl	8005410 <_malloc_r>
 8005364:	4605      	mov	r5, r0
 8005366:	b118      	cbz	r0, 8005370 <_calloc_r+0x18>
 8005368:	4622      	mov	r2, r4
 800536a:	2100      	movs	r1, #0
 800536c:	f7fe fa30 	bl	80037d0 <memset>
 8005370:	4628      	mov	r0, r5
 8005372:	bd38      	pop	{r3, r4, r5, pc}

08005374 <_free_r>:
 8005374:	b538      	push	{r3, r4, r5, lr}
 8005376:	4605      	mov	r5, r0
 8005378:	2900      	cmp	r1, #0
 800537a:	d045      	beq.n	8005408 <_free_r+0x94>
 800537c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005380:	1f0c      	subs	r4, r1, #4
 8005382:	2b00      	cmp	r3, #0
 8005384:	bfb8      	it	lt
 8005386:	18e4      	addlt	r4, r4, r3
 8005388:	f000 fa29 	bl	80057de <__malloc_lock>
 800538c:	4a1f      	ldr	r2, [pc, #124]	; (800540c <_free_r+0x98>)
 800538e:	6813      	ldr	r3, [r2, #0]
 8005390:	4610      	mov	r0, r2
 8005392:	b933      	cbnz	r3, 80053a2 <_free_r+0x2e>
 8005394:	6063      	str	r3, [r4, #4]
 8005396:	6014      	str	r4, [r2, #0]
 8005398:	4628      	mov	r0, r5
 800539a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800539e:	f000 ba1f 	b.w	80057e0 <__malloc_unlock>
 80053a2:	42a3      	cmp	r3, r4
 80053a4:	d90c      	bls.n	80053c0 <_free_r+0x4c>
 80053a6:	6821      	ldr	r1, [r4, #0]
 80053a8:	1862      	adds	r2, r4, r1
 80053aa:	4293      	cmp	r3, r2
 80053ac:	bf04      	itt	eq
 80053ae:	681a      	ldreq	r2, [r3, #0]
 80053b0:	685b      	ldreq	r3, [r3, #4]
 80053b2:	6063      	str	r3, [r4, #4]
 80053b4:	bf04      	itt	eq
 80053b6:	1852      	addeq	r2, r2, r1
 80053b8:	6022      	streq	r2, [r4, #0]
 80053ba:	6004      	str	r4, [r0, #0]
 80053bc:	e7ec      	b.n	8005398 <_free_r+0x24>
 80053be:	4613      	mov	r3, r2
 80053c0:	685a      	ldr	r2, [r3, #4]
 80053c2:	b10a      	cbz	r2, 80053c8 <_free_r+0x54>
 80053c4:	42a2      	cmp	r2, r4
 80053c6:	d9fa      	bls.n	80053be <_free_r+0x4a>
 80053c8:	6819      	ldr	r1, [r3, #0]
 80053ca:	1858      	adds	r0, r3, r1
 80053cc:	42a0      	cmp	r0, r4
 80053ce:	d10b      	bne.n	80053e8 <_free_r+0x74>
 80053d0:	6820      	ldr	r0, [r4, #0]
 80053d2:	4401      	add	r1, r0
 80053d4:	1858      	adds	r0, r3, r1
 80053d6:	4282      	cmp	r2, r0
 80053d8:	6019      	str	r1, [r3, #0]
 80053da:	d1dd      	bne.n	8005398 <_free_r+0x24>
 80053dc:	6810      	ldr	r0, [r2, #0]
 80053de:	6852      	ldr	r2, [r2, #4]
 80053e0:	605a      	str	r2, [r3, #4]
 80053e2:	4401      	add	r1, r0
 80053e4:	6019      	str	r1, [r3, #0]
 80053e6:	e7d7      	b.n	8005398 <_free_r+0x24>
 80053e8:	d902      	bls.n	80053f0 <_free_r+0x7c>
 80053ea:	230c      	movs	r3, #12
 80053ec:	602b      	str	r3, [r5, #0]
 80053ee:	e7d3      	b.n	8005398 <_free_r+0x24>
 80053f0:	6820      	ldr	r0, [r4, #0]
 80053f2:	1821      	adds	r1, r4, r0
 80053f4:	428a      	cmp	r2, r1
 80053f6:	bf04      	itt	eq
 80053f8:	6811      	ldreq	r1, [r2, #0]
 80053fa:	6852      	ldreq	r2, [r2, #4]
 80053fc:	6062      	str	r2, [r4, #4]
 80053fe:	bf04      	itt	eq
 8005400:	1809      	addeq	r1, r1, r0
 8005402:	6021      	streq	r1, [r4, #0]
 8005404:	605c      	str	r4, [r3, #4]
 8005406:	e7c7      	b.n	8005398 <_free_r+0x24>
 8005408:	bd38      	pop	{r3, r4, r5, pc}
 800540a:	bf00      	nop
 800540c:	20000204 	.word	0x20000204

08005410 <_malloc_r>:
 8005410:	b570      	push	{r4, r5, r6, lr}
 8005412:	1ccd      	adds	r5, r1, #3
 8005414:	f025 0503 	bic.w	r5, r5, #3
 8005418:	3508      	adds	r5, #8
 800541a:	2d0c      	cmp	r5, #12
 800541c:	bf38      	it	cc
 800541e:	250c      	movcc	r5, #12
 8005420:	2d00      	cmp	r5, #0
 8005422:	4606      	mov	r6, r0
 8005424:	db01      	blt.n	800542a <_malloc_r+0x1a>
 8005426:	42a9      	cmp	r1, r5
 8005428:	d903      	bls.n	8005432 <_malloc_r+0x22>
 800542a:	230c      	movs	r3, #12
 800542c:	6033      	str	r3, [r6, #0]
 800542e:	2000      	movs	r0, #0
 8005430:	bd70      	pop	{r4, r5, r6, pc}
 8005432:	f000 f9d4 	bl	80057de <__malloc_lock>
 8005436:	4a21      	ldr	r2, [pc, #132]	; (80054bc <_malloc_r+0xac>)
 8005438:	6814      	ldr	r4, [r2, #0]
 800543a:	4621      	mov	r1, r4
 800543c:	b991      	cbnz	r1, 8005464 <_malloc_r+0x54>
 800543e:	4c20      	ldr	r4, [pc, #128]	; (80054c0 <_malloc_r+0xb0>)
 8005440:	6823      	ldr	r3, [r4, #0]
 8005442:	b91b      	cbnz	r3, 800544c <_malloc_r+0x3c>
 8005444:	4630      	mov	r0, r6
 8005446:	f000 f98f 	bl	8005768 <_sbrk_r>
 800544a:	6020      	str	r0, [r4, #0]
 800544c:	4629      	mov	r1, r5
 800544e:	4630      	mov	r0, r6
 8005450:	f000 f98a 	bl	8005768 <_sbrk_r>
 8005454:	1c43      	adds	r3, r0, #1
 8005456:	d124      	bne.n	80054a2 <_malloc_r+0x92>
 8005458:	230c      	movs	r3, #12
 800545a:	6033      	str	r3, [r6, #0]
 800545c:	4630      	mov	r0, r6
 800545e:	f000 f9bf 	bl	80057e0 <__malloc_unlock>
 8005462:	e7e4      	b.n	800542e <_malloc_r+0x1e>
 8005464:	680b      	ldr	r3, [r1, #0]
 8005466:	1b5b      	subs	r3, r3, r5
 8005468:	d418      	bmi.n	800549c <_malloc_r+0x8c>
 800546a:	2b0b      	cmp	r3, #11
 800546c:	d90f      	bls.n	800548e <_malloc_r+0x7e>
 800546e:	600b      	str	r3, [r1, #0]
 8005470:	50cd      	str	r5, [r1, r3]
 8005472:	18cc      	adds	r4, r1, r3
 8005474:	4630      	mov	r0, r6
 8005476:	f000 f9b3 	bl	80057e0 <__malloc_unlock>
 800547a:	f104 000b 	add.w	r0, r4, #11
 800547e:	1d23      	adds	r3, r4, #4
 8005480:	f020 0007 	bic.w	r0, r0, #7
 8005484:	1ac3      	subs	r3, r0, r3
 8005486:	d0d3      	beq.n	8005430 <_malloc_r+0x20>
 8005488:	425a      	negs	r2, r3
 800548a:	50e2      	str	r2, [r4, r3]
 800548c:	e7d0      	b.n	8005430 <_malloc_r+0x20>
 800548e:	428c      	cmp	r4, r1
 8005490:	684b      	ldr	r3, [r1, #4]
 8005492:	bf16      	itet	ne
 8005494:	6063      	strne	r3, [r4, #4]
 8005496:	6013      	streq	r3, [r2, #0]
 8005498:	460c      	movne	r4, r1
 800549a:	e7eb      	b.n	8005474 <_malloc_r+0x64>
 800549c:	460c      	mov	r4, r1
 800549e:	6849      	ldr	r1, [r1, #4]
 80054a0:	e7cc      	b.n	800543c <_malloc_r+0x2c>
 80054a2:	1cc4      	adds	r4, r0, #3
 80054a4:	f024 0403 	bic.w	r4, r4, #3
 80054a8:	42a0      	cmp	r0, r4
 80054aa:	d005      	beq.n	80054b8 <_malloc_r+0xa8>
 80054ac:	1a21      	subs	r1, r4, r0
 80054ae:	4630      	mov	r0, r6
 80054b0:	f000 f95a 	bl	8005768 <_sbrk_r>
 80054b4:	3001      	adds	r0, #1
 80054b6:	d0cf      	beq.n	8005458 <_malloc_r+0x48>
 80054b8:	6025      	str	r5, [r4, #0]
 80054ba:	e7db      	b.n	8005474 <_malloc_r+0x64>
 80054bc:	20000204 	.word	0x20000204
 80054c0:	20000208 	.word	0x20000208

080054c4 <__ssputs_r>:
 80054c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054c8:	688e      	ldr	r6, [r1, #8]
 80054ca:	429e      	cmp	r6, r3
 80054cc:	4682      	mov	sl, r0
 80054ce:	460c      	mov	r4, r1
 80054d0:	4690      	mov	r8, r2
 80054d2:	4699      	mov	r9, r3
 80054d4:	d837      	bhi.n	8005546 <__ssputs_r+0x82>
 80054d6:	898a      	ldrh	r2, [r1, #12]
 80054d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80054dc:	d031      	beq.n	8005542 <__ssputs_r+0x7e>
 80054de:	6825      	ldr	r5, [r4, #0]
 80054e0:	6909      	ldr	r1, [r1, #16]
 80054e2:	1a6f      	subs	r7, r5, r1
 80054e4:	6965      	ldr	r5, [r4, #20]
 80054e6:	2302      	movs	r3, #2
 80054e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80054ec:	fb95 f5f3 	sdiv	r5, r5, r3
 80054f0:	f109 0301 	add.w	r3, r9, #1
 80054f4:	443b      	add	r3, r7
 80054f6:	429d      	cmp	r5, r3
 80054f8:	bf38      	it	cc
 80054fa:	461d      	movcc	r5, r3
 80054fc:	0553      	lsls	r3, r2, #21
 80054fe:	d530      	bpl.n	8005562 <__ssputs_r+0x9e>
 8005500:	4629      	mov	r1, r5
 8005502:	f7ff ff85 	bl	8005410 <_malloc_r>
 8005506:	4606      	mov	r6, r0
 8005508:	b950      	cbnz	r0, 8005520 <__ssputs_r+0x5c>
 800550a:	230c      	movs	r3, #12
 800550c:	f8ca 3000 	str.w	r3, [sl]
 8005510:	89a3      	ldrh	r3, [r4, #12]
 8005512:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005516:	81a3      	strh	r3, [r4, #12]
 8005518:	f04f 30ff 	mov.w	r0, #4294967295
 800551c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005520:	463a      	mov	r2, r7
 8005522:	6921      	ldr	r1, [r4, #16]
 8005524:	f7ff fc32 	bl	8004d8c <memcpy>
 8005528:	89a3      	ldrh	r3, [r4, #12]
 800552a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800552e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005532:	81a3      	strh	r3, [r4, #12]
 8005534:	6126      	str	r6, [r4, #16]
 8005536:	6165      	str	r5, [r4, #20]
 8005538:	443e      	add	r6, r7
 800553a:	1bed      	subs	r5, r5, r7
 800553c:	6026      	str	r6, [r4, #0]
 800553e:	60a5      	str	r5, [r4, #8]
 8005540:	464e      	mov	r6, r9
 8005542:	454e      	cmp	r6, r9
 8005544:	d900      	bls.n	8005548 <__ssputs_r+0x84>
 8005546:	464e      	mov	r6, r9
 8005548:	4632      	mov	r2, r6
 800554a:	4641      	mov	r1, r8
 800554c:	6820      	ldr	r0, [r4, #0]
 800554e:	f000 f92d 	bl	80057ac <memmove>
 8005552:	68a3      	ldr	r3, [r4, #8]
 8005554:	1b9b      	subs	r3, r3, r6
 8005556:	60a3      	str	r3, [r4, #8]
 8005558:	6823      	ldr	r3, [r4, #0]
 800555a:	441e      	add	r6, r3
 800555c:	6026      	str	r6, [r4, #0]
 800555e:	2000      	movs	r0, #0
 8005560:	e7dc      	b.n	800551c <__ssputs_r+0x58>
 8005562:	462a      	mov	r2, r5
 8005564:	f000 f93d 	bl	80057e2 <_realloc_r>
 8005568:	4606      	mov	r6, r0
 800556a:	2800      	cmp	r0, #0
 800556c:	d1e2      	bne.n	8005534 <__ssputs_r+0x70>
 800556e:	6921      	ldr	r1, [r4, #16]
 8005570:	4650      	mov	r0, sl
 8005572:	f7ff feff 	bl	8005374 <_free_r>
 8005576:	e7c8      	b.n	800550a <__ssputs_r+0x46>

08005578 <_svfiprintf_r>:
 8005578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800557c:	461d      	mov	r5, r3
 800557e:	898b      	ldrh	r3, [r1, #12]
 8005580:	061f      	lsls	r7, r3, #24
 8005582:	b09d      	sub	sp, #116	; 0x74
 8005584:	4680      	mov	r8, r0
 8005586:	460c      	mov	r4, r1
 8005588:	4616      	mov	r6, r2
 800558a:	d50f      	bpl.n	80055ac <_svfiprintf_r+0x34>
 800558c:	690b      	ldr	r3, [r1, #16]
 800558e:	b96b      	cbnz	r3, 80055ac <_svfiprintf_r+0x34>
 8005590:	2140      	movs	r1, #64	; 0x40
 8005592:	f7ff ff3d 	bl	8005410 <_malloc_r>
 8005596:	6020      	str	r0, [r4, #0]
 8005598:	6120      	str	r0, [r4, #16]
 800559a:	b928      	cbnz	r0, 80055a8 <_svfiprintf_r+0x30>
 800559c:	230c      	movs	r3, #12
 800559e:	f8c8 3000 	str.w	r3, [r8]
 80055a2:	f04f 30ff 	mov.w	r0, #4294967295
 80055a6:	e0c8      	b.n	800573a <_svfiprintf_r+0x1c2>
 80055a8:	2340      	movs	r3, #64	; 0x40
 80055aa:	6163      	str	r3, [r4, #20]
 80055ac:	2300      	movs	r3, #0
 80055ae:	9309      	str	r3, [sp, #36]	; 0x24
 80055b0:	2320      	movs	r3, #32
 80055b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80055b6:	2330      	movs	r3, #48	; 0x30
 80055b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80055bc:	9503      	str	r5, [sp, #12]
 80055be:	f04f 0b01 	mov.w	fp, #1
 80055c2:	4637      	mov	r7, r6
 80055c4:	463d      	mov	r5, r7
 80055c6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80055ca:	b10b      	cbz	r3, 80055d0 <_svfiprintf_r+0x58>
 80055cc:	2b25      	cmp	r3, #37	; 0x25
 80055ce:	d13e      	bne.n	800564e <_svfiprintf_r+0xd6>
 80055d0:	ebb7 0a06 	subs.w	sl, r7, r6
 80055d4:	d00b      	beq.n	80055ee <_svfiprintf_r+0x76>
 80055d6:	4653      	mov	r3, sl
 80055d8:	4632      	mov	r2, r6
 80055da:	4621      	mov	r1, r4
 80055dc:	4640      	mov	r0, r8
 80055de:	f7ff ff71 	bl	80054c4 <__ssputs_r>
 80055e2:	3001      	adds	r0, #1
 80055e4:	f000 80a4 	beq.w	8005730 <_svfiprintf_r+0x1b8>
 80055e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055ea:	4453      	add	r3, sl
 80055ec:	9309      	str	r3, [sp, #36]	; 0x24
 80055ee:	783b      	ldrb	r3, [r7, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f000 809d 	beq.w	8005730 <_svfiprintf_r+0x1b8>
 80055f6:	2300      	movs	r3, #0
 80055f8:	f04f 32ff 	mov.w	r2, #4294967295
 80055fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005600:	9304      	str	r3, [sp, #16]
 8005602:	9307      	str	r3, [sp, #28]
 8005604:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005608:	931a      	str	r3, [sp, #104]	; 0x68
 800560a:	462f      	mov	r7, r5
 800560c:	2205      	movs	r2, #5
 800560e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005612:	4850      	ldr	r0, [pc, #320]	; (8005754 <_svfiprintf_r+0x1dc>)
 8005614:	f7fa fde4 	bl	80001e0 <memchr>
 8005618:	9b04      	ldr	r3, [sp, #16]
 800561a:	b9d0      	cbnz	r0, 8005652 <_svfiprintf_r+0xda>
 800561c:	06d9      	lsls	r1, r3, #27
 800561e:	bf44      	itt	mi
 8005620:	2220      	movmi	r2, #32
 8005622:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005626:	071a      	lsls	r2, r3, #28
 8005628:	bf44      	itt	mi
 800562a:	222b      	movmi	r2, #43	; 0x2b
 800562c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005630:	782a      	ldrb	r2, [r5, #0]
 8005632:	2a2a      	cmp	r2, #42	; 0x2a
 8005634:	d015      	beq.n	8005662 <_svfiprintf_r+0xea>
 8005636:	9a07      	ldr	r2, [sp, #28]
 8005638:	462f      	mov	r7, r5
 800563a:	2000      	movs	r0, #0
 800563c:	250a      	movs	r5, #10
 800563e:	4639      	mov	r1, r7
 8005640:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005644:	3b30      	subs	r3, #48	; 0x30
 8005646:	2b09      	cmp	r3, #9
 8005648:	d94d      	bls.n	80056e6 <_svfiprintf_r+0x16e>
 800564a:	b1b8      	cbz	r0, 800567c <_svfiprintf_r+0x104>
 800564c:	e00f      	b.n	800566e <_svfiprintf_r+0xf6>
 800564e:	462f      	mov	r7, r5
 8005650:	e7b8      	b.n	80055c4 <_svfiprintf_r+0x4c>
 8005652:	4a40      	ldr	r2, [pc, #256]	; (8005754 <_svfiprintf_r+0x1dc>)
 8005654:	1a80      	subs	r0, r0, r2
 8005656:	fa0b f000 	lsl.w	r0, fp, r0
 800565a:	4318      	orrs	r0, r3
 800565c:	9004      	str	r0, [sp, #16]
 800565e:	463d      	mov	r5, r7
 8005660:	e7d3      	b.n	800560a <_svfiprintf_r+0x92>
 8005662:	9a03      	ldr	r2, [sp, #12]
 8005664:	1d11      	adds	r1, r2, #4
 8005666:	6812      	ldr	r2, [r2, #0]
 8005668:	9103      	str	r1, [sp, #12]
 800566a:	2a00      	cmp	r2, #0
 800566c:	db01      	blt.n	8005672 <_svfiprintf_r+0xfa>
 800566e:	9207      	str	r2, [sp, #28]
 8005670:	e004      	b.n	800567c <_svfiprintf_r+0x104>
 8005672:	4252      	negs	r2, r2
 8005674:	f043 0302 	orr.w	r3, r3, #2
 8005678:	9207      	str	r2, [sp, #28]
 800567a:	9304      	str	r3, [sp, #16]
 800567c:	783b      	ldrb	r3, [r7, #0]
 800567e:	2b2e      	cmp	r3, #46	; 0x2e
 8005680:	d10c      	bne.n	800569c <_svfiprintf_r+0x124>
 8005682:	787b      	ldrb	r3, [r7, #1]
 8005684:	2b2a      	cmp	r3, #42	; 0x2a
 8005686:	d133      	bne.n	80056f0 <_svfiprintf_r+0x178>
 8005688:	9b03      	ldr	r3, [sp, #12]
 800568a:	1d1a      	adds	r2, r3, #4
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	9203      	str	r2, [sp, #12]
 8005690:	2b00      	cmp	r3, #0
 8005692:	bfb8      	it	lt
 8005694:	f04f 33ff 	movlt.w	r3, #4294967295
 8005698:	3702      	adds	r7, #2
 800569a:	9305      	str	r3, [sp, #20]
 800569c:	4d2e      	ldr	r5, [pc, #184]	; (8005758 <_svfiprintf_r+0x1e0>)
 800569e:	7839      	ldrb	r1, [r7, #0]
 80056a0:	2203      	movs	r2, #3
 80056a2:	4628      	mov	r0, r5
 80056a4:	f7fa fd9c 	bl	80001e0 <memchr>
 80056a8:	b138      	cbz	r0, 80056ba <_svfiprintf_r+0x142>
 80056aa:	2340      	movs	r3, #64	; 0x40
 80056ac:	1b40      	subs	r0, r0, r5
 80056ae:	fa03 f000 	lsl.w	r0, r3, r0
 80056b2:	9b04      	ldr	r3, [sp, #16]
 80056b4:	4303      	orrs	r3, r0
 80056b6:	3701      	adds	r7, #1
 80056b8:	9304      	str	r3, [sp, #16]
 80056ba:	7839      	ldrb	r1, [r7, #0]
 80056bc:	4827      	ldr	r0, [pc, #156]	; (800575c <_svfiprintf_r+0x1e4>)
 80056be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80056c2:	2206      	movs	r2, #6
 80056c4:	1c7e      	adds	r6, r7, #1
 80056c6:	f7fa fd8b 	bl	80001e0 <memchr>
 80056ca:	2800      	cmp	r0, #0
 80056cc:	d038      	beq.n	8005740 <_svfiprintf_r+0x1c8>
 80056ce:	4b24      	ldr	r3, [pc, #144]	; (8005760 <_svfiprintf_r+0x1e8>)
 80056d0:	bb13      	cbnz	r3, 8005718 <_svfiprintf_r+0x1a0>
 80056d2:	9b03      	ldr	r3, [sp, #12]
 80056d4:	3307      	adds	r3, #7
 80056d6:	f023 0307 	bic.w	r3, r3, #7
 80056da:	3308      	adds	r3, #8
 80056dc:	9303      	str	r3, [sp, #12]
 80056de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056e0:	444b      	add	r3, r9
 80056e2:	9309      	str	r3, [sp, #36]	; 0x24
 80056e4:	e76d      	b.n	80055c2 <_svfiprintf_r+0x4a>
 80056e6:	fb05 3202 	mla	r2, r5, r2, r3
 80056ea:	2001      	movs	r0, #1
 80056ec:	460f      	mov	r7, r1
 80056ee:	e7a6      	b.n	800563e <_svfiprintf_r+0xc6>
 80056f0:	2300      	movs	r3, #0
 80056f2:	3701      	adds	r7, #1
 80056f4:	9305      	str	r3, [sp, #20]
 80056f6:	4619      	mov	r1, r3
 80056f8:	250a      	movs	r5, #10
 80056fa:	4638      	mov	r0, r7
 80056fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005700:	3a30      	subs	r2, #48	; 0x30
 8005702:	2a09      	cmp	r2, #9
 8005704:	d903      	bls.n	800570e <_svfiprintf_r+0x196>
 8005706:	2b00      	cmp	r3, #0
 8005708:	d0c8      	beq.n	800569c <_svfiprintf_r+0x124>
 800570a:	9105      	str	r1, [sp, #20]
 800570c:	e7c6      	b.n	800569c <_svfiprintf_r+0x124>
 800570e:	fb05 2101 	mla	r1, r5, r1, r2
 8005712:	2301      	movs	r3, #1
 8005714:	4607      	mov	r7, r0
 8005716:	e7f0      	b.n	80056fa <_svfiprintf_r+0x182>
 8005718:	ab03      	add	r3, sp, #12
 800571a:	9300      	str	r3, [sp, #0]
 800571c:	4622      	mov	r2, r4
 800571e:	4b11      	ldr	r3, [pc, #68]	; (8005764 <_svfiprintf_r+0x1ec>)
 8005720:	a904      	add	r1, sp, #16
 8005722:	4640      	mov	r0, r8
 8005724:	f7fe f8f0 	bl	8003908 <_printf_float>
 8005728:	f1b0 3fff 	cmp.w	r0, #4294967295
 800572c:	4681      	mov	r9, r0
 800572e:	d1d6      	bne.n	80056de <_svfiprintf_r+0x166>
 8005730:	89a3      	ldrh	r3, [r4, #12]
 8005732:	065b      	lsls	r3, r3, #25
 8005734:	f53f af35 	bmi.w	80055a2 <_svfiprintf_r+0x2a>
 8005738:	9809      	ldr	r0, [sp, #36]	; 0x24
 800573a:	b01d      	add	sp, #116	; 0x74
 800573c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005740:	ab03      	add	r3, sp, #12
 8005742:	9300      	str	r3, [sp, #0]
 8005744:	4622      	mov	r2, r4
 8005746:	4b07      	ldr	r3, [pc, #28]	; (8005764 <_svfiprintf_r+0x1ec>)
 8005748:	a904      	add	r1, sp, #16
 800574a:	4640      	mov	r0, r8
 800574c:	f7fe fb92 	bl	8003e74 <_printf_i>
 8005750:	e7ea      	b.n	8005728 <_svfiprintf_r+0x1b0>
 8005752:	bf00      	nop
 8005754:	08005a34 	.word	0x08005a34
 8005758:	08005a3a 	.word	0x08005a3a
 800575c:	08005a3e 	.word	0x08005a3e
 8005760:	08003909 	.word	0x08003909
 8005764:	080054c5 	.word	0x080054c5

08005768 <_sbrk_r>:
 8005768:	b538      	push	{r3, r4, r5, lr}
 800576a:	4c06      	ldr	r4, [pc, #24]	; (8005784 <_sbrk_r+0x1c>)
 800576c:	2300      	movs	r3, #0
 800576e:	4605      	mov	r5, r0
 8005770:	4608      	mov	r0, r1
 8005772:	6023      	str	r3, [r4, #0]
 8005774:	f000 f870 	bl	8005858 <_sbrk>
 8005778:	1c43      	adds	r3, r0, #1
 800577a:	d102      	bne.n	8005782 <_sbrk_r+0x1a>
 800577c:	6823      	ldr	r3, [r4, #0]
 800577e:	b103      	cbz	r3, 8005782 <_sbrk_r+0x1a>
 8005780:	602b      	str	r3, [r5, #0]
 8005782:	bd38      	pop	{r3, r4, r5, pc}
 8005784:	200002d4 	.word	0x200002d4

08005788 <__ascii_mbtowc>:
 8005788:	b082      	sub	sp, #8
 800578a:	b901      	cbnz	r1, 800578e <__ascii_mbtowc+0x6>
 800578c:	a901      	add	r1, sp, #4
 800578e:	b142      	cbz	r2, 80057a2 <__ascii_mbtowc+0x1a>
 8005790:	b14b      	cbz	r3, 80057a6 <__ascii_mbtowc+0x1e>
 8005792:	7813      	ldrb	r3, [r2, #0]
 8005794:	600b      	str	r3, [r1, #0]
 8005796:	7812      	ldrb	r2, [r2, #0]
 8005798:	1c10      	adds	r0, r2, #0
 800579a:	bf18      	it	ne
 800579c:	2001      	movne	r0, #1
 800579e:	b002      	add	sp, #8
 80057a0:	4770      	bx	lr
 80057a2:	4610      	mov	r0, r2
 80057a4:	e7fb      	b.n	800579e <__ascii_mbtowc+0x16>
 80057a6:	f06f 0001 	mvn.w	r0, #1
 80057aa:	e7f8      	b.n	800579e <__ascii_mbtowc+0x16>

080057ac <memmove>:
 80057ac:	4288      	cmp	r0, r1
 80057ae:	b510      	push	{r4, lr}
 80057b0:	eb01 0302 	add.w	r3, r1, r2
 80057b4:	d807      	bhi.n	80057c6 <memmove+0x1a>
 80057b6:	1e42      	subs	r2, r0, #1
 80057b8:	4299      	cmp	r1, r3
 80057ba:	d00a      	beq.n	80057d2 <memmove+0x26>
 80057bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057c0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80057c4:	e7f8      	b.n	80057b8 <memmove+0xc>
 80057c6:	4283      	cmp	r3, r0
 80057c8:	d9f5      	bls.n	80057b6 <memmove+0xa>
 80057ca:	1881      	adds	r1, r0, r2
 80057cc:	1ad2      	subs	r2, r2, r3
 80057ce:	42d3      	cmn	r3, r2
 80057d0:	d100      	bne.n	80057d4 <memmove+0x28>
 80057d2:	bd10      	pop	{r4, pc}
 80057d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80057d8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80057dc:	e7f7      	b.n	80057ce <memmove+0x22>

080057de <__malloc_lock>:
 80057de:	4770      	bx	lr

080057e0 <__malloc_unlock>:
 80057e0:	4770      	bx	lr

080057e2 <_realloc_r>:
 80057e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057e4:	4607      	mov	r7, r0
 80057e6:	4614      	mov	r4, r2
 80057e8:	460e      	mov	r6, r1
 80057ea:	b921      	cbnz	r1, 80057f6 <_realloc_r+0x14>
 80057ec:	4611      	mov	r1, r2
 80057ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80057f2:	f7ff be0d 	b.w	8005410 <_malloc_r>
 80057f6:	b922      	cbnz	r2, 8005802 <_realloc_r+0x20>
 80057f8:	f7ff fdbc 	bl	8005374 <_free_r>
 80057fc:	4625      	mov	r5, r4
 80057fe:	4628      	mov	r0, r5
 8005800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005802:	f000 f821 	bl	8005848 <_malloc_usable_size_r>
 8005806:	42a0      	cmp	r0, r4
 8005808:	d20f      	bcs.n	800582a <_realloc_r+0x48>
 800580a:	4621      	mov	r1, r4
 800580c:	4638      	mov	r0, r7
 800580e:	f7ff fdff 	bl	8005410 <_malloc_r>
 8005812:	4605      	mov	r5, r0
 8005814:	2800      	cmp	r0, #0
 8005816:	d0f2      	beq.n	80057fe <_realloc_r+0x1c>
 8005818:	4631      	mov	r1, r6
 800581a:	4622      	mov	r2, r4
 800581c:	f7ff fab6 	bl	8004d8c <memcpy>
 8005820:	4631      	mov	r1, r6
 8005822:	4638      	mov	r0, r7
 8005824:	f7ff fda6 	bl	8005374 <_free_r>
 8005828:	e7e9      	b.n	80057fe <_realloc_r+0x1c>
 800582a:	4635      	mov	r5, r6
 800582c:	e7e7      	b.n	80057fe <_realloc_r+0x1c>

0800582e <__ascii_wctomb>:
 800582e:	b149      	cbz	r1, 8005844 <__ascii_wctomb+0x16>
 8005830:	2aff      	cmp	r2, #255	; 0xff
 8005832:	bf85      	ittet	hi
 8005834:	238a      	movhi	r3, #138	; 0x8a
 8005836:	6003      	strhi	r3, [r0, #0]
 8005838:	700a      	strbls	r2, [r1, #0]
 800583a:	f04f 30ff 	movhi.w	r0, #4294967295
 800583e:	bf98      	it	ls
 8005840:	2001      	movls	r0, #1
 8005842:	4770      	bx	lr
 8005844:	4608      	mov	r0, r1
 8005846:	4770      	bx	lr

08005848 <_malloc_usable_size_r>:
 8005848:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800584c:	1f18      	subs	r0, r3, #4
 800584e:	2b00      	cmp	r3, #0
 8005850:	bfbc      	itt	lt
 8005852:	580b      	ldrlt	r3, [r1, r0]
 8005854:	18c0      	addlt	r0, r0, r3
 8005856:	4770      	bx	lr

08005858 <_sbrk>:
 8005858:	4b04      	ldr	r3, [pc, #16]	; (800586c <_sbrk+0x14>)
 800585a:	6819      	ldr	r1, [r3, #0]
 800585c:	4602      	mov	r2, r0
 800585e:	b909      	cbnz	r1, 8005864 <_sbrk+0xc>
 8005860:	4903      	ldr	r1, [pc, #12]	; (8005870 <_sbrk+0x18>)
 8005862:	6019      	str	r1, [r3, #0]
 8005864:	6818      	ldr	r0, [r3, #0]
 8005866:	4402      	add	r2, r0
 8005868:	601a      	str	r2, [r3, #0]
 800586a:	4770      	bx	lr
 800586c:	2000020c 	.word	0x2000020c
 8005870:	200002d8 	.word	0x200002d8

08005874 <_init>:
 8005874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005876:	bf00      	nop
 8005878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800587a:	bc08      	pop	{r3}
 800587c:	469e      	mov	lr, r3
 800587e:	4770      	bx	lr

08005880 <_fini>:
 8005880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005882:	bf00      	nop
 8005884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005886:	bc08      	pop	{r3}
 8005888:	469e      	mov	lr, r3
 800588a:	4770      	bx	lr
