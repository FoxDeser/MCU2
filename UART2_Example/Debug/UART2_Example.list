
UART2_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f64  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  080010ec  080010ec  000110ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080010f4  080010f4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080010f4  080010f4  000110f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080010fc  080010fc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010fc  080010fc  000110fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001100  08001100  00011100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001104  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  2000000c  08001110  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08001110  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000043cc  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000cfe  00000000  00000000  00024408  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000508  00000000  00000000  00025108  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000490  00000000  00000000  00025610  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ebed  00000000  00000000  00025aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000402c  00000000  00000000  0004468d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bd30c  00000000  00000000  000486b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001059c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000013d0  00000000  00000000  00105a40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080010d4 	.word	0x080010d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080010d4 	.word	0x080010d4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004cc:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <HAL_Init+0x40>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a0d      	ldr	r2, [pc, #52]	; (8000508 <HAL_Init+0x40>)
 80004d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <HAL_Init+0x40>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <HAL_Init+0x40>)
 80004de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a07      	ldr	r2, [pc, #28]	; (8000508 <HAL_Init+0x40>)
 80004ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f0:	2003      	movs	r0, #3
 80004f2:	f000 f8ed 	bl	80006d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004f6:	2000      	movs	r0, #0
 80004f8:	f000 f808 	bl	800050c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004fc:	f000 fd64 	bl	8000fc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40023c00 	.word	0x40023c00

0800050c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <HAL_InitTick+0x54>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <HAL_InitTick+0x58>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4619      	mov	r1, r3
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f1 	udiv	r3, r3, r1
 8000526:	fbb2 f3f3 	udiv	r3, r2, r3
 800052a:	4618      	mov	r0, r3
 800052c:	f000 f8f7 	bl	800071e <HAL_SYSTICK_Config>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000536:	2301      	movs	r3, #1
 8000538:	e00e      	b.n	8000558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2b0f      	cmp	r3, #15
 800053e:	d80a      	bhi.n	8000556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000540:	2200      	movs	r2, #0
 8000542:	6879      	ldr	r1, [r7, #4]
 8000544:	f04f 30ff 	mov.w	r0, #4294967295
 8000548:	f000 f8cd 	bl	80006e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800054c:	4a06      	ldr	r2, [pc, #24]	; (8000568 <HAL_InitTick+0x5c>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000552:	2300      	movs	r3, #0
 8000554:	e000      	b.n	8000558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
}
 8000558:	4618      	mov	r0, r3
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000008 	.word	0x20000008
 8000564:	20000004 	.word	0x20000004
 8000568:	20000000 	.word	0x20000000

0800056c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	f003 0307 	and.w	r3, r3, #7
 800057a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800057c:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <__NVIC_SetPriorityGrouping+0x44>)
 800057e:	68db      	ldr	r3, [r3, #12]
 8000580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000582:	68ba      	ldr	r2, [r7, #8]
 8000584:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000588:	4013      	ands	r3, r2
 800058a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000590:	68bb      	ldr	r3, [r7, #8]
 8000592:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000594:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800059c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800059e:	4a04      	ldr	r2, [pc, #16]	; (80005b0 <__NVIC_SetPriorityGrouping+0x44>)
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	60d3      	str	r3, [r2, #12]
}
 80005a4:	bf00      	nop
 80005a6:	3714      	adds	r7, #20
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	e000ed00 	.word	0xe000ed00

080005b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005b8:	4b04      	ldr	r3, [pc, #16]	; (80005cc <__NVIC_GetPriorityGrouping+0x18>)
 80005ba:	68db      	ldr	r3, [r3, #12]
 80005bc:	0a1b      	lsrs	r3, r3, #8
 80005be:	f003 0307 	and.w	r3, r3, #7
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr
 80005cc:	e000ed00 	.word	0xe000ed00

080005d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	6039      	str	r1, [r7, #0]
 80005da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	db0a      	blt.n	80005fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	490c      	ldr	r1, [pc, #48]	; (800061c <__NVIC_SetPriority+0x4c>)
 80005ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ee:	0112      	lsls	r2, r2, #4
 80005f0:	b2d2      	uxtb	r2, r2
 80005f2:	440b      	add	r3, r1
 80005f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005f8:	e00a      	b.n	8000610 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	4908      	ldr	r1, [pc, #32]	; (8000620 <__NVIC_SetPriority+0x50>)
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	f003 030f 	and.w	r3, r3, #15
 8000606:	3b04      	subs	r3, #4
 8000608:	0112      	lsls	r2, r2, #4
 800060a:	b2d2      	uxtb	r2, r2
 800060c:	440b      	add	r3, r1
 800060e:	761a      	strb	r2, [r3, #24]
}
 8000610:	bf00      	nop
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	e000e100 	.word	0xe000e100
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000624:	b480      	push	{r7}
 8000626:	b089      	sub	sp, #36	; 0x24
 8000628:	af00      	add	r7, sp, #0
 800062a:	60f8      	str	r0, [r7, #12]
 800062c:	60b9      	str	r1, [r7, #8]
 800062e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	f003 0307 	and.w	r3, r3, #7
 8000636:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000638:	69fb      	ldr	r3, [r7, #28]
 800063a:	f1c3 0307 	rsb	r3, r3, #7
 800063e:	2b04      	cmp	r3, #4
 8000640:	bf28      	it	cs
 8000642:	2304      	movcs	r3, #4
 8000644:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000646:	69fb      	ldr	r3, [r7, #28]
 8000648:	3304      	adds	r3, #4
 800064a:	2b06      	cmp	r3, #6
 800064c:	d902      	bls.n	8000654 <NVIC_EncodePriority+0x30>
 800064e:	69fb      	ldr	r3, [r7, #28]
 8000650:	3b03      	subs	r3, #3
 8000652:	e000      	b.n	8000656 <NVIC_EncodePriority+0x32>
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000658:	f04f 32ff 	mov.w	r2, #4294967295
 800065c:	69bb      	ldr	r3, [r7, #24]
 800065e:	fa02 f303 	lsl.w	r3, r2, r3
 8000662:	43da      	mvns	r2, r3
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	401a      	ands	r2, r3
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800066c:	f04f 31ff 	mov.w	r1, #4294967295
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	fa01 f303 	lsl.w	r3, r1, r3
 8000676:	43d9      	mvns	r1, r3
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800067c:	4313      	orrs	r3, r2
         );
}
 800067e:	4618      	mov	r0, r3
 8000680:	3724      	adds	r7, #36	; 0x24
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
	...

0800068c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	3b01      	subs	r3, #1
 8000698:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800069c:	d301      	bcc.n	80006a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800069e:	2301      	movs	r3, #1
 80006a0:	e00f      	b.n	80006c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006a2:	4a0a      	ldr	r2, [pc, #40]	; (80006cc <SysTick_Config+0x40>)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	3b01      	subs	r3, #1
 80006a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006aa:	210f      	movs	r1, #15
 80006ac:	f04f 30ff 	mov.w	r0, #4294967295
 80006b0:	f7ff ff8e 	bl	80005d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006b4:	4b05      	ldr	r3, [pc, #20]	; (80006cc <SysTick_Config+0x40>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ba:	4b04      	ldr	r3, [pc, #16]	; (80006cc <SysTick_Config+0x40>)
 80006bc:	2207      	movs	r2, #7
 80006be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006c0:	2300      	movs	r3, #0
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	e000e010 	.word	0xe000e010

080006d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f7ff ff47 	bl	800056c <__NVIC_SetPriorityGrouping>
}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006e6:	b580      	push	{r7, lr}
 80006e8:	b086      	sub	sp, #24
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	4603      	mov	r3, r0
 80006ee:	60b9      	str	r1, [r7, #8]
 80006f0:	607a      	str	r2, [r7, #4]
 80006f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006f8:	f7ff ff5c 	bl	80005b4 <__NVIC_GetPriorityGrouping>
 80006fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	68b9      	ldr	r1, [r7, #8]
 8000702:	6978      	ldr	r0, [r7, #20]
 8000704:	f7ff ff8e 	bl	8000624 <NVIC_EncodePriority>
 8000708:	4602      	mov	r2, r0
 800070a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800070e:	4611      	mov	r1, r2
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff ff5d 	bl	80005d0 <__NVIC_SetPriority>
}
 8000716:	bf00      	nop
 8000718:	3718      	adds	r7, #24
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800071e:	b580      	push	{r7, lr}
 8000720:	b082      	sub	sp, #8
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f7ff ffb0 	bl	800068c <SysTick_Config>
 800072c:	4603      	mov	r3, r0
}
 800072e:	4618      	mov	r0, r3
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
	...

08000738 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800073c:	4b03      	ldr	r3, [pc, #12]	; (800074c <HAL_RCC_GetHCLKFreq+0x14>)
 800073e:	681b      	ldr	r3, [r3, #0]
}
 8000740:	4618      	mov	r0, r3
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	20000008 	.word	0x20000008

08000750 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000754:	f7ff fff0 	bl	8000738 <HAL_RCC_GetHCLKFreq>
 8000758:	4601      	mov	r1, r0
 800075a:	4b05      	ldr	r3, [pc, #20]	; (8000770 <HAL_RCC_GetPCLK1Freq+0x20>)
 800075c:	689b      	ldr	r3, [r3, #8]
 800075e:	0a9b      	lsrs	r3, r3, #10
 8000760:	f003 0307 	and.w	r3, r3, #7
 8000764:	4a03      	ldr	r2, [pc, #12]	; (8000774 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000766:	5cd3      	ldrb	r3, [r2, r3]
 8000768:	fa21 f303 	lsr.w	r3, r1, r3
}
 800076c:	4618      	mov	r0, r3
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40023800 	.word	0x40023800
 8000774:	080010ec 	.word	0x080010ec

08000778 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800077c:	f7ff ffdc 	bl	8000738 <HAL_RCC_GetHCLKFreq>
 8000780:	4601      	mov	r1, r0
 8000782:	4b05      	ldr	r3, [pc, #20]	; (8000798 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000784:	689b      	ldr	r3, [r3, #8]
 8000786:	0b5b      	lsrs	r3, r3, #13
 8000788:	f003 0307 	and.w	r3, r3, #7
 800078c:	4a03      	ldr	r2, [pc, #12]	; (800079c <HAL_RCC_GetPCLK2Freq+0x24>)
 800078e:	5cd3      	ldrb	r3, [r2, r3]
 8000790:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000794:	4618      	mov	r0, r3
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40023800 	.word	0x40023800
 800079c:	080010ec 	.word	0x080010ec

080007a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d101      	bne.n	80007b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80007ae:	2301      	movs	r3, #1
 80007b0:	e03f      	b.n	8000832 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d106      	bne.n	80007cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	2200      	movs	r2, #0
 80007c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	f000 f837 	bl	800083a <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2224      	movs	r2, #36	; 0x24
 80007d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	68da      	ldr	r2, [r3, #12]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80007e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f000 f833 	bl	8000850 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	691a      	ldr	r2, [r3, #16]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80007f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	695a      	ldr	r2, [r3, #20]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000808:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	68da      	ldr	r2, [r3, #12]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000818:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2200      	movs	r2, #0
 800081e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2220      	movs	r2, #32
 8000824:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2220      	movs	r2, #32
 800082c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8000830:	2300      	movs	r3, #0
}
 8000832:	4618      	mov	r0, r3
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800083a:	b480      	push	{r7}
 800083c:	b083      	sub	sp, #12
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8000842:	bf00      	nop
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
	...

08000850 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000854:	b085      	sub	sp, #20
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	691b      	ldr	r3, [r3, #16]
 8000860:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	68da      	ldr	r2, [r3, #12]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	430a      	orrs	r2, r1
 800086e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	689a      	ldr	r2, [r3, #8]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	691b      	ldr	r3, [r3, #16]
 8000878:	431a      	orrs	r2, r3
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	695b      	ldr	r3, [r3, #20]
 800087e:	431a      	orrs	r2, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	69db      	ldr	r3, [r3, #28]
 8000884:	4313      	orrs	r3, r2
 8000886:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	68db      	ldr	r3, [r3, #12]
 800088e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8000892:	f023 030c 	bic.w	r3, r3, #12
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	6812      	ldr	r2, [r2, #0]
 800089a:	68f9      	ldr	r1, [r7, #12]
 800089c:	430b      	orrs	r3, r1
 800089e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	699a      	ldr	r2, [r3, #24]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	430a      	orrs	r2, r1
 80008b4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	69db      	ldr	r3, [r3, #28]
 80008ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80008be:	f040 818b 	bne.w	8000bd8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4ac1      	ldr	r2, [pc, #772]	; (8000bcc <UART_SetConfig+0x37c>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d005      	beq.n	80008d8 <UART_SetConfig+0x88>
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4abf      	ldr	r2, [pc, #764]	; (8000bd0 <UART_SetConfig+0x380>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	f040 80bd 	bne.w	8000a52 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80008d8:	f7ff ff4e 	bl	8000778 <HAL_RCC_GetPCLK2Freq>
 80008dc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	461d      	mov	r5, r3
 80008e2:	f04f 0600 	mov.w	r6, #0
 80008e6:	46a8      	mov	r8, r5
 80008e8:	46b1      	mov	r9, r6
 80008ea:	eb18 0308 	adds.w	r3, r8, r8
 80008ee:	eb49 0409 	adc.w	r4, r9, r9
 80008f2:	4698      	mov	r8, r3
 80008f4:	46a1      	mov	r9, r4
 80008f6:	eb18 0805 	adds.w	r8, r8, r5
 80008fa:	eb49 0906 	adc.w	r9, r9, r6
 80008fe:	f04f 0100 	mov.w	r1, #0
 8000902:	f04f 0200 	mov.w	r2, #0
 8000906:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800090a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800090e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8000912:	4688      	mov	r8, r1
 8000914:	4691      	mov	r9, r2
 8000916:	eb18 0005 	adds.w	r0, r8, r5
 800091a:	eb49 0106 	adc.w	r1, r9, r6
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	461d      	mov	r5, r3
 8000924:	f04f 0600 	mov.w	r6, #0
 8000928:	196b      	adds	r3, r5, r5
 800092a:	eb46 0406 	adc.w	r4, r6, r6
 800092e:	461a      	mov	r2, r3
 8000930:	4623      	mov	r3, r4
 8000932:	f7ff fc49 	bl	80001c8 <__aeabi_uldivmod>
 8000936:	4603      	mov	r3, r0
 8000938:	460c      	mov	r4, r1
 800093a:	461a      	mov	r2, r3
 800093c:	4ba5      	ldr	r3, [pc, #660]	; (8000bd4 <UART_SetConfig+0x384>)
 800093e:	fba3 2302 	umull	r2, r3, r3, r2
 8000942:	095b      	lsrs	r3, r3, #5
 8000944:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	461d      	mov	r5, r3
 800094c:	f04f 0600 	mov.w	r6, #0
 8000950:	46a9      	mov	r9, r5
 8000952:	46b2      	mov	sl, r6
 8000954:	eb19 0309 	adds.w	r3, r9, r9
 8000958:	eb4a 040a 	adc.w	r4, sl, sl
 800095c:	4699      	mov	r9, r3
 800095e:	46a2      	mov	sl, r4
 8000960:	eb19 0905 	adds.w	r9, r9, r5
 8000964:	eb4a 0a06 	adc.w	sl, sl, r6
 8000968:	f04f 0100 	mov.w	r1, #0
 800096c:	f04f 0200 	mov.w	r2, #0
 8000970:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000974:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8000978:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800097c:	4689      	mov	r9, r1
 800097e:	4692      	mov	sl, r2
 8000980:	eb19 0005 	adds.w	r0, r9, r5
 8000984:	eb4a 0106 	adc.w	r1, sl, r6
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	461d      	mov	r5, r3
 800098e:	f04f 0600 	mov.w	r6, #0
 8000992:	196b      	adds	r3, r5, r5
 8000994:	eb46 0406 	adc.w	r4, r6, r6
 8000998:	461a      	mov	r2, r3
 800099a:	4623      	mov	r3, r4
 800099c:	f7ff fc14 	bl	80001c8 <__aeabi_uldivmod>
 80009a0:	4603      	mov	r3, r0
 80009a2:	460c      	mov	r4, r1
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b8b      	ldr	r3, [pc, #556]	; (8000bd4 <UART_SetConfig+0x384>)
 80009a8:	fba3 1302 	umull	r1, r3, r3, r2
 80009ac:	095b      	lsrs	r3, r3, #5
 80009ae:	2164      	movs	r1, #100	; 0x64
 80009b0:	fb01 f303 	mul.w	r3, r1, r3
 80009b4:	1ad3      	subs	r3, r2, r3
 80009b6:	00db      	lsls	r3, r3, #3
 80009b8:	3332      	adds	r3, #50	; 0x32
 80009ba:	4a86      	ldr	r2, [pc, #536]	; (8000bd4 <UART_SetConfig+0x384>)
 80009bc:	fba2 2303 	umull	r2, r3, r2, r3
 80009c0:	095b      	lsrs	r3, r3, #5
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80009c8:	4498      	add	r8, r3
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	461d      	mov	r5, r3
 80009ce:	f04f 0600 	mov.w	r6, #0
 80009d2:	46a9      	mov	r9, r5
 80009d4:	46b2      	mov	sl, r6
 80009d6:	eb19 0309 	adds.w	r3, r9, r9
 80009da:	eb4a 040a 	adc.w	r4, sl, sl
 80009de:	4699      	mov	r9, r3
 80009e0:	46a2      	mov	sl, r4
 80009e2:	eb19 0905 	adds.w	r9, r9, r5
 80009e6:	eb4a 0a06 	adc.w	sl, sl, r6
 80009ea:	f04f 0100 	mov.w	r1, #0
 80009ee:	f04f 0200 	mov.w	r2, #0
 80009f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80009f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80009fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80009fe:	4689      	mov	r9, r1
 8000a00:	4692      	mov	sl, r2
 8000a02:	eb19 0005 	adds.w	r0, r9, r5
 8000a06:	eb4a 0106 	adc.w	r1, sl, r6
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	461d      	mov	r5, r3
 8000a10:	f04f 0600 	mov.w	r6, #0
 8000a14:	196b      	adds	r3, r5, r5
 8000a16:	eb46 0406 	adc.w	r4, r6, r6
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	4623      	mov	r3, r4
 8000a1e:	f7ff fbd3 	bl	80001c8 <__aeabi_uldivmod>
 8000a22:	4603      	mov	r3, r0
 8000a24:	460c      	mov	r4, r1
 8000a26:	461a      	mov	r2, r3
 8000a28:	4b6a      	ldr	r3, [pc, #424]	; (8000bd4 <UART_SetConfig+0x384>)
 8000a2a:	fba3 1302 	umull	r1, r3, r3, r2
 8000a2e:	095b      	lsrs	r3, r3, #5
 8000a30:	2164      	movs	r1, #100	; 0x64
 8000a32:	fb01 f303 	mul.w	r3, r1, r3
 8000a36:	1ad3      	subs	r3, r2, r3
 8000a38:	00db      	lsls	r3, r3, #3
 8000a3a:	3332      	adds	r3, #50	; 0x32
 8000a3c:	4a65      	ldr	r2, [pc, #404]	; (8000bd4 <UART_SetConfig+0x384>)
 8000a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a42:	095b      	lsrs	r3, r3, #5
 8000a44:	f003 0207 	and.w	r2, r3, #7
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4442      	add	r2, r8
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	e26f      	b.n	8000f32 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8000a52:	f7ff fe7d 	bl	8000750 <HAL_RCC_GetPCLK1Freq>
 8000a56:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	461d      	mov	r5, r3
 8000a5c:	f04f 0600 	mov.w	r6, #0
 8000a60:	46a8      	mov	r8, r5
 8000a62:	46b1      	mov	r9, r6
 8000a64:	eb18 0308 	adds.w	r3, r8, r8
 8000a68:	eb49 0409 	adc.w	r4, r9, r9
 8000a6c:	4698      	mov	r8, r3
 8000a6e:	46a1      	mov	r9, r4
 8000a70:	eb18 0805 	adds.w	r8, r8, r5
 8000a74:	eb49 0906 	adc.w	r9, r9, r6
 8000a78:	f04f 0100 	mov.w	r1, #0
 8000a7c:	f04f 0200 	mov.w	r2, #0
 8000a80:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8000a84:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8000a88:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8000a8c:	4688      	mov	r8, r1
 8000a8e:	4691      	mov	r9, r2
 8000a90:	eb18 0005 	adds.w	r0, r8, r5
 8000a94:	eb49 0106 	adc.w	r1, r9, r6
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	461d      	mov	r5, r3
 8000a9e:	f04f 0600 	mov.w	r6, #0
 8000aa2:	196b      	adds	r3, r5, r5
 8000aa4:	eb46 0406 	adc.w	r4, r6, r6
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4623      	mov	r3, r4
 8000aac:	f7ff fb8c 	bl	80001c8 <__aeabi_uldivmod>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	460c      	mov	r4, r1
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4b47      	ldr	r3, [pc, #284]	; (8000bd4 <UART_SetConfig+0x384>)
 8000ab8:	fba3 2302 	umull	r2, r3, r3, r2
 8000abc:	095b      	lsrs	r3, r3, #5
 8000abe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	461d      	mov	r5, r3
 8000ac6:	f04f 0600 	mov.w	r6, #0
 8000aca:	46a9      	mov	r9, r5
 8000acc:	46b2      	mov	sl, r6
 8000ace:	eb19 0309 	adds.w	r3, r9, r9
 8000ad2:	eb4a 040a 	adc.w	r4, sl, sl
 8000ad6:	4699      	mov	r9, r3
 8000ad8:	46a2      	mov	sl, r4
 8000ada:	eb19 0905 	adds.w	r9, r9, r5
 8000ade:	eb4a 0a06 	adc.w	sl, sl, r6
 8000ae2:	f04f 0100 	mov.w	r1, #0
 8000ae6:	f04f 0200 	mov.w	r2, #0
 8000aea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000aee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8000af2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8000af6:	4689      	mov	r9, r1
 8000af8:	4692      	mov	sl, r2
 8000afa:	eb19 0005 	adds.w	r0, r9, r5
 8000afe:	eb4a 0106 	adc.w	r1, sl, r6
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	461d      	mov	r5, r3
 8000b08:	f04f 0600 	mov.w	r6, #0
 8000b0c:	196b      	adds	r3, r5, r5
 8000b0e:	eb46 0406 	adc.w	r4, r6, r6
 8000b12:	461a      	mov	r2, r3
 8000b14:	4623      	mov	r3, r4
 8000b16:	f7ff fb57 	bl	80001c8 <__aeabi_uldivmod>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	460c      	mov	r4, r1
 8000b1e:	461a      	mov	r2, r3
 8000b20:	4b2c      	ldr	r3, [pc, #176]	; (8000bd4 <UART_SetConfig+0x384>)
 8000b22:	fba3 1302 	umull	r1, r3, r3, r2
 8000b26:	095b      	lsrs	r3, r3, #5
 8000b28:	2164      	movs	r1, #100	; 0x64
 8000b2a:	fb01 f303 	mul.w	r3, r1, r3
 8000b2e:	1ad3      	subs	r3, r2, r3
 8000b30:	00db      	lsls	r3, r3, #3
 8000b32:	3332      	adds	r3, #50	; 0x32
 8000b34:	4a27      	ldr	r2, [pc, #156]	; (8000bd4 <UART_SetConfig+0x384>)
 8000b36:	fba2 2303 	umull	r2, r3, r2, r3
 8000b3a:	095b      	lsrs	r3, r3, #5
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000b42:	4498      	add	r8, r3
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	461d      	mov	r5, r3
 8000b48:	f04f 0600 	mov.w	r6, #0
 8000b4c:	46a9      	mov	r9, r5
 8000b4e:	46b2      	mov	sl, r6
 8000b50:	eb19 0309 	adds.w	r3, r9, r9
 8000b54:	eb4a 040a 	adc.w	r4, sl, sl
 8000b58:	4699      	mov	r9, r3
 8000b5a:	46a2      	mov	sl, r4
 8000b5c:	eb19 0905 	adds.w	r9, r9, r5
 8000b60:	eb4a 0a06 	adc.w	sl, sl, r6
 8000b64:	f04f 0100 	mov.w	r1, #0
 8000b68:	f04f 0200 	mov.w	r2, #0
 8000b6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000b70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8000b74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8000b78:	4689      	mov	r9, r1
 8000b7a:	4692      	mov	sl, r2
 8000b7c:	eb19 0005 	adds.w	r0, r9, r5
 8000b80:	eb4a 0106 	adc.w	r1, sl, r6
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	461d      	mov	r5, r3
 8000b8a:	f04f 0600 	mov.w	r6, #0
 8000b8e:	196b      	adds	r3, r5, r5
 8000b90:	eb46 0406 	adc.w	r4, r6, r6
 8000b94:	461a      	mov	r2, r3
 8000b96:	4623      	mov	r3, r4
 8000b98:	f7ff fb16 	bl	80001c8 <__aeabi_uldivmod>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	460c      	mov	r4, r1
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <UART_SetConfig+0x384>)
 8000ba4:	fba3 1302 	umull	r1, r3, r3, r2
 8000ba8:	095b      	lsrs	r3, r3, #5
 8000baa:	2164      	movs	r1, #100	; 0x64
 8000bac:	fb01 f303 	mul.w	r3, r1, r3
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	00db      	lsls	r3, r3, #3
 8000bb4:	3332      	adds	r3, #50	; 0x32
 8000bb6:	4a07      	ldr	r2, [pc, #28]	; (8000bd4 <UART_SetConfig+0x384>)
 8000bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bbc:	095b      	lsrs	r3, r3, #5
 8000bbe:	f003 0207 	and.w	r2, r3, #7
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4442      	add	r2, r8
 8000bc8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8000bca:	e1b2      	b.n	8000f32 <UART_SetConfig+0x6e2>
 8000bcc:	40011000 	.word	0x40011000
 8000bd0:	40011400 	.word	0x40011400
 8000bd4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4ad7      	ldr	r2, [pc, #860]	; (8000f3c <UART_SetConfig+0x6ec>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d005      	beq.n	8000bee <UART_SetConfig+0x39e>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4ad6      	ldr	r2, [pc, #856]	; (8000f40 <UART_SetConfig+0x6f0>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	f040 80d1 	bne.w	8000d90 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8000bee:	f7ff fdc3 	bl	8000778 <HAL_RCC_GetPCLK2Freq>
 8000bf2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	469a      	mov	sl, r3
 8000bf8:	f04f 0b00 	mov.w	fp, #0
 8000bfc:	46d0      	mov	r8, sl
 8000bfe:	46d9      	mov	r9, fp
 8000c00:	eb18 0308 	adds.w	r3, r8, r8
 8000c04:	eb49 0409 	adc.w	r4, r9, r9
 8000c08:	4698      	mov	r8, r3
 8000c0a:	46a1      	mov	r9, r4
 8000c0c:	eb18 080a 	adds.w	r8, r8, sl
 8000c10:	eb49 090b 	adc.w	r9, r9, fp
 8000c14:	f04f 0100 	mov.w	r1, #0
 8000c18:	f04f 0200 	mov.w	r2, #0
 8000c1c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8000c20:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8000c24:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8000c28:	4688      	mov	r8, r1
 8000c2a:	4691      	mov	r9, r2
 8000c2c:	eb1a 0508 	adds.w	r5, sl, r8
 8000c30:	eb4b 0609 	adc.w	r6, fp, r9
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f04f 0200 	mov.w	r2, #0
 8000c3e:	f04f 0300 	mov.w	r3, #0
 8000c42:	f04f 0400 	mov.w	r4, #0
 8000c46:	0094      	lsls	r4, r2, #2
 8000c48:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8000c4c:	008b      	lsls	r3, r1, #2
 8000c4e:	461a      	mov	r2, r3
 8000c50:	4623      	mov	r3, r4
 8000c52:	4628      	mov	r0, r5
 8000c54:	4631      	mov	r1, r6
 8000c56:	f7ff fab7 	bl	80001c8 <__aeabi_uldivmod>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	460c      	mov	r4, r1
 8000c5e:	461a      	mov	r2, r3
 8000c60:	4bb8      	ldr	r3, [pc, #736]	; (8000f44 <UART_SetConfig+0x6f4>)
 8000c62:	fba3 2302 	umull	r2, r3, r3, r2
 8000c66:	095b      	lsrs	r3, r3, #5
 8000c68:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	469b      	mov	fp, r3
 8000c70:	f04f 0c00 	mov.w	ip, #0
 8000c74:	46d9      	mov	r9, fp
 8000c76:	46e2      	mov	sl, ip
 8000c78:	eb19 0309 	adds.w	r3, r9, r9
 8000c7c:	eb4a 040a 	adc.w	r4, sl, sl
 8000c80:	4699      	mov	r9, r3
 8000c82:	46a2      	mov	sl, r4
 8000c84:	eb19 090b 	adds.w	r9, r9, fp
 8000c88:	eb4a 0a0c 	adc.w	sl, sl, ip
 8000c8c:	f04f 0100 	mov.w	r1, #0
 8000c90:	f04f 0200 	mov.w	r2, #0
 8000c94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000c98:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8000c9c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8000ca0:	4689      	mov	r9, r1
 8000ca2:	4692      	mov	sl, r2
 8000ca4:	eb1b 0509 	adds.w	r5, fp, r9
 8000ca8:	eb4c 060a 	adc.w	r6, ip, sl
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f04f 0200 	mov.w	r2, #0
 8000cb6:	f04f 0300 	mov.w	r3, #0
 8000cba:	f04f 0400 	mov.w	r4, #0
 8000cbe:	0094      	lsls	r4, r2, #2
 8000cc0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8000cc4:	008b      	lsls	r3, r1, #2
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	4623      	mov	r3, r4
 8000cca:	4628      	mov	r0, r5
 8000ccc:	4631      	mov	r1, r6
 8000cce:	f7ff fa7b 	bl	80001c8 <__aeabi_uldivmod>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	460c      	mov	r4, r1
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	4b9a      	ldr	r3, [pc, #616]	; (8000f44 <UART_SetConfig+0x6f4>)
 8000cda:	fba3 1302 	umull	r1, r3, r3, r2
 8000cde:	095b      	lsrs	r3, r3, #5
 8000ce0:	2164      	movs	r1, #100	; 0x64
 8000ce2:	fb01 f303 	mul.w	r3, r1, r3
 8000ce6:	1ad3      	subs	r3, r2, r3
 8000ce8:	011b      	lsls	r3, r3, #4
 8000cea:	3332      	adds	r3, #50	; 0x32
 8000cec:	4a95      	ldr	r2, [pc, #596]	; (8000f44 <UART_SetConfig+0x6f4>)
 8000cee:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf2:	095b      	lsrs	r3, r3, #5
 8000cf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000cf8:	4498      	add	r8, r3
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	469b      	mov	fp, r3
 8000cfe:	f04f 0c00 	mov.w	ip, #0
 8000d02:	46d9      	mov	r9, fp
 8000d04:	46e2      	mov	sl, ip
 8000d06:	eb19 0309 	adds.w	r3, r9, r9
 8000d0a:	eb4a 040a 	adc.w	r4, sl, sl
 8000d0e:	4699      	mov	r9, r3
 8000d10:	46a2      	mov	sl, r4
 8000d12:	eb19 090b 	adds.w	r9, r9, fp
 8000d16:	eb4a 0a0c 	adc.w	sl, sl, ip
 8000d1a:	f04f 0100 	mov.w	r1, #0
 8000d1e:	f04f 0200 	mov.w	r2, #0
 8000d22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000d26:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8000d2a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8000d2e:	4689      	mov	r9, r1
 8000d30:	4692      	mov	sl, r2
 8000d32:	eb1b 0509 	adds.w	r5, fp, r9
 8000d36:	eb4c 060a 	adc.w	r6, ip, sl
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	4619      	mov	r1, r3
 8000d40:	f04f 0200 	mov.w	r2, #0
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	f04f 0400 	mov.w	r4, #0
 8000d4c:	0094      	lsls	r4, r2, #2
 8000d4e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8000d52:	008b      	lsls	r3, r1, #2
 8000d54:	461a      	mov	r2, r3
 8000d56:	4623      	mov	r3, r4
 8000d58:	4628      	mov	r0, r5
 8000d5a:	4631      	mov	r1, r6
 8000d5c:	f7ff fa34 	bl	80001c8 <__aeabi_uldivmod>
 8000d60:	4603      	mov	r3, r0
 8000d62:	460c      	mov	r4, r1
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b77      	ldr	r3, [pc, #476]	; (8000f44 <UART_SetConfig+0x6f4>)
 8000d68:	fba3 1302 	umull	r1, r3, r3, r2
 8000d6c:	095b      	lsrs	r3, r3, #5
 8000d6e:	2164      	movs	r1, #100	; 0x64
 8000d70:	fb01 f303 	mul.w	r3, r1, r3
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	011b      	lsls	r3, r3, #4
 8000d78:	3332      	adds	r3, #50	; 0x32
 8000d7a:	4a72      	ldr	r2, [pc, #456]	; (8000f44 <UART_SetConfig+0x6f4>)
 8000d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d80:	095b      	lsrs	r3, r3, #5
 8000d82:	f003 020f 	and.w	r2, r3, #15
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4442      	add	r2, r8
 8000d8c:	609a      	str	r2, [r3, #8]
 8000d8e:	e0d0      	b.n	8000f32 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8000d90:	f7ff fcde 	bl	8000750 <HAL_RCC_GetPCLK1Freq>
 8000d94:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	469a      	mov	sl, r3
 8000d9a:	f04f 0b00 	mov.w	fp, #0
 8000d9e:	46d0      	mov	r8, sl
 8000da0:	46d9      	mov	r9, fp
 8000da2:	eb18 0308 	adds.w	r3, r8, r8
 8000da6:	eb49 0409 	adc.w	r4, r9, r9
 8000daa:	4698      	mov	r8, r3
 8000dac:	46a1      	mov	r9, r4
 8000dae:	eb18 080a 	adds.w	r8, r8, sl
 8000db2:	eb49 090b 	adc.w	r9, r9, fp
 8000db6:	f04f 0100 	mov.w	r1, #0
 8000dba:	f04f 0200 	mov.w	r2, #0
 8000dbe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8000dc2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8000dc6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8000dca:	4688      	mov	r8, r1
 8000dcc:	4691      	mov	r9, r2
 8000dce:	eb1a 0508 	adds.w	r5, sl, r8
 8000dd2:	eb4b 0609 	adc.w	r6, fp, r9
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	4619      	mov	r1, r3
 8000ddc:	f04f 0200 	mov.w	r2, #0
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	f04f 0400 	mov.w	r4, #0
 8000de8:	0094      	lsls	r4, r2, #2
 8000dea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8000dee:	008b      	lsls	r3, r1, #2
 8000df0:	461a      	mov	r2, r3
 8000df2:	4623      	mov	r3, r4
 8000df4:	4628      	mov	r0, r5
 8000df6:	4631      	mov	r1, r6
 8000df8:	f7ff f9e6 	bl	80001c8 <__aeabi_uldivmod>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	460c      	mov	r4, r1
 8000e00:	461a      	mov	r2, r3
 8000e02:	4b50      	ldr	r3, [pc, #320]	; (8000f44 <UART_SetConfig+0x6f4>)
 8000e04:	fba3 2302 	umull	r2, r3, r3, r2
 8000e08:	095b      	lsrs	r3, r3, #5
 8000e0a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	469b      	mov	fp, r3
 8000e12:	f04f 0c00 	mov.w	ip, #0
 8000e16:	46d9      	mov	r9, fp
 8000e18:	46e2      	mov	sl, ip
 8000e1a:	eb19 0309 	adds.w	r3, r9, r9
 8000e1e:	eb4a 040a 	adc.w	r4, sl, sl
 8000e22:	4699      	mov	r9, r3
 8000e24:	46a2      	mov	sl, r4
 8000e26:	eb19 090b 	adds.w	r9, r9, fp
 8000e2a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8000e2e:	f04f 0100 	mov.w	r1, #0
 8000e32:	f04f 0200 	mov.w	r2, #0
 8000e36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000e3a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8000e3e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8000e42:	4689      	mov	r9, r1
 8000e44:	4692      	mov	sl, r2
 8000e46:	eb1b 0509 	adds.w	r5, fp, r9
 8000e4a:	eb4c 060a 	adc.w	r6, ip, sl
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	4619      	mov	r1, r3
 8000e54:	f04f 0200 	mov.w	r2, #0
 8000e58:	f04f 0300 	mov.w	r3, #0
 8000e5c:	f04f 0400 	mov.w	r4, #0
 8000e60:	0094      	lsls	r4, r2, #2
 8000e62:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8000e66:	008b      	lsls	r3, r1, #2
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4623      	mov	r3, r4
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	4631      	mov	r1, r6
 8000e70:	f7ff f9aa 	bl	80001c8 <__aeabi_uldivmod>
 8000e74:	4603      	mov	r3, r0
 8000e76:	460c      	mov	r4, r1
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b32      	ldr	r3, [pc, #200]	; (8000f44 <UART_SetConfig+0x6f4>)
 8000e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8000e80:	095b      	lsrs	r3, r3, #5
 8000e82:	2164      	movs	r1, #100	; 0x64
 8000e84:	fb01 f303 	mul.w	r3, r1, r3
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	011b      	lsls	r3, r3, #4
 8000e8c:	3332      	adds	r3, #50	; 0x32
 8000e8e:	4a2d      	ldr	r2, [pc, #180]	; (8000f44 <UART_SetConfig+0x6f4>)
 8000e90:	fba2 2303 	umull	r2, r3, r2, r3
 8000e94:	095b      	lsrs	r3, r3, #5
 8000e96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e9a:	4498      	add	r8, r3
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	469b      	mov	fp, r3
 8000ea0:	f04f 0c00 	mov.w	ip, #0
 8000ea4:	46d9      	mov	r9, fp
 8000ea6:	46e2      	mov	sl, ip
 8000ea8:	eb19 0309 	adds.w	r3, r9, r9
 8000eac:	eb4a 040a 	adc.w	r4, sl, sl
 8000eb0:	4699      	mov	r9, r3
 8000eb2:	46a2      	mov	sl, r4
 8000eb4:	eb19 090b 	adds.w	r9, r9, fp
 8000eb8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8000ebc:	f04f 0100 	mov.w	r1, #0
 8000ec0:	f04f 0200 	mov.w	r2, #0
 8000ec4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000ec8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8000ecc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8000ed0:	4689      	mov	r9, r1
 8000ed2:	4692      	mov	sl, r2
 8000ed4:	eb1b 0509 	adds.w	r5, fp, r9
 8000ed8:	eb4c 060a 	adc.w	r6, ip, sl
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f04f 0200 	mov.w	r2, #0
 8000ee6:	f04f 0300 	mov.w	r3, #0
 8000eea:	f04f 0400 	mov.w	r4, #0
 8000eee:	0094      	lsls	r4, r2, #2
 8000ef0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8000ef4:	008b      	lsls	r3, r1, #2
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	4623      	mov	r3, r4
 8000efa:	4628      	mov	r0, r5
 8000efc:	4631      	mov	r1, r6
 8000efe:	f7ff f963 	bl	80001c8 <__aeabi_uldivmod>
 8000f02:	4603      	mov	r3, r0
 8000f04:	460c      	mov	r4, r1
 8000f06:	461a      	mov	r2, r3
 8000f08:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <UART_SetConfig+0x6f4>)
 8000f0a:	fba3 1302 	umull	r1, r3, r3, r2
 8000f0e:	095b      	lsrs	r3, r3, #5
 8000f10:	2164      	movs	r1, #100	; 0x64
 8000f12:	fb01 f303 	mul.w	r3, r1, r3
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	011b      	lsls	r3, r3, #4
 8000f1a:	3332      	adds	r3, #50	; 0x32
 8000f1c:	4a09      	ldr	r2, [pc, #36]	; (8000f44 <UART_SetConfig+0x6f4>)
 8000f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f22:	095b      	lsrs	r3, r3, #5
 8000f24:	f003 020f 	and.w	r2, r3, #15
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4442      	add	r2, r8
 8000f2e:	609a      	str	r2, [r3, #8]
}
 8000f30:	e7ff      	b.n	8000f32 <UART_SetConfig+0x6e2>
 8000f32:	bf00      	nop
 8000f34:	3714      	adds	r7, #20
 8000f36:	46bd      	mov	sp, r7
 8000f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f3c:	40011000 	.word	0x40011000
 8000f40:	40011400 	.word	0x40011400
 8000f44:	51eb851f 	.word	0x51eb851f

08000f48 <main>:
static void Error_handler(void);

UART_HandleTypeDef huart2;

int main(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
	HAL_Init();
 8000f4c:	f7ff fabc 	bl	80004c8 <HAL_Init>
	SystemClockConfig();
 8000f50:	f000 f805 	bl	8000f5e <SystemClockConfig>
	UART2_Init();
 8000f54:	f000 f80a 	bl	8000f6c <UART2_Init>

	return 0;
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <SystemClockConfig>:

void SystemClockConfig(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0
	;
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <UART2_Init>:

void UART2_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 8000f70:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <UART2_Init+0x4c>)
 8000f72:	4a12      	ldr	r2, [pc, #72]	; (8000fbc <UART2_Init+0x50>)
 8000f74:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000f76:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <UART2_Init+0x4c>)
 8000f78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f7c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <UART2_Init+0x4c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <UART2_Init+0x4c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <UART2_Init+0x4c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000f90:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <UART2_Init+0x4c>)
 8000f92:	220c      	movs	r2, #12
 8000f94:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f96:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <UART2_Init+0x4c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <UART2_Init+0x4c>)
 8000f9e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000fa2:	61da      	str	r2, [r3, #28]

	if(HAL_UART_Init(&huart2) != HAL_OK)
 8000fa4:	4804      	ldr	r0, [pc, #16]	; (8000fb8 <UART2_Init+0x4c>)
 8000fa6:	f7ff fbfb 	bl	80007a0 <HAL_UART_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <UART2_Init+0x48>
	{
		//there is a problem
		Error_handler();
 8000fb0:	f000 f806 	bl	8000fc0 <Error_handler>
	}
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000028 	.word	0x20000028
 8000fbc:	40004400 	.word	0x40004400

08000fc0 <Error_handler>:

static void Error_handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
	while (1);
 8000fc4:	e7fe      	b.n	8000fc4 <Error_handler+0x4>
	...

08000fc8 <HAL_MspInit>:
 *      Author: thaithinhtran
 */
#include "stm32f4xx_hal.h"

void HAL_MspInit(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
//Here will do low level processor specific inits.
	//1. set up the priority grouping of the cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fcc:	2003      	movs	r0, #3
 8000fce:	f7ff fb7f 	bl	80006d0 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x07<<16; //usage faul , memory fault , bus fault system exceptions
 8000fd2:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <HAL_MspInit+0x40>)
 8000fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd6:	4a0c      	ldr	r2, [pc, #48]	; (8001008 <HAL_MspInit+0x40>)
 8000fd8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000fdc:	6253      	str	r3, [r2, #36]	; 0x24

	//3. Configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	f06f 000b 	mvn.w	r0, #11
 8000fe6:	f7ff fb7e 	bl	80006e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2100      	movs	r1, #0
 8000fee:	f06f 000a 	mvn.w	r0, #10
 8000ff2:	f7ff fb78 	bl	80006e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	f06f 0009 	mvn.w	r0, #9
 8000ffe:	f7ff fb72 	bl	80006e6 <HAL_NVIC_SetPriority>
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <SystemInit+0x28>)
 8001012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001016:	4a07      	ldr	r2, [pc, #28]	; (8001034 <SystemInit+0x28>)
 8001018:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800101c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001020:	4b04      	ldr	r3, [pc, #16]	; (8001034 <SystemInit+0x28>)
 8001022:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001026:	609a      	str	r2, [r3, #8]
#endif
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001038:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001070 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800103c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800103e:	e003      	b.n	8001048 <LoopCopyDataInit>

08001040 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001042:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001044:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001046:	3104      	adds	r1, #4

08001048 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001048:	480b      	ldr	r0, [pc, #44]	; (8001078 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800104a:	4b0c      	ldr	r3, [pc, #48]	; (800107c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800104c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800104e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001050:	d3f6      	bcc.n	8001040 <CopyDataInit>
  ldr  r2, =_sbss
 8001052:	4a0b      	ldr	r2, [pc, #44]	; (8001080 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001054:	e002      	b.n	800105c <LoopFillZerobss>

08001056 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001056:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001058:	f842 3b04 	str.w	r3, [r2], #4

0800105c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800105c:	4b09      	ldr	r3, [pc, #36]	; (8001084 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800105e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001060:	d3f9      	bcc.n	8001056 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001062:	f7ff ffd3 	bl	800100c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001066:	f000 f811 	bl	800108c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800106a:	f7ff ff6d 	bl	8000f48 <main>
  bx  lr    
 800106e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001070:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001074:	08001104 	.word	0x08001104
  ldr  r0, =_sdata
 8001078:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800107c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001080:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001084:	20000068 	.word	0x20000068

08001088 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001088:	e7fe      	b.n	8001088 <ADC_IRQHandler>
	...

0800108c <__libc_init_array>:
 800108c:	b570      	push	{r4, r5, r6, lr}
 800108e:	4e0d      	ldr	r6, [pc, #52]	; (80010c4 <__libc_init_array+0x38>)
 8001090:	4c0d      	ldr	r4, [pc, #52]	; (80010c8 <__libc_init_array+0x3c>)
 8001092:	1ba4      	subs	r4, r4, r6
 8001094:	10a4      	asrs	r4, r4, #2
 8001096:	2500      	movs	r5, #0
 8001098:	42a5      	cmp	r5, r4
 800109a:	d109      	bne.n	80010b0 <__libc_init_array+0x24>
 800109c:	4e0b      	ldr	r6, [pc, #44]	; (80010cc <__libc_init_array+0x40>)
 800109e:	4c0c      	ldr	r4, [pc, #48]	; (80010d0 <__libc_init_array+0x44>)
 80010a0:	f000 f818 	bl	80010d4 <_init>
 80010a4:	1ba4      	subs	r4, r4, r6
 80010a6:	10a4      	asrs	r4, r4, #2
 80010a8:	2500      	movs	r5, #0
 80010aa:	42a5      	cmp	r5, r4
 80010ac:	d105      	bne.n	80010ba <__libc_init_array+0x2e>
 80010ae:	bd70      	pop	{r4, r5, r6, pc}
 80010b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80010b4:	4798      	blx	r3
 80010b6:	3501      	adds	r5, #1
 80010b8:	e7ee      	b.n	8001098 <__libc_init_array+0xc>
 80010ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80010be:	4798      	blx	r3
 80010c0:	3501      	adds	r5, #1
 80010c2:	e7f2      	b.n	80010aa <__libc_init_array+0x1e>
 80010c4:	080010fc 	.word	0x080010fc
 80010c8:	080010fc 	.word	0x080010fc
 80010cc:	080010fc 	.word	0x080010fc
 80010d0:	08001100 	.word	0x08001100

080010d4 <_init>:
 80010d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010d6:	bf00      	nop
 80010d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010da:	bc08      	pop	{r3}
 80010dc:	469e      	mov	lr, r3
 80010de:	4770      	bx	lr

080010e0 <_fini>:
 80010e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010e2:	bf00      	nop
 80010e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010e6:	bc08      	pop	{r3}
 80010e8:	469e      	mov	lr, r3
 80010ea:	4770      	bx	lr
