
time_base_100ms_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d74  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000efc  08000efc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000efc  08000efc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000efc  08000efc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000efc  08000efc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000efc  08000efc  00010efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f00  08000f00  00010f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000f04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  2000000c  08000f10  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08000f10  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ed3  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000112e  00000000  00000000  00027f0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000840  00000000  00000000  00029040  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007a8  00000000  00000000  00029880  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000204f7  00000000  00000000  0002a028  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006a10  00000000  00000000  0004a51f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c84cd  00000000  00000000  00050f2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001193fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021f4  00000000  00000000  00119478  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000ee4 	.word	0x08000ee4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08000ee4 	.word	0x08000ee4

080001c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80001cc:	4b0e      	ldr	r3, [pc, #56]	; (8000208 <HAL_Init+0x40>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a0d      	ldr	r2, [pc, #52]	; (8000208 <HAL_Init+0x40>)
 80001d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80001d8:	4b0b      	ldr	r3, [pc, #44]	; (8000208 <HAL_Init+0x40>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a0a      	ldr	r2, [pc, #40]	; (8000208 <HAL_Init+0x40>)
 80001de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001e4:	4b08      	ldr	r3, [pc, #32]	; (8000208 <HAL_Init+0x40>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a07      	ldr	r2, [pc, #28]	; (8000208 <HAL_Init+0x40>)
 80001ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80001ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001f0:	2003      	movs	r0, #3
 80001f2:	f000 f91f 	bl	8000434 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001f6:	2000      	movs	r0, #0
 80001f8:	f000 f808 	bl	800020c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001fc:	f000 fdd0 	bl	8000da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000200:	2300      	movs	r3, #0
}
 8000202:	4618      	mov	r0, r3
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	40023c00 	.word	0x40023c00

0800020c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000214:	4b12      	ldr	r3, [pc, #72]	; (8000260 <HAL_InitTick+0x54>)
 8000216:	681a      	ldr	r2, [r3, #0]
 8000218:	4b12      	ldr	r3, [pc, #72]	; (8000264 <HAL_InitTick+0x58>)
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	4619      	mov	r1, r3
 800021e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000222:	fbb3 f3f1 	udiv	r3, r3, r1
 8000226:	fbb2 f3f3 	udiv	r3, r2, r3
 800022a:	4618      	mov	r0, r3
 800022c:	f000 f937 	bl	800049e <HAL_SYSTICK_Config>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000236:	2301      	movs	r3, #1
 8000238:	e00e      	b.n	8000258 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	2b0f      	cmp	r3, #15
 800023e:	d80a      	bhi.n	8000256 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000240:	2200      	movs	r2, #0
 8000242:	6879      	ldr	r1, [r7, #4]
 8000244:	f04f 30ff 	mov.w	r0, #4294967295
 8000248:	f000 f8ff 	bl	800044a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800024c:	4a06      	ldr	r2, [pc, #24]	; (8000268 <HAL_InitTick+0x5c>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000252:	2300      	movs	r3, #0
 8000254:	e000      	b.n	8000258 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000256:	2301      	movs	r3, #1
}
 8000258:	4618      	mov	r0, r3
 800025a:	3708      	adds	r7, #8
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}
 8000260:	20000008 	.word	0x20000008
 8000264:	20000004 	.word	0x20000004
 8000268:	20000000 	.word	0x20000000

0800026c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000270:	4b06      	ldr	r3, [pc, #24]	; (800028c <HAL_IncTick+0x20>)
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	461a      	mov	r2, r3
 8000276:	4b06      	ldr	r3, [pc, #24]	; (8000290 <HAL_IncTick+0x24>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	4413      	add	r3, r2
 800027c:	4a04      	ldr	r2, [pc, #16]	; (8000290 <HAL_IncTick+0x24>)
 800027e:	6013      	str	r3, [r2, #0]
}
 8000280:	bf00      	nop
 8000282:	46bd      	mov	sp, r7
 8000284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	20000004 	.word	0x20000004
 8000290:	20000028 	.word	0x20000028

08000294 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000294:	b480      	push	{r7}
 8000296:	b085      	sub	sp, #20
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f003 0307 	and.w	r3, r3, #7
 80002a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002a4:	4b0c      	ldr	r3, [pc, #48]	; (80002d8 <__NVIC_SetPriorityGrouping+0x44>)
 80002a6:	68db      	ldr	r3, [r3, #12]
 80002a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002aa:	68ba      	ldr	r2, [r7, #8]
 80002ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002b0:	4013      	ands	r3, r2
 80002b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002b8:	68bb      	ldr	r3, [r7, #8]
 80002ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002c6:	4a04      	ldr	r2, [pc, #16]	; (80002d8 <__NVIC_SetPriorityGrouping+0x44>)
 80002c8:	68bb      	ldr	r3, [r7, #8]
 80002ca:	60d3      	str	r3, [r2, #12]
}
 80002cc:	bf00      	nop
 80002ce:	3714      	adds	r7, #20
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr
 80002d8:	e000ed00 	.word	0xe000ed00

080002dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002e0:	4b04      	ldr	r3, [pc, #16]	; (80002f4 <__NVIC_GetPriorityGrouping+0x18>)
 80002e2:	68db      	ldr	r3, [r3, #12]
 80002e4:	0a1b      	lsrs	r3, r3, #8
 80002e6:	f003 0307 	and.w	r3, r3, #7
}
 80002ea:	4618      	mov	r0, r3
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr
 80002f4:	e000ed00 	.word	0xe000ed00

080002f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000306:	2b00      	cmp	r3, #0
 8000308:	db0b      	blt.n	8000322 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	f003 021f 	and.w	r2, r3, #31
 8000310:	4907      	ldr	r1, [pc, #28]	; (8000330 <__NVIC_EnableIRQ+0x38>)
 8000312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000316:	095b      	lsrs	r3, r3, #5
 8000318:	2001      	movs	r0, #1
 800031a:	fa00 f202 	lsl.w	r2, r0, r2
 800031e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000322:	bf00      	nop
 8000324:	370c      	adds	r7, #12
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	e000e100 	.word	0xe000e100

08000334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	4603      	mov	r3, r0
 800033c:	6039      	str	r1, [r7, #0]
 800033e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000344:	2b00      	cmp	r3, #0
 8000346:	db0a      	blt.n	800035e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000348:	683b      	ldr	r3, [r7, #0]
 800034a:	b2da      	uxtb	r2, r3
 800034c:	490c      	ldr	r1, [pc, #48]	; (8000380 <__NVIC_SetPriority+0x4c>)
 800034e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000352:	0112      	lsls	r2, r2, #4
 8000354:	b2d2      	uxtb	r2, r2
 8000356:	440b      	add	r3, r1
 8000358:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800035c:	e00a      	b.n	8000374 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	b2da      	uxtb	r2, r3
 8000362:	4908      	ldr	r1, [pc, #32]	; (8000384 <__NVIC_SetPriority+0x50>)
 8000364:	79fb      	ldrb	r3, [r7, #7]
 8000366:	f003 030f 	and.w	r3, r3, #15
 800036a:	3b04      	subs	r3, #4
 800036c:	0112      	lsls	r2, r2, #4
 800036e:	b2d2      	uxtb	r2, r2
 8000370:	440b      	add	r3, r1
 8000372:	761a      	strb	r2, [r3, #24]
}
 8000374:	bf00      	nop
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr
 8000380:	e000e100 	.word	0xe000e100
 8000384:	e000ed00 	.word	0xe000ed00

08000388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000388:	b480      	push	{r7}
 800038a:	b089      	sub	sp, #36	; 0x24
 800038c:	af00      	add	r7, sp, #0
 800038e:	60f8      	str	r0, [r7, #12]
 8000390:	60b9      	str	r1, [r7, #8]
 8000392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	f003 0307 	and.w	r3, r3, #7
 800039a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800039c:	69fb      	ldr	r3, [r7, #28]
 800039e:	f1c3 0307 	rsb	r3, r3, #7
 80003a2:	2b04      	cmp	r3, #4
 80003a4:	bf28      	it	cs
 80003a6:	2304      	movcs	r3, #4
 80003a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003aa:	69fb      	ldr	r3, [r7, #28]
 80003ac:	3304      	adds	r3, #4
 80003ae:	2b06      	cmp	r3, #6
 80003b0:	d902      	bls.n	80003b8 <NVIC_EncodePriority+0x30>
 80003b2:	69fb      	ldr	r3, [r7, #28]
 80003b4:	3b03      	subs	r3, #3
 80003b6:	e000      	b.n	80003ba <NVIC_EncodePriority+0x32>
 80003b8:	2300      	movs	r3, #0
 80003ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003bc:	f04f 32ff 	mov.w	r2, #4294967295
 80003c0:	69bb      	ldr	r3, [r7, #24]
 80003c2:	fa02 f303 	lsl.w	r3, r2, r3
 80003c6:	43da      	mvns	r2, r3
 80003c8:	68bb      	ldr	r3, [r7, #8]
 80003ca:	401a      	ands	r2, r3
 80003cc:	697b      	ldr	r3, [r7, #20]
 80003ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003d0:	f04f 31ff 	mov.w	r1, #4294967295
 80003d4:	697b      	ldr	r3, [r7, #20]
 80003d6:	fa01 f303 	lsl.w	r3, r1, r3
 80003da:	43d9      	mvns	r1, r3
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003e0:	4313      	orrs	r3, r2
         );
}
 80003e2:	4618      	mov	r0, r3
 80003e4:	3724      	adds	r7, #36	; 0x24
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr
	...

080003f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	3b01      	subs	r3, #1
 80003fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000400:	d301      	bcc.n	8000406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000402:	2301      	movs	r3, #1
 8000404:	e00f      	b.n	8000426 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000406:	4a0a      	ldr	r2, [pc, #40]	; (8000430 <SysTick_Config+0x40>)
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	3b01      	subs	r3, #1
 800040c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800040e:	210f      	movs	r1, #15
 8000410:	f04f 30ff 	mov.w	r0, #4294967295
 8000414:	f7ff ff8e 	bl	8000334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000418:	4b05      	ldr	r3, [pc, #20]	; (8000430 <SysTick_Config+0x40>)
 800041a:	2200      	movs	r2, #0
 800041c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800041e:	4b04      	ldr	r3, [pc, #16]	; (8000430 <SysTick_Config+0x40>)
 8000420:	2207      	movs	r2, #7
 8000422:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000424:	2300      	movs	r3, #0
}
 8000426:	4618      	mov	r0, r3
 8000428:	3708      	adds	r7, #8
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	e000e010 	.word	0xe000e010

08000434 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800043c:	6878      	ldr	r0, [r7, #4]
 800043e:	f7ff ff29 	bl	8000294 <__NVIC_SetPriorityGrouping>
}
 8000442:	bf00      	nop
 8000444:	3708      	adds	r7, #8
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}

0800044a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800044a:	b580      	push	{r7, lr}
 800044c:	b086      	sub	sp, #24
 800044e:	af00      	add	r7, sp, #0
 8000450:	4603      	mov	r3, r0
 8000452:	60b9      	str	r1, [r7, #8]
 8000454:	607a      	str	r2, [r7, #4]
 8000456:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000458:	2300      	movs	r3, #0
 800045a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800045c:	f7ff ff3e 	bl	80002dc <__NVIC_GetPriorityGrouping>
 8000460:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000462:	687a      	ldr	r2, [r7, #4]
 8000464:	68b9      	ldr	r1, [r7, #8]
 8000466:	6978      	ldr	r0, [r7, #20]
 8000468:	f7ff ff8e 	bl	8000388 <NVIC_EncodePriority>
 800046c:	4602      	mov	r2, r0
 800046e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000472:	4611      	mov	r1, r2
 8000474:	4618      	mov	r0, r3
 8000476:	f7ff ff5d 	bl	8000334 <__NVIC_SetPriority>
}
 800047a:	bf00      	nop
 800047c:	3718      	adds	r7, #24
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}

08000482 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000482:	b580      	push	{r7, lr}
 8000484:	b082      	sub	sp, #8
 8000486:	af00      	add	r7, sp, #0
 8000488:	4603      	mov	r3, r0
 800048a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800048c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000490:	4618      	mov	r0, r3
 8000492:	f7ff ff31 	bl	80002f8 <__NVIC_EnableIRQ>
}
 8000496:	bf00      	nop
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}

0800049e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800049e:	b580      	push	{r7, lr}
 80004a0:	b082      	sub	sp, #8
 80004a2:	af00      	add	r7, sp, #0
 80004a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80004a6:	6878      	ldr	r0, [r7, #4]
 80004a8:	f7ff ffa2 	bl	80003f0 <SysTick_Config>
 80004ac:	4603      	mov	r3, r0
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	3708      	adds	r7, #8
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}

080004b6 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80004b6:	b580      	push	{r7, lr}
 80004b8:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80004ba:	f000 f802 	bl	80004c2 <HAL_SYSTICK_Callback>
}
 80004be:	bf00      	nop
 80004c0:	bd80      	pop	{r7, pc}

080004c2 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80004c2:	b480      	push	{r7}
 80004c4:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80004c6:	bf00      	nop
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr

080004d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b089      	sub	sp, #36	; 0x24
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80004da:	2300      	movs	r3, #0
 80004dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80004de:	2300      	movs	r3, #0
 80004e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80004e2:	2300      	movs	r3, #0
 80004e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80004e6:	2300      	movs	r3, #0
 80004e8:	61fb      	str	r3, [r7, #28]
 80004ea:	e16b      	b.n	80007c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80004ec:	2201      	movs	r2, #1
 80004ee:	69fb      	ldr	r3, [r7, #28]
 80004f0:	fa02 f303 	lsl.w	r3, r2, r3
 80004f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	697a      	ldr	r2, [r7, #20]
 80004fc:	4013      	ands	r3, r2
 80004fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000500:	693a      	ldr	r2, [r7, #16]
 8000502:	697b      	ldr	r3, [r7, #20]
 8000504:	429a      	cmp	r2, r3
 8000506:	f040 815a 	bne.w	80007be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	685b      	ldr	r3, [r3, #4]
 800050e:	2b01      	cmp	r3, #1
 8000510:	d00b      	beq.n	800052a <HAL_GPIO_Init+0x5a>
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	685b      	ldr	r3, [r3, #4]
 8000516:	2b02      	cmp	r3, #2
 8000518:	d007      	beq.n	800052a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800051e:	2b11      	cmp	r3, #17
 8000520:	d003      	beq.n	800052a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	685b      	ldr	r3, [r3, #4]
 8000526:	2b12      	cmp	r3, #18
 8000528:	d130      	bne.n	800058c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	689b      	ldr	r3, [r3, #8]
 800052e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000530:	69fb      	ldr	r3, [r7, #28]
 8000532:	005b      	lsls	r3, r3, #1
 8000534:	2203      	movs	r2, #3
 8000536:	fa02 f303 	lsl.w	r3, r2, r3
 800053a:	43db      	mvns	r3, r3
 800053c:	69ba      	ldr	r2, [r7, #24]
 800053e:	4013      	ands	r3, r2
 8000540:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	68da      	ldr	r2, [r3, #12]
 8000546:	69fb      	ldr	r3, [r7, #28]
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	fa02 f303 	lsl.w	r3, r2, r3
 800054e:	69ba      	ldr	r2, [r7, #24]
 8000550:	4313      	orrs	r3, r2
 8000552:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	69ba      	ldr	r2, [r7, #24]
 8000558:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	685b      	ldr	r3, [r3, #4]
 800055e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000560:	2201      	movs	r2, #1
 8000562:	69fb      	ldr	r3, [r7, #28]
 8000564:	fa02 f303 	lsl.w	r3, r2, r3
 8000568:	43db      	mvns	r3, r3
 800056a:	69ba      	ldr	r2, [r7, #24]
 800056c:	4013      	ands	r3, r2
 800056e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	091b      	lsrs	r3, r3, #4
 8000576:	f003 0201 	and.w	r2, r3, #1
 800057a:	69fb      	ldr	r3, [r7, #28]
 800057c:	fa02 f303 	lsl.w	r3, r2, r3
 8000580:	69ba      	ldr	r2, [r7, #24]
 8000582:	4313      	orrs	r3, r2
 8000584:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	69ba      	ldr	r2, [r7, #24]
 800058a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	68db      	ldr	r3, [r3, #12]
 8000590:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000592:	69fb      	ldr	r3, [r7, #28]
 8000594:	005b      	lsls	r3, r3, #1
 8000596:	2203      	movs	r2, #3
 8000598:	fa02 f303 	lsl.w	r3, r2, r3
 800059c:	43db      	mvns	r3, r3
 800059e:	69ba      	ldr	r2, [r7, #24]
 80005a0:	4013      	ands	r3, r2
 80005a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	689a      	ldr	r2, [r3, #8]
 80005a8:	69fb      	ldr	r3, [r7, #28]
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	fa02 f303 	lsl.w	r3, r2, r3
 80005b0:	69ba      	ldr	r2, [r7, #24]
 80005b2:	4313      	orrs	r3, r2
 80005b4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	69ba      	ldr	r2, [r7, #24]
 80005ba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	685b      	ldr	r3, [r3, #4]
 80005c0:	2b02      	cmp	r3, #2
 80005c2:	d003      	beq.n	80005cc <HAL_GPIO_Init+0xfc>
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	2b12      	cmp	r3, #18
 80005ca:	d123      	bne.n	8000614 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80005cc:	69fb      	ldr	r3, [r7, #28]
 80005ce:	08da      	lsrs	r2, r3, #3
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	3208      	adds	r2, #8
 80005d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80005da:	69fb      	ldr	r3, [r7, #28]
 80005dc:	f003 0307 	and.w	r3, r3, #7
 80005e0:	009b      	lsls	r3, r3, #2
 80005e2:	220f      	movs	r2, #15
 80005e4:	fa02 f303 	lsl.w	r3, r2, r3
 80005e8:	43db      	mvns	r3, r3
 80005ea:	69ba      	ldr	r2, [r7, #24]
 80005ec:	4013      	ands	r3, r2
 80005ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	691a      	ldr	r2, [r3, #16]
 80005f4:	69fb      	ldr	r3, [r7, #28]
 80005f6:	f003 0307 	and.w	r3, r3, #7
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000600:	69ba      	ldr	r2, [r7, #24]
 8000602:	4313      	orrs	r3, r2
 8000604:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000606:	69fb      	ldr	r3, [r7, #28]
 8000608:	08da      	lsrs	r2, r3, #3
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	3208      	adds	r2, #8
 800060e:	69b9      	ldr	r1, [r7, #24]
 8000610:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800061a:	69fb      	ldr	r3, [r7, #28]
 800061c:	005b      	lsls	r3, r3, #1
 800061e:	2203      	movs	r2, #3
 8000620:	fa02 f303 	lsl.w	r3, r2, r3
 8000624:	43db      	mvns	r3, r3
 8000626:	69ba      	ldr	r2, [r7, #24]
 8000628:	4013      	ands	r3, r2
 800062a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	f003 0203 	and.w	r2, r3, #3
 8000634:	69fb      	ldr	r3, [r7, #28]
 8000636:	005b      	lsls	r3, r3, #1
 8000638:	fa02 f303 	lsl.w	r3, r2, r3
 800063c:	69ba      	ldr	r2, [r7, #24]
 800063e:	4313      	orrs	r3, r2
 8000640:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	69ba      	ldr	r2, [r7, #24]
 8000646:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000650:	2b00      	cmp	r3, #0
 8000652:	f000 80b4 	beq.w	80007be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	4b5f      	ldr	r3, [pc, #380]	; (80007d8 <HAL_GPIO_Init+0x308>)
 800065c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800065e:	4a5e      	ldr	r2, [pc, #376]	; (80007d8 <HAL_GPIO_Init+0x308>)
 8000660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000664:	6453      	str	r3, [r2, #68]	; 0x44
 8000666:	4b5c      	ldr	r3, [pc, #368]	; (80007d8 <HAL_GPIO_Init+0x308>)
 8000668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800066a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000672:	4a5a      	ldr	r2, [pc, #360]	; (80007dc <HAL_GPIO_Init+0x30c>)
 8000674:	69fb      	ldr	r3, [r7, #28]
 8000676:	089b      	lsrs	r3, r3, #2
 8000678:	3302      	adds	r3, #2
 800067a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800067e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000680:	69fb      	ldr	r3, [r7, #28]
 8000682:	f003 0303 	and.w	r3, r3, #3
 8000686:	009b      	lsls	r3, r3, #2
 8000688:	220f      	movs	r2, #15
 800068a:	fa02 f303 	lsl.w	r3, r2, r3
 800068e:	43db      	mvns	r3, r3
 8000690:	69ba      	ldr	r2, [r7, #24]
 8000692:	4013      	ands	r3, r2
 8000694:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4a51      	ldr	r2, [pc, #324]	; (80007e0 <HAL_GPIO_Init+0x310>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d02b      	beq.n	80006f6 <HAL_GPIO_Init+0x226>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4a50      	ldr	r2, [pc, #320]	; (80007e4 <HAL_GPIO_Init+0x314>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d025      	beq.n	80006f2 <HAL_GPIO_Init+0x222>
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4a4f      	ldr	r2, [pc, #316]	; (80007e8 <HAL_GPIO_Init+0x318>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d01f      	beq.n	80006ee <HAL_GPIO_Init+0x21e>
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4a4e      	ldr	r2, [pc, #312]	; (80007ec <HAL_GPIO_Init+0x31c>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d019      	beq.n	80006ea <HAL_GPIO_Init+0x21a>
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4a4d      	ldr	r2, [pc, #308]	; (80007f0 <HAL_GPIO_Init+0x320>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d013      	beq.n	80006e6 <HAL_GPIO_Init+0x216>
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4a4c      	ldr	r2, [pc, #304]	; (80007f4 <HAL_GPIO_Init+0x324>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d00d      	beq.n	80006e2 <HAL_GPIO_Init+0x212>
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4a4b      	ldr	r2, [pc, #300]	; (80007f8 <HAL_GPIO_Init+0x328>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d007      	beq.n	80006de <HAL_GPIO_Init+0x20e>
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4a4a      	ldr	r2, [pc, #296]	; (80007fc <HAL_GPIO_Init+0x32c>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d101      	bne.n	80006da <HAL_GPIO_Init+0x20a>
 80006d6:	2307      	movs	r3, #7
 80006d8:	e00e      	b.n	80006f8 <HAL_GPIO_Init+0x228>
 80006da:	2308      	movs	r3, #8
 80006dc:	e00c      	b.n	80006f8 <HAL_GPIO_Init+0x228>
 80006de:	2306      	movs	r3, #6
 80006e0:	e00a      	b.n	80006f8 <HAL_GPIO_Init+0x228>
 80006e2:	2305      	movs	r3, #5
 80006e4:	e008      	b.n	80006f8 <HAL_GPIO_Init+0x228>
 80006e6:	2304      	movs	r3, #4
 80006e8:	e006      	b.n	80006f8 <HAL_GPIO_Init+0x228>
 80006ea:	2303      	movs	r3, #3
 80006ec:	e004      	b.n	80006f8 <HAL_GPIO_Init+0x228>
 80006ee:	2302      	movs	r3, #2
 80006f0:	e002      	b.n	80006f8 <HAL_GPIO_Init+0x228>
 80006f2:	2301      	movs	r3, #1
 80006f4:	e000      	b.n	80006f8 <HAL_GPIO_Init+0x228>
 80006f6:	2300      	movs	r3, #0
 80006f8:	69fa      	ldr	r2, [r7, #28]
 80006fa:	f002 0203 	and.w	r2, r2, #3
 80006fe:	0092      	lsls	r2, r2, #2
 8000700:	4093      	lsls	r3, r2
 8000702:	69ba      	ldr	r2, [r7, #24]
 8000704:	4313      	orrs	r3, r2
 8000706:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000708:	4934      	ldr	r1, [pc, #208]	; (80007dc <HAL_GPIO_Init+0x30c>)
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	089b      	lsrs	r3, r3, #2
 800070e:	3302      	adds	r3, #2
 8000710:	69ba      	ldr	r2, [r7, #24]
 8000712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000716:	4b3a      	ldr	r3, [pc, #232]	; (8000800 <HAL_GPIO_Init+0x330>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800071c:	693b      	ldr	r3, [r7, #16]
 800071e:	43db      	mvns	r3, r3
 8000720:	69ba      	ldr	r2, [r7, #24]
 8000722:	4013      	ands	r3, r2
 8000724:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	685b      	ldr	r3, [r3, #4]
 800072a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800072e:	2b00      	cmp	r3, #0
 8000730:	d003      	beq.n	800073a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000732:	69ba      	ldr	r2, [r7, #24]
 8000734:	693b      	ldr	r3, [r7, #16]
 8000736:	4313      	orrs	r3, r2
 8000738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800073a:	4a31      	ldr	r2, [pc, #196]	; (8000800 <HAL_GPIO_Init+0x330>)
 800073c:	69bb      	ldr	r3, [r7, #24]
 800073e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000740:	4b2f      	ldr	r3, [pc, #188]	; (8000800 <HAL_GPIO_Init+0x330>)
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000746:	693b      	ldr	r3, [r7, #16]
 8000748:	43db      	mvns	r3, r3
 800074a:	69ba      	ldr	r2, [r7, #24]
 800074c:	4013      	ands	r3, r2
 800074e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000758:	2b00      	cmp	r3, #0
 800075a:	d003      	beq.n	8000764 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800075c:	69ba      	ldr	r2, [r7, #24]
 800075e:	693b      	ldr	r3, [r7, #16]
 8000760:	4313      	orrs	r3, r2
 8000762:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000764:	4a26      	ldr	r2, [pc, #152]	; (8000800 <HAL_GPIO_Init+0x330>)
 8000766:	69bb      	ldr	r3, [r7, #24]
 8000768:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800076a:	4b25      	ldr	r3, [pc, #148]	; (8000800 <HAL_GPIO_Init+0x330>)
 800076c:	689b      	ldr	r3, [r3, #8]
 800076e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000770:	693b      	ldr	r3, [r7, #16]
 8000772:	43db      	mvns	r3, r3
 8000774:	69ba      	ldr	r2, [r7, #24]
 8000776:	4013      	ands	r3, r2
 8000778:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000782:	2b00      	cmp	r3, #0
 8000784:	d003      	beq.n	800078e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000786:	69ba      	ldr	r2, [r7, #24]
 8000788:	693b      	ldr	r3, [r7, #16]
 800078a:	4313      	orrs	r3, r2
 800078c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800078e:	4a1c      	ldr	r2, [pc, #112]	; (8000800 <HAL_GPIO_Init+0x330>)
 8000790:	69bb      	ldr	r3, [r7, #24]
 8000792:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000794:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <HAL_GPIO_Init+0x330>)
 8000796:	68db      	ldr	r3, [r3, #12]
 8000798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800079a:	693b      	ldr	r3, [r7, #16]
 800079c:	43db      	mvns	r3, r3
 800079e:	69ba      	ldr	r2, [r7, #24]
 80007a0:	4013      	ands	r3, r2
 80007a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d003      	beq.n	80007b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80007b0:	69ba      	ldr	r2, [r7, #24]
 80007b2:	693b      	ldr	r3, [r7, #16]
 80007b4:	4313      	orrs	r3, r2
 80007b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80007b8:	4a11      	ldr	r2, [pc, #68]	; (8000800 <HAL_GPIO_Init+0x330>)
 80007ba:	69bb      	ldr	r3, [r7, #24]
 80007bc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	3301      	adds	r3, #1
 80007c2:	61fb      	str	r3, [r7, #28]
 80007c4:	69fb      	ldr	r3, [r7, #28]
 80007c6:	2b0f      	cmp	r3, #15
 80007c8:	f67f ae90 	bls.w	80004ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80007cc:	bf00      	nop
 80007ce:	3724      	adds	r7, #36	; 0x24
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40013800 	.word	0x40013800
 80007e0:	40020000 	.word	0x40020000
 80007e4:	40020400 	.word	0x40020400
 80007e8:	40020800 	.word	0x40020800
 80007ec:	40020c00 	.word	0x40020c00
 80007f0:	40021000 	.word	0x40021000
 80007f4:	40021400 	.word	0x40021400
 80007f8:	40021800 	.word	0x40021800
 80007fc:	40021c00 	.word	0x40021c00
 8000800:	40013c00 	.word	0x40013c00

08000804 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	460b      	mov	r3, r1
 800080e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	695a      	ldr	r2, [r3, #20]
 8000814:	887b      	ldrh	r3, [r7, #2]
 8000816:	401a      	ands	r2, r3
 8000818:	887b      	ldrh	r3, [r7, #2]
 800081a:	429a      	cmp	r2, r3
 800081c:	d104      	bne.n	8000828 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800081e:	887b      	ldrh	r3, [r7, #2]
 8000820:	041a      	lsls	r2, r3, #16
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000826:	e002      	b.n	800082e <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000828:	887a      	ldrh	r2, [r7, #2]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	619a      	str	r2, [r3, #24]
}
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr

0800083a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b082      	sub	sp, #8
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d101      	bne.n	800084c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000848:	2301      	movs	r3, #1
 800084a:	e01d      	b.n	8000888 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000852:	b2db      	uxtb	r3, r3
 8000854:	2b00      	cmp	r3, #0
 8000856:	d106      	bne.n	8000866 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2200      	movs	r2, #0
 800085c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000860:	6878      	ldr	r0, [r7, #4]
 8000862:	f000 fabb 	bl	8000ddc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2202      	movs	r2, #2
 800086a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	3304      	adds	r3, #4
 8000876:	4619      	mov	r1, r3
 8000878:	4610      	mov	r0, r2
 800087a:	f000 f95d 	bl	8000b38 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2201      	movs	r2, #1
 8000882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8000886:	2300      	movs	r3, #0
}
 8000888:	4618      	mov	r0, r3
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	68da      	ldr	r2, [r3, #12]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f042 0201 	orr.w	r2, r2, #1
 80008a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	689b      	ldr	r3, [r3, #8]
 80008ae:	f003 0307 	and.w	r3, r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	2b06      	cmp	r3, #6
 80008b8:	d007      	beq.n	80008ca <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f042 0201 	orr.w	r2, r2, #1
 80008c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80008ca:	2300      	movs	r3, #0
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3714      	adds	r7, #20
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	691b      	ldr	r3, [r3, #16]
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	2b02      	cmp	r3, #2
 80008ec:	d122      	bne.n	8000934 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	f003 0302 	and.w	r3, r3, #2
 80008f8:	2b02      	cmp	r3, #2
 80008fa:	d11b      	bne.n	8000934 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f06f 0202 	mvn.w	r2, #2
 8000904:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2201      	movs	r2, #1
 800090a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	699b      	ldr	r3, [r3, #24]
 8000912:	f003 0303 	and.w	r3, r3, #3
 8000916:	2b00      	cmp	r3, #0
 8000918:	d003      	beq.n	8000922 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f000 f8ee 	bl	8000afc <HAL_TIM_IC_CaptureCallback>
 8000920:	e005      	b.n	800092e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f000 f8e0 	bl	8000ae8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f000 f8f1 	bl	8000b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2200      	movs	r2, #0
 8000932:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	691b      	ldr	r3, [r3, #16]
 800093a:	f003 0304 	and.w	r3, r3, #4
 800093e:	2b04      	cmp	r3, #4
 8000940:	d122      	bne.n	8000988 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	68db      	ldr	r3, [r3, #12]
 8000948:	f003 0304 	and.w	r3, r3, #4
 800094c:	2b04      	cmp	r3, #4
 800094e:	d11b      	bne.n	8000988 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f06f 0204 	mvn.w	r2, #4
 8000958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2202      	movs	r2, #2
 800095e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	699b      	ldr	r3, [r3, #24]
 8000966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800096a:	2b00      	cmp	r3, #0
 800096c:	d003      	beq.n	8000976 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f000 f8c4 	bl	8000afc <HAL_TIM_IC_CaptureCallback>
 8000974:	e005      	b.n	8000982 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f000 f8b6 	bl	8000ae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f000 f8c7 	bl	8000b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2200      	movs	r2, #0
 8000986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	691b      	ldr	r3, [r3, #16]
 800098e:	f003 0308 	and.w	r3, r3, #8
 8000992:	2b08      	cmp	r3, #8
 8000994:	d122      	bne.n	80009dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	f003 0308 	and.w	r3, r3, #8
 80009a0:	2b08      	cmp	r3, #8
 80009a2:	d11b      	bne.n	80009dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f06f 0208 	mvn.w	r2, #8
 80009ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2204      	movs	r2, #4
 80009b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	f003 0303 	and.w	r3, r3, #3
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d003      	beq.n	80009ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f000 f89a 	bl	8000afc <HAL_TIM_IC_CaptureCallback>
 80009c8:	e005      	b.n	80009d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80009ca:	6878      	ldr	r0, [r7, #4]
 80009cc:	f000 f88c 	bl	8000ae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f000 f89d 	bl	8000b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2200      	movs	r2, #0
 80009da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	691b      	ldr	r3, [r3, #16]
 80009e2:	f003 0310 	and.w	r3, r3, #16
 80009e6:	2b10      	cmp	r3, #16
 80009e8:	d122      	bne.n	8000a30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	f003 0310 	and.w	r3, r3, #16
 80009f4:	2b10      	cmp	r3, #16
 80009f6:	d11b      	bne.n	8000a30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f06f 0210 	mvn.w	r2, #16
 8000a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2208      	movs	r2, #8
 8000a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	69db      	ldr	r3, [r3, #28]
 8000a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d003      	beq.n	8000a1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000a16:	6878      	ldr	r0, [r7, #4]
 8000a18:	f000 f870 	bl	8000afc <HAL_TIM_IC_CaptureCallback>
 8000a1c:	e005      	b.n	8000a2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f000 f862 	bl	8000ae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f000 f873 	bl	8000b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	691b      	ldr	r3, [r3, #16]
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d10e      	bne.n	8000a5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	f003 0301 	and.w	r3, r3, #1
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d107      	bne.n	8000a5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f06f 0201 	mvn.w	r2, #1
 8000a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f000 f984 	bl	8000d64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	691b      	ldr	r3, [r3, #16]
 8000a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a66:	2b80      	cmp	r3, #128	; 0x80
 8000a68:	d10e      	bne.n	8000a88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a74:	2b80      	cmp	r3, #128	; 0x80
 8000a76:	d107      	bne.n	8000a88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f000 f902 	bl	8000c8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	691b      	ldr	r3, [r3, #16]
 8000a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a92:	2b40      	cmp	r3, #64	; 0x40
 8000a94:	d10e      	bne.n	8000ab4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aa0:	2b40      	cmp	r3, #64	; 0x40
 8000aa2:	d107      	bne.n	8000ab4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f000 f838 	bl	8000b24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	691b      	ldr	r3, [r3, #16]
 8000aba:	f003 0320 	and.w	r3, r3, #32
 8000abe:	2b20      	cmp	r3, #32
 8000ac0:	d10e      	bne.n	8000ae0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	f003 0320 	and.w	r3, r3, #32
 8000acc:	2b20      	cmp	r3, #32
 8000ace:	d107      	bne.n	8000ae0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f06f 0220 	mvn.w	r2, #32
 8000ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f000 f8cc 	bl	8000c78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8000ae0:	bf00      	nop
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	4a40      	ldr	r2, [pc, #256]	; (8000c4c <TIM_Base_SetConfig+0x114>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d013      	beq.n	8000b78 <TIM_Base_SetConfig+0x40>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b56:	d00f      	beq.n	8000b78 <TIM_Base_SetConfig+0x40>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a3d      	ldr	r2, [pc, #244]	; (8000c50 <TIM_Base_SetConfig+0x118>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d00b      	beq.n	8000b78 <TIM_Base_SetConfig+0x40>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4a3c      	ldr	r2, [pc, #240]	; (8000c54 <TIM_Base_SetConfig+0x11c>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d007      	beq.n	8000b78 <TIM_Base_SetConfig+0x40>
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a3b      	ldr	r2, [pc, #236]	; (8000c58 <TIM_Base_SetConfig+0x120>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d003      	beq.n	8000b78 <TIM_Base_SetConfig+0x40>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4a3a      	ldr	r2, [pc, #232]	; (8000c5c <TIM_Base_SetConfig+0x124>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d108      	bne.n	8000b8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	68fa      	ldr	r2, [r7, #12]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4a2f      	ldr	r2, [pc, #188]	; (8000c4c <TIM_Base_SetConfig+0x114>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d02b      	beq.n	8000bea <TIM_Base_SetConfig+0xb2>
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b98:	d027      	beq.n	8000bea <TIM_Base_SetConfig+0xb2>
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4a2c      	ldr	r2, [pc, #176]	; (8000c50 <TIM_Base_SetConfig+0x118>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d023      	beq.n	8000bea <TIM_Base_SetConfig+0xb2>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4a2b      	ldr	r2, [pc, #172]	; (8000c54 <TIM_Base_SetConfig+0x11c>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d01f      	beq.n	8000bea <TIM_Base_SetConfig+0xb2>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4a2a      	ldr	r2, [pc, #168]	; (8000c58 <TIM_Base_SetConfig+0x120>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d01b      	beq.n	8000bea <TIM_Base_SetConfig+0xb2>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4a29      	ldr	r2, [pc, #164]	; (8000c5c <TIM_Base_SetConfig+0x124>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d017      	beq.n	8000bea <TIM_Base_SetConfig+0xb2>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4a28      	ldr	r2, [pc, #160]	; (8000c60 <TIM_Base_SetConfig+0x128>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d013      	beq.n	8000bea <TIM_Base_SetConfig+0xb2>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4a27      	ldr	r2, [pc, #156]	; (8000c64 <TIM_Base_SetConfig+0x12c>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d00f      	beq.n	8000bea <TIM_Base_SetConfig+0xb2>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4a26      	ldr	r2, [pc, #152]	; (8000c68 <TIM_Base_SetConfig+0x130>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d00b      	beq.n	8000bea <TIM_Base_SetConfig+0xb2>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4a25      	ldr	r2, [pc, #148]	; (8000c6c <TIM_Base_SetConfig+0x134>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d007      	beq.n	8000bea <TIM_Base_SetConfig+0xb2>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4a24      	ldr	r2, [pc, #144]	; (8000c70 <TIM_Base_SetConfig+0x138>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d003      	beq.n	8000bea <TIM_Base_SetConfig+0xb2>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a23      	ldr	r2, [pc, #140]	; (8000c74 <TIM_Base_SetConfig+0x13c>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d108      	bne.n	8000bfc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000bf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	68db      	ldr	r3, [r3, #12]
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	695b      	ldr	r3, [r3, #20]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	68fa      	ldr	r2, [r7, #12]
 8000c0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	689a      	ldr	r2, [r3, #8]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <TIM_Base_SetConfig+0x114>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d003      	beq.n	8000c30 <TIM_Base_SetConfig+0xf8>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a0c      	ldr	r2, [pc, #48]	; (8000c5c <TIM_Base_SetConfig+0x124>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d103      	bne.n	8000c38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	691a      	ldr	r2, [r3, #16]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	615a      	str	r2, [r3, #20]
}
 8000c3e:	bf00      	nop
 8000c40:	3714      	adds	r7, #20
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	40010000 	.word	0x40010000
 8000c50:	40000400 	.word	0x40000400
 8000c54:	40000800 	.word	0x40000800
 8000c58:	40000c00 	.word	0x40000c00
 8000c5c:	40010400 	.word	0x40010400
 8000c60:	40014000 	.word	0x40014000
 8000c64:	40014400 	.word	0x40014400
 8000c68:	40014800 	.word	0x40014800
 8000c6c:	40001800 	.word	0x40001800
 8000c70:	40001c00 	.word	0x40001c00
 8000c74:	40002000 	.word	0x40002000

08000c78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <SysTick_Handler>:
#include "main.h"

extern TIM_HandleTypeDef htim6;

void SysTick_Handler (void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000ca4:	f7ff fae2 	bl	800026c <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000ca8:	f7ff fc05 	bl	80004b6 <HAL_SYSTICK_IRQHandler>
}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim6);
 8000cb4:	4802      	ldr	r0, [pc, #8]	; (8000cc0 <TIM6_DAC_IRQHandler+0x10>)
 8000cb6:	f7ff fe0f 	bl	80008d8 <HAL_TIM_IRQHandler>
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	2000002c 	.word	0x2000002c

08000cc4 <main>:
static void GPIO_Init(void);

TIM_HandleTypeDef htim6;

int main(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
	HAL_Init();
 8000cc8:	f7ff fa7e 	bl	80001c8 <HAL_Init>
	SystemClock_Config();
 8000ccc:	f000 f85a 	bl	8000d84 <SystemClock_Config>
	GPIO_Init();
 8000cd0:	f000 f822 	bl	8000d18 <GPIO_Init>
	TIMER6_Init();
 8000cd4:	f000 f806 	bl	8000ce4 <TIMER6_Init>

	//Let start the timer in IT mode
	HAL_TIM_Base_Start_IT(&htim6);
 8000cd8:	4801      	ldr	r0, [pc, #4]	; (8000ce0 <main+0x1c>)
 8000cda:	f7ff fdd9 	bl	8000890 <HAL_TIM_Base_Start_IT>

	while(1);
 8000cde:	e7fe      	b.n	8000cde <main+0x1a>
 8000ce0:	2000002c 	.word	0x2000002c

08000ce4 <TIMER6_Init>:

	return 0;
}

void TIMER6_Init (void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
	htim6.Instance = TIM6;
 8000ce8:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <TIMER6_Init+0x2c>)
 8000cea:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <TIMER6_Init+0x30>)
 8000cec:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 24;
 8000cee:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <TIMER6_Init+0x2c>)
 8000cf0:	2218      	movs	r2, #24
 8000cf2:	605a      	str	r2, [r3, #4]
	htim6.Init.Period = (64000 -1);
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <TIMER6_Init+0x2c>)
 8000cf6:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000cfa:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_Base_Init (&htim6) != HAL_OK)
 8000cfc:	4804      	ldr	r0, [pc, #16]	; (8000d10 <TIMER6_Init+0x2c>)
 8000cfe:	f7ff fd9c 	bl	800083a <HAL_TIM_Base_Init>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <TIMER6_Init+0x28>
	{
		Error_handler();
 8000d08:	f000 f843 	bl	8000d92 <Error_handler>
	}

}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	2000002c 	.word	0x2000002c
 8000d14:	40001000 	.word	0x40001000

08000d18 <GPIO_Init>:

void GPIO_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	603b      	str	r3, [r7, #0]
 8000d22:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <GPIO_Init+0x44>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a0d      	ldr	r2, [pc, #52]	; (8000d5c <GPIO_Init+0x44>)
 8000d28:	f043 0308 	orr.w	r3, r3, #8
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <GPIO_Init+0x44>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0308 	and.w	r3, r3, #8
 8000d36:	603b      	str	r3, [r7, #0]
 8000d38:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef ledgpio;
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	60bb      	str	r3, [r7, #8]
	ledgpio.Pin = GPIO_PIN_12;
 8000d3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d42:	607b      	str	r3, [r7, #4]
	ledgpio.Pull= GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(GPIOD, &ledgpio);
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4804      	ldr	r0, [pc, #16]	; (8000d60 <GPIO_Init+0x48>)
 8000d4e:	f7ff fbbf 	bl	80004d0 <HAL_GPIO_Init>
}
 8000d52:	bf00      	nop
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40020c00 	.word	0x40020c00

08000d64 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000d6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d70:	4803      	ldr	r0, [pc, #12]	; (8000d80 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000d72:	f7ff fd47 	bl	8000804 <HAL_GPIO_TogglePin>
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40020c00 	.word	0x40020c00

08000d84 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
	;
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <Error_handler>:
void Error_handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0
	;
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <HAL_MspInit>:
 *      Author: thaithinhtran
 */
#include "main.h"

void HAL_MspInit(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
//Here will do low level processor specific inits.
	//1. set up the priority grouping of the cortex mx processor
//	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x07<<16; //usage faul , memory fault , bus fault system exceptions
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <HAL_MspInit+0x38>)
 8000da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da8:	4a0b      	ldr	r2, [pc, #44]	; (8000dd8 <HAL_MspInit+0x38>)
 8000daa:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000dae:	6253      	str	r3, [r2, #36]	; 0x24

	//3. Configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2100      	movs	r1, #0
 8000db4:	f06f 000b 	mvn.w	r0, #11
 8000db8:	f7ff fb47 	bl	800044a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	f06f 000a 	mvn.w	r0, #10
 8000dc4:	f7ff fb41 	bl	800044a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2100      	movs	r1, #0
 8000dcc:	f06f 0009 	mvn.w	r0, #9
 8000dd0:	f7ff fb3b 	bl	800044a <HAL_NVIC_SetPriority>
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htimer)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	//1. Enable the Clock for TIM6 peripheral
	__HAL_RCC_TIM6_CLK_ENABLE();
 8000de4:	2300      	movs	r3, #0
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <HAL_TIM_Base_MspInit+0x3c>)
 8000dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dec:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <HAL_TIM_Base_MspInit+0x3c>)
 8000dee:	f043 0310 	orr.w	r3, r3, #16
 8000df2:	6413      	str	r3, [r2, #64]	; 0x40
 8000df4:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <HAL_TIM_Base_MspInit+0x3c>)
 8000df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df8:	f003 0310 	and.w	r3, r3, #16
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]

	//2. Enable the IRQ of TIM6
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e00:	2036      	movs	r0, #54	; 0x36
 8000e02:	f7ff fb3e 	bl	8000482 <HAL_NVIC_EnableIRQ>

	//3. Setup the priority of TIM6_DAC_IRQn
	HAL_NVIC_SetPriority(TIM6_DAC_IRQn,15,0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	210f      	movs	r1, #15
 8000e0a:	2036      	movs	r0, #54	; 0x36
 8000e0c:	f7ff fb1d 	bl	800044a <HAL_NVIC_SetPriority>
}
 8000e10:	bf00      	nop
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40023800 	.word	0x40023800

08000e1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <SystemInit+0x28>)
 8000e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e26:	4a07      	ldr	r2, [pc, #28]	; (8000e44 <SystemInit+0x28>)
 8000e28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e30:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <SystemInit+0x28>)
 8000e32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e36:	609a      	str	r2, [r3, #8]
#endif
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e80 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e4c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e4e:	e003      	b.n	8000e58 <LoopCopyDataInit>

08000e50 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e52:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e54:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e56:	3104      	adds	r1, #4

08000e58 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e58:	480b      	ldr	r0, [pc, #44]	; (8000e88 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e5c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e5e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e60:	d3f6      	bcc.n	8000e50 <CopyDataInit>
  ldr  r2, =_sbss
 8000e62:	4a0b      	ldr	r2, [pc, #44]	; (8000e90 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e64:	e002      	b.n	8000e6c <LoopFillZerobss>

08000e66 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e66:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e68:	f842 3b04 	str.w	r3, [r2], #4

08000e6c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e6c:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e6e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e70:	d3f9      	bcc.n	8000e66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e72:	f7ff ffd3 	bl	8000e1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e76:	f000 f811 	bl	8000e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e7a:	f7ff ff23 	bl	8000cc4 <main>
  bx  lr    
 8000e7e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e80:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e84:	08000f04 	.word	0x08000f04
  ldr  r0, =_sdata
 8000e88:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e8c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000e90:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000e94:	2000006c 	.word	0x2000006c

08000e98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e98:	e7fe      	b.n	8000e98 <ADC_IRQHandler>
	...

08000e9c <__libc_init_array>:
 8000e9c:	b570      	push	{r4, r5, r6, lr}
 8000e9e:	4e0d      	ldr	r6, [pc, #52]	; (8000ed4 <__libc_init_array+0x38>)
 8000ea0:	4c0d      	ldr	r4, [pc, #52]	; (8000ed8 <__libc_init_array+0x3c>)
 8000ea2:	1ba4      	subs	r4, r4, r6
 8000ea4:	10a4      	asrs	r4, r4, #2
 8000ea6:	2500      	movs	r5, #0
 8000ea8:	42a5      	cmp	r5, r4
 8000eaa:	d109      	bne.n	8000ec0 <__libc_init_array+0x24>
 8000eac:	4e0b      	ldr	r6, [pc, #44]	; (8000edc <__libc_init_array+0x40>)
 8000eae:	4c0c      	ldr	r4, [pc, #48]	; (8000ee0 <__libc_init_array+0x44>)
 8000eb0:	f000 f818 	bl	8000ee4 <_init>
 8000eb4:	1ba4      	subs	r4, r4, r6
 8000eb6:	10a4      	asrs	r4, r4, #2
 8000eb8:	2500      	movs	r5, #0
 8000eba:	42a5      	cmp	r5, r4
 8000ebc:	d105      	bne.n	8000eca <__libc_init_array+0x2e>
 8000ebe:	bd70      	pop	{r4, r5, r6, pc}
 8000ec0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ec4:	4798      	blx	r3
 8000ec6:	3501      	adds	r5, #1
 8000ec8:	e7ee      	b.n	8000ea8 <__libc_init_array+0xc>
 8000eca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ece:	4798      	blx	r3
 8000ed0:	3501      	adds	r5, #1
 8000ed2:	e7f2      	b.n	8000eba <__libc_init_array+0x1e>
 8000ed4:	08000efc 	.word	0x08000efc
 8000ed8:	08000efc 	.word	0x08000efc
 8000edc:	08000efc 	.word	0x08000efc
 8000ee0:	08000f00 	.word	0x08000f00

08000ee4 <_init>:
 8000ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ee6:	bf00      	nop
 8000ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eea:	bc08      	pop	{r3}
 8000eec:	469e      	mov	lr, r3
 8000eee:	4770      	bx	lr

08000ef0 <_fini>:
 8000ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ef2:	bf00      	nop
 8000ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ef6:	bc08      	pop	{r3}
 8000ef8:	469e      	mov	lr, r3
 8000efa:	4770      	bx	lr
